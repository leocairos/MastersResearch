a systematic literature review on agile requirements engineering practices and challenges 2014 elsevier ltd all rights reserved unlike traditional software development methods agile methods are marked by extensive collaboration i e face to face communication although claimed to be beneficial the software development community as a whole is still unfamiliar with the role of the requirements engineering practices in agile methods the term agile requirements engineering is used to define the agile way of planning executing and reasoning about requirements engineering activities moreover not much is known about the challenges posed by collaboration oriented agile way of dealing with requirements engineering activities our goal is to map the evidence available about requirements engineering practices adopted and challenges faced by agile teams in order to understand how traditional requirements engineering issues are resolved using agile requirements engineering we conducted a systematic review of literature published between 2002 and june 2013 and identified 21 papers that discuss agile requirements engineering we formulated and applied specific inclusion and exclusion criteria in two distinct rounds to determine the most relevant studies for our research goal the review identified 17 practices of agile requirements engineering five challenges traceable to traditional requirements engineering that were overcome by agile requirements engineering and eight challenges posed by the practice of agile requirements engineering however our findings suggest that agile requirements engineering as a research context needs additional attention and more empirical results are required to better understand the impact of agile requirements engineering practices e g dealing with non functional requirements and self organising teams agile requirements engineering agile software development methods collaboration systematic review traditional requirements engineering a framework to study requirements driven collaboration among agile teams findings from two case studies 2014 elsevier ltd all rights reserved stakeholders collaboration is required to develop requirements in agile software development requirements engineering and agile methods share common grounds as they both focus on stakeholder collaboration the key issue is finding a way to study collaboration driven by requirements in geographically distributed agile teams in this paper we aim to propose a framework to study collaboration driven by requirements among agile teams and determine the impact of their collaboration patterns on the iteration performance we define collaboration in terms of communication as information exchange among members and awareness knowledge of others two case studies were conducted to examine communication and awareness network patterns among distributed agile teams data were collected through questionnaires semi structured interviews and onsite observation the findings revealed that the framework aids in determining the core members collaboration trends clustering tendency communication and awareness reciprocity of the teams small worldliness and centralisation behaviour of the networks and iteration performance of the agile teams the framework has implications for the industrial practitioners i e managers to learn about their team s collaboration in order to take measures for performance improvement at the same time the researchers can use this framework to study other social aspects in variable settings to produce more empirical results agile methods collaboration communication and awareness distributed agile teams requirements driven collaboration acm international conference proceeding series the proceedings contain 53 papers the topics discussed include cloud network architecture design patterns a pattern for wsdl based testing of web service compositions consumer behavior change pattern for energy efficiency growth mindset development pattern five patterns for designing pattern mining workshops guiding the selection of security patterns based on security requirements and pattern classification patterns to build the magic backlog michael weiss the business of open source missing patterns design of knowledge management info structures interaction design patterns for accessible video learning technologies patterns for integrating agile development processes and user centred design rendering patterns for modern web enterprise applications pattern catalog for multicore migration of embedded automotive systems model transformation and synchronization process patterns weaving in patterns into it infrastructure models industry case and approaches test patterns for android mobile applications applying performance patterns for requirements engineering and awareness seeds for more diversity in computer science education requirements engineering in agile projects a systematic mapping based in evidences of industry copyright 2015 by the authors interest in the adoption of agile methodologies has grown in recent years as a strategy to minimize problems in software development however recent studies indicate high rates of failure also in projects that use agile processes in this context this research conducted an exploratory study to investigate how requirements engineering is used in projects that adopt agile methodologies for this a systematic mapping was performed and it identified the engineering requirements techniques that are running in the industry the problems and limitations in projects that adopt agile methodologies the low involvement of users and the constant changes of requirements were identified as the main challenges to be overcome agile methodologies requirements systematic mapping effective hybrid tool for global software development research india publications requirements engineering is as its name suggests the engineering discipline of establishing user requirements and specifying software systems there are many definitions of requirements engineering however they all share the idea that requirements involves finding out what people want from a computer system and understanding what their needs mean in terms of design requirements engineering is closely related to software engineering which focuses more on the process of designing the system that users want perhaps the most concise summary comes from barry boehm requirements are designing the right thing as opposed to software engineering s designing the thing right boehm 1981 requirement engineering is the important phase in the software development here we gather all requirements of the software which is proposed for development an agile methodology produces high quality software and takes less time in comparison to traditional methods agile was discovered for managing the development process in the environment where requirement could be changed during development process requirement engineering is the important phase in the agile development methodology in this paper we are providing a hybrid approach for requirement engineering in the agile with the help of jad and the prioritization of the requirements in the agile is helped by the viewpoint agile methodology jad requirement engineering viewpoint what do practitioners vary in using scrum springer international publishing switzerland 2015 background agile software development has become a popular way of developing software scrum is the most frequently used agile framework but it is often reported to be adapted in practice objective thus we aim to understand how scrum is adapted in different contexts and what are the reasons for these changes method using a structured interview guideline we interviewed ten german companies about their concrete usage of scrum and analysed the results qualitatively results all companies vary scrum in some way the least variations are in the sprint length events team size and requirements engineering many users varied the roles effort estimations and quality assurance conclusions many variations constitute a substantial deviation from scrum as initially proposed for some of these variations there are good reasons sometimes however the variations are a result of a previous non agile hierarchical organisation agile processes industrial case study scrum variations weekly round trips from norms to requirements and tests an industrial experience report 2015 ieee seac is a major software provider in italy in the area of business management with a focus on norms and human resources seac is re engineering their huge legacy system to c sql server to minimise the risks associated with such reengineering project seac has adopted an incremental and agile process model which produces small and frequent releases of new incremental modules that replace a portion of the legacy system at a time since the seac software handles business activities that are highly dependent on norms such as the contracts of employees the taxation of incomes and salaries the pension contributions one of the key challenges is to support a smooth transformation of norms into requirements into code and eventually into test cases used to verify that norms have been implemented as prescribed by the law the se research unit at fbk has been involved to introduce a set of practices aimed at supporting such transformation so as to improve the current process we report the experience made during the project in this paper agile process industrial experience requirements and testing in practice evaluation of behaviormap a user centered behavior language 2015 ieee in the software development process one of the recurring problems is to ensure that the expectations of stakeholders are being met these expectations must match the system s behavior and be present in the requirements specifications and models the requirements engineering discipline studies how to capture specify validate and manage requirements however recent empirical studies show that stakeholders do not usually understand traditional requirements models this paper focuses on the cognitive evaluation of a user centered language called behaviormap that aims to specify behavioral user scenarios in a cognitive way based on mind map modelling this paper describes an experimental evaluation to verify the understandability of the behaviormap scenarios compared to the textual ones the experiment gathered data from 15 individuals naïve users with different backgrounds that had to analyze 8 scenarios being 4 graphical and 4 textual to assess the participants cognitive effort it was used questionnaires also the time effort to perform the tasks was measured this experiment showed promising results for the behaviormap scenarios agile requirements behavior driven design cognitive effort mind map modelling user centred requirements 8th ifip wg 8 1 working conference on practice of enterprise modeling poem 2015 the proceedings contain 33 papers the special focus in this conference is on evolving enterprises and securing enterprises the topics include towards guiding the use of enterprise modeling in the context of business and it alignment towards a generic goal model to support continuous improvement in sme construction companies a risk based approach supporting enterprise architecture evolution pattern based security requirements derivation from secure tropos models analyzing attack strategies through anti goal refinement eliciting security requirements for business processes of legacy systems testing a selection of bpmn tools for their support of modelling guidelines consistently formalizing a business process and its properties for verification dealing with risks and workarounds case based development of consumer preferences using brand personality and values co creation modelling users feedback in crowd based requirements engineering factors influencing productization of enterprise modeling methods in designing and developing capabilities benefits of enterprise architecture management using value models for business risk analysis in e service networks analyzing trust requirements in socio technical systems an experience report of improving business process compliance using security risk oriented patterns towards an oss adoption business impact assessment the concepts of decision making modeling devops deployment choices using process architecture design dimensions simplicity is not simple agile modelling method engineering and towards dw support for formulating policies non functional requirements for distributable user interfaces in agile processes copyright 2014 acm this paper presents a two folded approach to deal with non functional requirements for distributable user interfaces deuis in agile processes this proposal employs a conceptual agile framework that ensures earlier consideration of nonfunctional requirements and stakeholders involvement to solve tensions among agility requirements engineering practices and continuous system architecture adaptation besides it improves the step of continuous architecture adaptation as established in the deui field by employing model driven architectures thus while this approach profits from the conceptual framework by means of continuous feedback on how to technically better support the classical tension between agility and requirement engineering it also takes advantage of modeldriven architecture to cope with the tension between agility and distributable user interface architecture changes affine agile methodologies distributable user interfaces model driven development scrum use of method for elicitation documentation and validation of software user requirements medov in agile software development projects 2014 ieee agile and lean software development methodologies appear as a popular alternative to plan driven methodologies but these methodologies have no structure in the process of user requirements specification this paper shows how method for elicitation documentation and validation of software user requirements medov supports agile and lean software development methodologies the medov helps stakeholders in their everyday work with minimal impact on agility the method also ensures an active role of business users a wide picture what usually is the problem for agile development and definition of non functional requirements what the even bigger problem is the medov ensures that no unnecessary features are produced so that no extra code is created and maintenance is easier as well as code correction and improvement using models enables agility in product maintenance especially for integrated systems where one change can have multiple impacts on different parts of system agile methodologies business process management event driven process chain epc method lean software development requirements engineering uml diagrams user centered design in agile re through an on site user experience consultant 2014 ieee this paper is about experiences with user centered design ucd and agile requirements engineering re in fixed price projects efficiently incorporating usability and ucd into re remains a challenge in this paper we describe our experience with the introduction of a team role called on site user experience consultant which supports integrating ucd activities tightly in agile re we name ucd activities and how they fit in our industrial projects also we describe how old habits in communication and interaction have to change to establish ucd within the project team and with the clients 2014 ieee 2nd international workshop on usability and accessibility focused requirements engineering usare 2014 proceedings the proceedings contain 8 papers the topics discussed include user oriented requirements engineering user centered design in agile re through an on site user experience consultant accessibility requirements for blind and visually impaired in a regional context an exploratory study design science research based blended approach for usability driven requirements gathering and application development analysis of trends in the occurrence of eyeblinks for an eyeblink input interface designing for usability in 3d virtual environments health in hand putting mhealth design in context and building up a virtual community for home based chronic diseases healthcare 2014 ieee 4th international workshop on empirical requirements engineering empire 2014 proceedings the proceedings contain 12 papers the topics discussed include a review of practice and problems in requirements engineering in small and medium software enterprises in thailand systematic reviews in requirements engineering a tertiary study how smartphone users assess the value risk trade off of apps an observational study security triage a report of a lean security requirements methodology for cost effective security analysis an experiment on comparing textual vs visual industrial methods for security risk assessment security requirement elicitation techniques the comparison of misuse cases and issue based information systems an experiment design for validating a test case generation strategy from requirements models and a framework for understanding collaborative creativity in requirements engineering empirical validation 2014 ieee 1st international workshop on evolving security and privacy requirements engineering espre 2014 proceedings the proceedings contain 8 papers the topics discussed include semiautomatic security requirements engineering and evolution using decision documentation heuristics and user monitoring argumentation based security requirements elicitation the next round towards a framework to measure security expertise in requirements analysis engineering privacy requirements valuable lessons from another realm supporting evolving security models for an agile security evaluation using malware analysis to improve security requirements on future systems and pattern based and iso 27001 compliant risk analysis for cloud systems and l square preliminary extension of the square methodology to address legal compliance requirements computation analyzing requirements cognition in multiple development paradigms the identification and management of users requirements have been a persistent challenge confronting software development projects for decades complicating this challenge research on requirements engineering processes has failed to keep pace with significant changes in the lived practice of software development in this paper we consider requirements oriented processes as a socio technical computational task in which diverse individuals and artifacts collaboratively compute the requirements for an envisioned software resource through the perspective of distributed cognition we analyze the distributed requirements activities of three information systems development projects each representing a distinct development methodology structured development agile development and open source software development we construct models of the computational structures of these projects to support a novel analytical basis for comparison and contrast of requirements oriented efforts in these development methodologies agile software development distributed cognition open source software development requirements engineering structured development 18th international conference on evaluation and assessment in software engineering ease 2014 the proceedings contain 59 papers the topics discussed include practitioners and researchers expectations on design space exploration for multicore systems in the automotive and avionics domains a survey survey on research synthesis in software engineering in quest for requirements engineering oracles dependent variables and measurements for good re a visual analysis approach to update systematic reviews a systematic literature review for agile development processes and user centered design integration uml consistency rules a systematic mapping study how do software developers experience team performance in lean and agile environments automatic extraction of developer expertise evaluating software merge quality an empirical investigation of the factors affecting agile usage and knowledge sharing for common understanding of technical specifications through artifactual culture handling design level requirements across distributed teams developing a new feature for 12 danish mobile banking apps 2014 ieee bankdata and mjolner have cooperated in the development of a new feature for 12 danish mobile banking apps bankdata is the main system provider and mjolner is subcontractor different teams from bankdata have collected requirements developed the necessary backend and middleware software and designed the user interface one team from mjolner has implemented the app feature the cooperation between the teams was centered around design level requirements our contribution is to describe and discuss a number of lessons learned regarding requirements representations requirements tools and cooperation process we have faced challenges which were amplified by our distributed teams set up we also briefly describe a number of initiatives we have launched recently to alleviate the problems and improve the handling of design level requirements in our future cooperation good enough requirements agile and lean approaches pragmatic requirements engineering process efficiency developing ux for collaborative mobile prototyping prototyping is an essential part of the user centered design process ucd since the emergence of touch based mobile devices in recent years a broad range of efforts has been taken to adapt professional prototyping tools to the mobile context however none of the existing mobile prototyping solutions adapts sufficiently to the needs of multidisciplinary teams or considers the experience of the users working environments explicitly our goal was to develop a mobile prototyping tool that supports the users in their tasks with special attention to the context of use we especially considered the holistic experience relating all tasks of the human centered design process our approach of requirements engineering focused on ux methods to get a deep insight not only on pragmatic features but also emotional demands i e hedonic qualities therefore we tried to strengthen the hedonic qualities to support action mode usage for leveraging creative potentials we d like to reveal whether and to what extent a detailed look on ux can ensure the working progress efficiency and motivation of a multidisciplinary software engineering team practicing agile methods we will illustrate this by presenting the development process of our mobile prototyping tool prime especially concerning new perspectives of a design process that focuses on hedonic parameters 2014 springer international publishing switzerland hedonic quality holistic experience joy of use mobile applications prototyping tools user centered design user experience a private living lab for requirements based evaluation a living lab is described as an open innovation space for the cooperation of users researchers and even companies to participate in a common process to develop innovative solutions an architecture for a living lab for ir has been proposed in 1 in this paper we propose a method and system that foregoes the inherent openness of the living lab and implements a private living lab to enable the cooperation between a research department agile software development and requirements engineering quality assurance this allows the research department to overcome the limitations of the usual approach to gold standard based evaluation while preserving its positive aspects the definition of a private livin g lab may be seen along the lines of the separation of public and private clouds in cloud computing copyright 2013 acm evaluation living lab private search improving user involvement through a model driven requirements approach model driven web engineering mdwe methodologies have proven to be a mature way of developing web applications dramatically increasing productivity during development however after more than a decade of evolution the artifacts and processes used to gather requirements have not changed substantially at the same time the capacity of quickly adapting to emergent domain specific requirements a feature that became popular with the massive adoption of agile approaches has become hard to achieve in these methodologies in this context in order to implement this kind of refined requirements as fast as possible changes are usually applied directly to the generated application losing the abstraction and its inherent productivity provided by the model driven process another way of implementing this kind of changes is by extending the modeling language but this implies a high effort and again a consequent productivity loss in this paper we propose a model driven development approach called mockre that captures requirements using user interface prototypes mockups that end users can understand completely the process and tooling presented here allows end users to express requirements annotating the mockups with textual descriptions and also generating a running application in the same way that mdwe environments do developers may later use these initial specifications placed by end users as valuable model concepts that can be refined through direct coding in a non intrusive way through this strategy mockre intends to make a more extensive reuse of end users specifications throughout the whole developing process 2013 ieee agile mockups model based requirements engineering model driven development 7th international conference on research challenges in information science rcis 2013 conference proceedings the proceedings contain 71 papers the topics discussed include towards a proposal to capture usability requirements through guidelines collaborative creativity in requirements engineering analysis and practical advice handling requirements dependencies in agile projects a focus group with agile software development practitioners goal formalization and classification for requirements engineering fifteen years later pattern based methodology for uml profiles evolution management supporting organizational evolution by means of model driven reengineering frameworks m2flex a process metamodel for flexibility at runtime model driven development of a generic data control engine an industrial experience modeling temporality and subjectivity in conml a framework for question answering and its application to business intelligence and adapting to uncertain and evolving enterprise requirements the case of business driven business intelligence towards next generation requirements engineering this paper analyzes the potential of the mobile social web in facilitating the social dimension of agile requirements engineering in doing so an agile requirements engineering process arep is presented arep consists of a nonlinear sequence of technical activities each of which is supported by a number of social activities a compendium of representative examples that illustrate the interplay between activities underlying arep and social web applications is given the relationships to other software project artifacts and to open source software oss are highlighted 2012 ieee agile methodology collective intelligence human computer interaction mobility software engineering web 2 0 experiences by using affine for building collaborative applications for online communities continuous problems and deficits in developing complex and ever changing software systems led to agile methods e g scrum nevertheless the problem of considering a plethora of different functional as well as nonfunctional requirements n frs remains unsolved and gains in importance when engineering state of the art software the current tide of approaches aims at handling every single nfr by an individual process integrated into scrum yielding a process complexity which can not be handled properly scrum based affine was designed explicitly to provide an alternative solution to over complex design and development processes and still considering all kinds of nfrs early enough in the process in this paper we discuss collected findings by using affine in various projects dealing with the development of software for user centered online communities towards some evidence of its suitability 2013 springer verlag berlin heidelberg affine agile software process nonfunctional requirements engineering scrum security and usability user experience on the interaction between socio technical dimensions in the next generation of requirements engineering the practice of human centered methodologies for software development such as agilemethodologies is impacted by the surrounding technological environment this paper analyzes the potential of the mobile social web in facilitating the social dimension of agile requirements engineering in doing so an agile requirements engineering process arep is presented arep consists of a nonlinear sequence of technical activities each of whichis supported by a number of social activities the interplay between activities underlying arep and social web applications is illustrated by means of representative examples the relationships to other software project artifacts and to open source software oss are highlighted agile methodology collective intelligence knowledge engineering mobility social dynamics web 2 0 requirements engineering foundation for software quality 19th international working conference refsq 2013 proceedings the proceedings contain 28 papers the topics discussed include software architects experiences of quality requirements what know and what we do not know a persona based approach for exploring architecturally significant requirements in agile projects using clustering to improve the structure of natural language requirements documents automatic requirement categorization of large natural language specifications at mercedes benz for review improvements requirement ambiguity not as important as expected results of an empirical evaluation the design of sree a prototype potential ambiguity finder for requirements specifications and lessons learned factors influencing user feedback on predicted satisfaction with software systems maps of lessons learnt in requirements engineering a research preview and requirements traceability across organizational boundaries a survey and taxonomy 2013 3rd international workshop on empirical requirements engineering empire 2013 proceedings the proceedings contain 7 papers the topics discussed include specifying a framework for evaluating requirements engineering technology challenges and lessons learned evaluating the remo ekd technique a technique for the elicitation of software requirements based on ekd organizational models managing requirements volatility while scrumming within the v model users involvement in requirements engineering and system success studying relevant socio technical aspects of requirements driven collaboration in agile teams process research in requirements elicitation and requirements prioritization in software engineering a systematic mapping study servus collaborative tool support for agile requirements analysis agility in software and service engineering usually needs to encom pass the requirements analysis phase this paper describes a multi lingual web based tool that allows multiple users and stakeholders of different possibly geo graphically dispersed organizations to perform requirements analysis activities in an agile and collaborative manner and in close cooperation with software archi tects and engineers the tool relies upon the identification and semi formal de scription of use cases e g following cockburn s approach and the resource ori ented extensions proposed by the servus design methodology it supports to define relationships between use cases their representation in uml their step wise refinement and mapping to existing or emerging capabilities of service plat forms as well as the specification of associated test cases the tool is illustrated by its use in the european research project envirofi this project aims at ana lyzing and specifying the generic and specific enablement of the future internet core platform for the environmental information space agility environment information space future internet requirements analysis service oriented analysis and design servus use cases from pixels to bytes evolutionary scenario based design with video change and user involvement are two major challenges in agile software projects as change and user involvement usually arise spontaneously reaction to change validation and communication are thereby expected to happen in a continuous way in the project lifecycle we propose evolutionary scenario based design which employs video in fulfilling this goal and present a new idea that supports video production using secondlife like virtual world technology 2012 acm requirements engineering scenario based design video prototyping virtual world mapping participatory design methods to the cognitive process of creativity to facilitate requirements engineering this chapter describes the user driven creativity framework a framework that links several participatory design pd activities into one combined method this framework designed to be accordant with the mental process model of creativity aims to integrate user involvement and creativity in the early stages of application requirements gathering and concept development this chapter aims to contribute to recent discussions on how user centered or participatory design methods can contribute to information systems development methodologies the authors describe a mobile language learning case study that demonstrates how an application of the framework resulted in system paper prototypes and unveiled perceptions of learners and teachers effectively yielding the necessary in depth user knowledge and involvement to establish a strong foundation for further agile development activities this chapter provides engineers or end user representatives with a hands on guide to elicit user requirements and envision possible future application information architectures 2013 igi global cherishing ambiguity neil maiden professor of systems engineering and head of the centre for hci design at city university london talks about the role of ambiguity in requirements engineering ambiguity can be defined as a specification that makes it possible to interpret a problem feature in at least two different ways the human in the loop makes requirements ambiguity almost inevitable one example of ambiguity in action is in agile development at the start of a project requirements are deliberately underspecified and therefore ambiguous during the project a more precise understanding of requirements emerges from different forms of communication and collaboration between different stakeholders ambiguity can be positively useful if used in a right manner ambiguities ambiguity requirements towards model driven game engineering for serious educational games tailored use cases for game requirements educational games are essential in the next generation of e learning tools because games stress visual and experiential learning they require active involvement by student players while providing almost instantaneous feedback the long term goal of this research project is to define a model driven game engineering approach simsys that supports the rapid development of serious educational games across diverse educational topics here we present our approach for modeling serious educational games using tailored uml use cases visual uml diagram and detailed tabular specifications the tailored approach integrates features of storyboarding techniques well established in the game community with use case modeling well established in the software engineering community the use case model can be transformed into a formal xml representation that can be loaded by the simsys game play engine part of a game on agile software development process is used for illustration 2012 ieee model driven game engineering requirements engineering serious educational games storyboards use cases integrating requirements engineering and user experience design in product life cycle management product development processes and best practices have come a long way in the last decade through continuous evolutions of new lifecycle and process models development models such as the waterfall model spiral model rational unified process agile and many others have looked at efficiency of the development processes these approaches have helped practitioners improve immensely on the efficiency and efficacy of the product development processes however product quality needs to be measured by parameters that go beyond the traditional criteria like performance reliability reusability etc a product that has any interaction with the end user also needs to meet a fundamental requirement of being user friendly development models such as jad joint application development have focused on making products user friendly apart from achieving the technical soundness in a product the success of the product also largely depends on how well the product addresses the primary requirements of the user such as desirability relevance and usability not meeting these requirements leads to bad user experience which in turn can actually lead to failure of the product this paper discusses some of the misconceptions and myths that exist in the industry regarding requirements engineering re and user experience design uxd and how user needs typically slip through the cracks under the name of non functional requirements the paper highlights the need for re and uxd focus during the overall product development life cycle in the concluding section an integrated framework for re and uxd in the plm process is presented 2012 ieee product life cycle management plm requirements engineering re user experience design uxd 4th international conference on human centered software engineering hcse 2016 the proceedings contain 28 papers the special focus in this conference is on human centered software engineering the topics include human factors engineering as the methodological babel fish translating user needs into software design improving software effort estimation using an expert centred approach a compositional model for gesture definition a development process for usable large scale interactive critical systems agile user experience development in a large software organization smartphone applications usability evaluation methods towards api usability a structural analysis of usability problem categories requirements sensemaking using concept maps towards conflict management in user interface composition driven by business needs a model for assessing organizational learning in software development organizations a personality based design approach using subgroup discovery assessing use complexity of software support for the application of creativity techniques in requirements engineering exploring local cultural perspectives in user interface development in an indian offshoring context improving support for visual task modelling lessons learned from evaluating the usability of mobile spreadsheet applications prototask new task model simulator the usage of usability techniques in scrum projects visualizing sensor data and graphical controls based environment for user interface evaluation show and tell play in combining natural language with user interaction for specifying behavior in search of improving the ways to create meaningful systems from requirements specifications this paper combines the showing and telling of how a system should behave using scenario based programming and the language of live sequence charts we suggest how user interaction with the system and user written requirements in natural language can interleave to create specifications through an interface that is both natural and agile 2011 iadis intelligent interfaces live sequence charts requirement engineering scenario based programming towards agile security risk management in re and beyond little attention has been given so far to the process of security risk management at the early stages of system development security has been addressed by isolated security assurance practices some of which consider risks and mitigations but they do not provide an overview of the overall security state of the system being developed this paper takes the position that 1 these isolated security assurance practices should be fully integrated and should be embedded in short iterations of risk assessment treatment and acceptance providing input for updating security requirements and for security risk management and that 2 available empirical data from public catalogs and databases should be used as a source of expertise to leverage past experiences and therefore reduce although not eliminate subjectivity of human judgment borrowing from the agile software development and project management philosophy we introduce the idea of a light weight agile approach to security risk management integrated to the development life cycle 2011 ieee agile software development information security risk management secure engineering security assurance support tool to the validation process of functional requirements the activity of validating identified requirements for an information system helps to improve the quality of a requirements specification document and consequently the success of a project although various different support tools to requirements engineering exist in the market there is still a lack of automated support for validation activity in this context the purpose of this paper is to make up for that deficiency with the use of an automated tool to provide the resources for the execution of an adequate validation activity the contribution of this study is to enable an agile and effective follow up of the scope established for the requirements so as to lead the development to a solution which would satisfy the real necessities of the users as well as to supply project managers with relevant information about the maturity of the analysts involved in requirements specification 2005 ieee requirements engineering requirements validation software quality assurance software requirements specification automated requirements engineering use case patterns driven approach based on a novel multi phases process a new use case patterns catalogue is constructed this catalogue is then utilised as a framework for a new use case patterns driven approach for requirement engineering the application of the proposed approach in a testwarehouse environment showed promising results in saving up to 30 of the total software development project time yet the resulted requirements models showed high 85 95 completeness percentage furthermore the application of an automated version of the proposed approach saved an extra 43 of the time saved by its manual application this had direct implications on improving requirements and design deliverables of agile software development processes nevertheless users raised a number of concerns that have been considered to outline prospective phases of this research 2011 the institution of engineering and technology information requirements analysis for holonic manufacturing systems in a virtual environment the design and development of holonic manufacturing systems requires careful and sometimes risky decision making to ensure that they will successfully satisfy the demands of an ever changing market in this paper the authors propose a methodology for a holonic manufacturing systems requirement analysis that is based on a virtual reality approach and aimed at assisting designers of such systems along the entire systems design and development process exploiting virtual reality helps the user collect valid information quickly and in a correct form by putting the user and the information support elements in direct relation with the operation of the system in a more realistic environment a prototype software system tool is designed to realise the features outlined in each phase of the methodology a virtual manufacturing environment for matching the physical and the information model domains is utilised to delineate the information system requirements of holonic manufacturing systems implementation a set of rules and a knowledge base is appended to the virtual environment to remove any inconsistency that could arise between the material and the information flows during the requirement analysis holonic manufacturing systems information requirements analysis virtual factory virtual reality 2010 3rd international workshop on managing requirements knowledge mark 10 the proceedings contain 8 papers the topics discussed include an ontological framework to manage the relative conflicts between security and usability requirements relating domain model based requirements management and situational method engineering rationale management challenges in requirements engineering concept mapping as a means of requirements tracing a semantic and collaborative platform for agile requirements evolution a hybrid recommender system for finding relevant users in open source forums and using audio and collaboration technologies for distributed requirements elicitation and documentation a semantic and collaborative platform for agile requirements evolution the characteristics of web based and community oriented social software are very useful in the context of software engineering in general and requirements engineering in particular their ease of use transparency of communication user orientation self organization and emergent nature resulting from a continual social feedback are particularly relevant to an agile requirements definition exercise the reason is that agile requirements are inherently meant to be collaboration intensive however while the benefits of social platforms are valuable they are necessary and not sufficient in themselves for making the exercise effective the emerging social software engineering discipline is about enabling community driven creation management and deployment of software by applying methods processes and tools in online environments in this paper we report our work on a semantic and collaborative platform that combines the virtues of social software principles and the semantic web concepts to enable knowledge assisted agile requirements definition 2010 ieee collaborative and semantic requirements definition semantic assistance social software engineering transition to agile development rediscovery of important requirements engineering practices many organizations have started to use agile development processes to speed up the development cycle and to improve the ability of the company in reacting to changing requirements adopting agile practices may happen as a revolution where all old practices are removed or as a more gradual process in this paper we discuss lessons learnt in two agile transition processes based on our experience agile processes can be used in embedded software development for products the challenges include the varying size of user requirements the role of system requirements and architecturally significant requirements it is difficult for large organizations to be agile work allocation for a large number of different teams with different competencies tends to decrease speed and increase the role of design and management we conclude that agile development in this context needs very skilled developers and has to be a combination of new and old practices 2010 ieee best practices requirements engineering a usability pattern based requirements analysis method to bridge the gap between user tasks and application features in software development it is important to mediate various concerns coming from user experience ux designers and application developers in agile user centered design agile ucd there is a special role called specialist who is dedicated to implement application features as well as to monitor user experiences however the specialist normally has difficulty in linking user tasks to be accessed via a user interface ui into application feature entities in addition the specialist may also have some unsettled usability risks that might result in the failure of meeting certain usability criteria and passing acceptance tests to alleviate these difficulties of the specialists in agile ucd we propose a usability pattern based requirement analysis method this method uses standardized and common representations of requirements specification to bridge the gap between user tasks and related application features of a ui it also provides a guideline to allow the specialist to reduce usability risks in an early stage by reflecting usability factors of ui design patterns to an application design a case study has been conducted to show how users can effectively specify user tasks and application features on ui workflows it also shows how easy and practical it is to understand the common representations as well as to apply to usability patterns 2010 ieee agile user centered design application feature requirements analysis method specialist usability pattern user task interaction pattern categories pragmatic engineering of knowledge based systems the application of knowledge based consultation and documentation systems is apart from large industrial projects often also beneficial for small to mid sized enterprises yet their design and implementation still is a tedious and costly task we motivate that customized ui and interaction patterns constitute a pragmatic technique for supporting especially requirements engineering and thus are capable of considerably promoting real world projects in this paper we introduce abstract categories guided adaptive and autonomous entry for classifying tailored patterns for knowledge based systems further we discuss their role in an overall approach extending the agile process model and resulting benefits agile development dialog system user interface design from formal requirements to automated web testing and prototyping use cases and user interface prototypes are agile techniques used to specify required functionalities of an object oriented system testing can find most errors of the software and ensure that the requirement specifications are satisfied by the application we can derive test cases from use cases and run them in user interfaces but we do it in a mechanical way in this paper we propose a new approach for automating the generation of user interface prototypes and test cases for web applications starting from a formalization of the requirements based on controlled use cases extended with the system glossary and the user interface specifications we automatically generate web pages and test cases which are passed as parameters for an automated web testing tool springer verlag london limited 2010 automation requirements engineering software prototyping software testing little design up front a design science approach to integrating usability into agile requirements engineering in recent years design science has gained wide recognition and acceptance as a formal research method in many disciplines including information systems design science research in human computer interaction is not so abundant hci is a discipline primarily focusing on design evaluation and implementation where design plays the role as a process as well as an artefact in this paper we present a design science approach using little design up front to integrate the user centred design perspective into agile requirements engineering we also present the results of two agile projects to validate the proposition that incorporating ucd perspective into agile software development improves the design quality of software systems 2009 springer berlin heidelberg agile requirements engineering design science usability efficient building of interactive applications guided by requirements models the analysis of functional and non functional requirements of an interactive application not only encompasses the descriptive aspects of its functionality and the user and system restrictions it must also satisfy user needs such as usability along with system needs such as reliability intermod is an interactive application design methodology with agile characteristics which proposes the use of incremental models to define requirements configure presentation and develop functionality this poster is focused on the requirements of the intermod methodology for the efficient construction of interactive applications these models include user system task and dialog models an example created with a tool that follows these principles and illustrates our approach to the dialog model is presented 2009 springer berlin heidelberg dialog model methodology requirements analysis system model task model user model query based requirements engineering for health care information systems examples and prospects designing healthcare information systems is a challenge to software engineering theory and practice many requirements engineering re methods demand user participation clear functional objectives and a well defined context of use these demands are hard to meet in the healthcare domain which is characterized by high diversity complexity and little time and money to spend there are many examples of healthcare software systems that have failed due to lacking investment in the early phases of design and requirements analysis we have developed methods for gathering detailed observational data about care and communication practice in this article we explain how this data can be used for iterative demanddriven requirements elicitation and to answer design questions the examples are taken from structured observation of actors situations information usage and activities at two norwegian hospitals we regard this approach as a useful supplement to other re methods in particular for agile development methods 2009 ieee requirements analysis as a guide for the process of organising and developing an interactive application 2009 iadis developing interactive applications according to quality criteria can be done within the environment of a methodology centred on the user and by means of the agile but ordered realisation of its components the analysis of functional and non functional requirements does not only encompass the descriptive aspects of functionality it must also satisfy user needs such as usability as understood in terms of efficiency effectiveness and satisfaction of use at the same time the analysis should cover other important conditioning factors such as system reliability and security this article is based on the intermod methodology whose objective is to facilitate the design of quality interactive applications intermod proposes using user centred models which allow to define the application requirements and to describe the human computer dialogue both of them are embedded in an early prototype evaluation process the requirements models the presentation model and the software model are involved in this process several tools guide the process described in intermod and here we focus on diagram diagram gathers the requirements models automatically creates a user friendly prototype and brings the developers and users into the process design in a continuous evaluate phase all the models are saved in xml allowing communication among them some examples made with that tool illustrate our approach dialogue model methodology requirements analysis system model task model user model proceedings of the 13th international workshop on exploring modeling methods for systems analysis and design emmsad 2008 held in conjunction with the caise 2008 conference the proceedings contain 14 papers the topics discussed include towards systematic usage of labels and icons in business process models the power context of method in action a case study a formal comparison of conceptual data modeling languages atomicity and normalization a modeling methodology for empirically studying user behavior the case of uml diagram usage modeling architectural design rules in uml from method fragments to method services method engineering as game design an emerging hci perspective on methods and case tools using eeml for combined goal and process oriented modeling evaluation through a case study guiding system modelers in multi view environments a domain engineering approach metamodeling variability to enable requirements reuse meta meta model extensions for manageability of large scale collaborative modeling what is an aspect in aspect oriented requirements engineering and integrating agile modeling with participative enterprise modeling towards an agile infrastructure to provision devices applications and networks a service oriented approach most industries and organizations use collections of tools devices and applications that are growing in complexity new tools or applications may be acquired and old tools may become obsolete over time they are often running on a variety of platforms have different bandwidth and qos requirements and in most cases they cannot be accessed through a single point of entry moreover some tools may require specific configurations done by technical experts to address these issues we propose an extensible reliable and simple software architecture that can hide the complexity of provisioning the network and running the tools this paper introduces a service oriented approach for creating an agile infrastructure to provision devices applications and their underlying networks the eucalyptus prototype is developed as an empirical application to test this approach eucalyptus is built on a set of generic fine grained web services to manage and configure available resources where new resources can be custom built or imported from a third party they can be integrated into eucalyptus using a set of web service enabled apis our user community consists of architects and industrial designers eucalyptus can manage and configure the resources needed by geographically distributed groups of architects who need to collaborate in real time on the design of buildings in a virtual participatory design studio pds eucalyptus provides a single point of entry for the architects to access a wide variety of tools videoconference applications visualization services rendering services employing parallel computers etc eucalyptus provides a set of upper layer services for users to provision devices and applications running on high speed broadband networks as well as the commercial ip networks 2007 ieee human computer interaction interaction design and usability 12th international conference hci international 2007 proceedings the proceedings contain 132 papers the topics discussed include design principles based on cognitive aging redesigning the rationale for design rationale towards generic interaction styles for product design incorporating user centered requirement engineering into agile software development a scenario based design method with photo diaries and photo essays alignment of product portfolio definition and user centered design activities a new user centered design process for creating new value and future a meta cognition modeling of engineering product designer in the process of product design emotional experiences and quality perceptions of interactive products aspects of integrating user centered design into software engineering processes activity theoretical analysis and design model for web based experimentation participatory design using scenarios in different cultures and holistic interaction between the computer and the active human being incorporating user centered requirement engineering into agile software development agile software engineering approaches gain more and more popularity in today s development organizations the need for usable products is also a growing factor for organizations thus their development processes have to react on mis demand and have to offer approaches to integrate the factor usability in their development processes the approach presented in this paper evaluates how agile software engineering models consider activities of usability engineering to ensure the creation of usable software products the user centeredness of the two agile se models scrum and xp has been analyzed and the question of how potential gaps can be filled without loosing the process agility is discussed as requirements play a decisive role during software development in software engineering as well as usability engineering therefore different user centered requirements that ensure the development of usable systems served as basis for the gap analysis springer verlag berlin heidelberg 2007 agile software engineering usability engineering user centered requirements proceedings of the iasted international conference on software engineering se 2007 the proceedings contain 62 papers the topics discussed include designing an automated staff and organization performance appraisal nextmove a distributed project management tool a development methodology for moderately open multi agent systems towards engineering web services improving agile software development by the application of method engineering practices towards an agile process pattern modeling framework requirements change management process models an evaluation a revision based logical framework for evolvable software the role of domain knowledge representation in requirements elicitation improving requirements engineering from the client s perspective in the health care domain on synchronization with direct delaying and resuming a survey of context aware middleware java debugging laboratory for automatic generation and analysis of trace data and a practical approach to task dialog and abstract presentation modeling of graphical user interfaces requirements specification what strategy under what conditions there are several strategies philosophies of is development structured data oriented object oriented serviceoriented and agile programming their application was to a high degree implied by technological conditions the strategies have been determining the information systems architecture and the tools and methods of requirement specification due the success of new strategies the older ones are improperly considered to be obsolete there are discussed the conditions under which the application of a particular strategy is not only feasible but optimal and when and how different strategies are to be combined all the strategies except the service oriented one are suited to the development of application more or less from scratch the application has a programmed number of threads the current largest information systems like the systems supporting e government or global enterprises must have serviceoriented architecture of a specific form software confederations confederation oriented strategy is different from the other strategies but it can should be combined with them the main differences are in the use of legacy systems and software standards 2007 ieee agility in soa batch systems data stores in soa data driven systems requirements specification in soa software confederations user oriented service interfaces identifying application key knowledge through system operations modeling one of the problems associated with complex systems engineering is identifying the system knowledge relevant to build system implementation system operations are an essential part of this knowledge software and system engineering standards highlight the importance of system operations templates for a concept of operations document are available from different standard bodies in the context of requirements engineering and specification however specific guidelines for operations modeling are not usually provided this paper introduces an approach to systematically model system operations the cornerstone for this is an operations metamodel this metamodel is presented within this paper and has been defined using uml 2 x the baseline for the metamodel is a schema also introduced within the paper which formalizes system operations in terms of commands acting on systems inputs to the system and different kinds of outputs classified into responses notifications and alarms operations models as presented here comprise system knowledge essentials from a functional point of view but reduced in size compared to the whole system specification they can be deployed in several ways this paper presents their use as drivers for system development and validation from early lifecycle stages 2007 ieee agile methodologies complex systems concept of operations conops engineering of computer based systems systems software operations modeling systems software systems engineering user system interaction modeling deriving static and dynamic concepts from software requirements using sophisticated tagging natural language requirements specifications form the basis for the subsequent phase of the information system development process namely the development of conceptual schemata both the textual as well as the conceptual representations are not really appropriate for being thoroughly captured and validated by the requirement holders i e the end users therefore in our approach the textual specifications are firstly linguistically analyzed and translated into a so called conceptual predesign schema that schema is formulated using an interlingua which is based on a lean semantic model thus allowing users to participate more efficiently in the design and validation process after validation the predesign schema is mapped to a conceptual representation e g uml the sequence of these translation and transformation steps is described by the niba workflow this paper focuses on the information supporting a step by step mapping of natural language requirements specifications to a conceptual model and on how that information is gained on particular we present a four level interpretation of tagging output 2006 elsevier b v all rights reserved conceptual modeling natural language processing requirements engineering shallow parsing tagging beap an end user agile programming paradigm for business applications business applications are subject to changes with technology trends or market demands however quick response to these changes is still a challenging issue most of the existing architectures e g corba web services still expose the developers to excessive low level details and force a tight coupling between program modules for end users developing customizing and reengineering applications remain difficult and time consuming tasks a high level programming model is presented together with a descriptive programming paradigm called beap to facilitate end user programming in this approach applications could be visually composed from well defined software components called funnels in an event driven fashion application examples have shown that by raising the level of abstraction as well as simplifying the programming model beap could empower end users to build business applications on demand with improved productivity springer science business media inc 2006 agile component event based pi calculus virtualization visual programming proceedings icse05 27th international conference on software engineering the proceedings contain 133 papers the topics discussed include transitions in programming models agile open source distributed and on time inside the eclipse development process addressing software dependability with statistical and machine learning techniques system challenges for ubiquitous pervasive computing research challenges of autonomic computing clinical requirements engineering silver bullet or fool s gold supporting usability in open source software development how software can help or hinder human decision making and vice versa moving from a plan driven culture to agile development testing database transactions with agenda helping users avoid bugs in gui applications using structural context to recommend source code examples automatic generation and maintenance of correct spreadsheets a framework of greedy methods for constructing interaction test suites demand driven structural testing with dynamic instrumentation and an adaptive object model with dynamic role binding agile software development human values and culture people involved in the development of agile methods seem to agree that agile methods emphasize close collaboration between the users and the developers of a project and relatively quick development cycles that can react to changing requirements two classical techniques offer insights into the arguments surrounding agile methods the two techniques referred to as utilitarian and deontological analyses as well as other applied ethics techniques offer software engineers a more precise language for articulating their ideas about software engineering issues that involve human values that improved language is expected to lead to more productive discussions about the strengths and weaknesses of development methods ifip tc 5 wg 5 5 6th ifip international conference on information technology for balanced automation systems in manufacturing and services basys 2004 the proceedings contain 56 papers the special focus in this conference is on information technology for balanced automation systems in manufacturing and services the topics include implementation issues with holonic control device communication interfaces holonic manufacturing control contingencies based reconfiguration of holonic control devices agent based simulation agent based architecture for information handling in automation systems an intelligent agent validation architecture for distributed manufacturing organizations multi agent based framework for large scale visual program reuse integrating multi agent systems alarm root cause detection system a methodology for shop floor reengineering based on multiagents agent based distributed collaborative monitoring and maintenance in manufacturing mobile access to process knowledge reliable communications for mobile agents the telecare solution an empirical research in intelligent manufacturing preference based scheduling for an hms environment optimization algorithm for dynamic multi agent job routing agent system application in high volume production management multi agent based robust scheduling for agile manufacturing fusion based intelligent support for logistics management a web services agent based model for inter enterprise collaboration analysis of requirements for collaborative scientific experimentation environments a knowledge management based framework as a way for sme networks integration collaborative e engineering environments to support integrated product development applying a benchmarking methodology to empower a virtual organisation a contribution to understand collaboration benefits predictive performance measurement in virtual organisations multi layers supply chain modeling based on multi agents approach a formal theory of bm virtual enterprises structures a distributed knowledge base for manufacturing scheduling sme service networks for cooperative operation of robot installations information infrastructures and sustainability knowledge based requirements engineering for reconfigurable precision assembly systems definitions limitations and approaches of evolvable assembly system platforms benefits of modularity and module level tests automated system for leather inspection modelling and simulation of human centred assembly systems a real case study decision support when configuring automatic systems a maintenance policy selection tool for industrial machine parts using data mining for virtual enterprise management an application of machine learning for internet users evaluating a software costing method based on software features and case based reasoning reduction techniques for instance based text categorization one class learning for human robot interaction cepstral analysis in tool monitoring and intelligent diagnosis and learning in centrifugal pumps generalized release planning for product line architectures this paper elaborates on the coordination and management of evolving software product lines where development teams work around a shared and reusable domain infrastructure the trend away from monolithic applications and towards component based product line architectures has enabled the development of complex software to be undertaken by autonomous and often geographically separated teams delivering a complete product or product line requires significant coordination to bring the separate development streams together at agreed upon points in the schedule for integration and test in such complex development scenarios a release matrix has been proposed as a generalization of release planning and tracking addressing multiple products components and their interdependencies at an enterprise or marketplace level here we describe the results of the practical trials of the release matrix that provide pragmatic guidelines for its use and indicate areas for future research relationships to established processes including requirements engineering and configuration management are clarified and the methodology neutral technique is shown to complement work in areas including agile methods and component contracts springer verlag 2004 imaginate a case is given on how one programmer completed agile development by sitting down with the user and creating the software in real time focus is on the lessons learned throughout the process which are as follows users like results and care less about the technology they like to be involved reuse is great but use is better and tools should support rapid development with feedback not rup not xp multiple letters to be or not to be explicit multiple letters going faster testing the web application an overview is given on test first design and the creation of testable code for web applications it is explained how testing has been critical to building evant s application at speed while maintaining a high degree of quality usage centered engineering for web applications a flexible model driven approach for engineering web applications that succeeds through a focus on user interface design and usability is presented its simple model driven techniques work well for novel applications and integrate readily with lightweight or agile development processes under compressed development schedules zero tolerance construction software construction is addressed focusing on the issue that major catastrophic losses can be prevented by focusing on preventing the triggering mechanism from occurring the no broken windows concept is introduced as a solution to this problem get ready for agile methods with care traditionalists advocate using extensive planning codified processes and rigorous reuse to make development an efficient and predictable activity that gradually matures toward perfection although many of their advocates consider the agile and plan driven software development methods polar opposites synthesizing the two can provide developers with a comprehensive spectrum of tools and options proceedings of the 1998 20th international conference on software engineering the proceedings contains 64 papers from the 20th international conference on software engineering topics discussed include agile software processes software process modeling software process improvement activities virtual reality systems object request broker goal driven requirements engineering conceptual module querying reuse driven interprocedural slicing three dimensional software modeling the internet architecture based runtime software evolution regression test selection techniques form based visual programs integrating architecture description languages automated validation systems object oriented software distributed systems non intrusive object introspection and object oriented reuse