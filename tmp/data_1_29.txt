forging high quality user stories towards a discipline for agile requirements 2015 ieee user stories are a widely used notation for formulating requirements in agile development projects despite their popularity in industry little to no academic work is available on assessing their quality the few existing approaches are too generic or employ highly qualitative metrics we propose the quality user story framework consisting of 14 quality criteria that user story writers should strive to conform to additionally we introduce the conceptual model of a user story which we rely on to design the aqusa software tool aqusa aids requirements engineers in turning raw user stories into higher quality ones by exposing defects and deviations from good practice in user stories we evaluate our work by applying the framework and a prototype implementation to three user story sets from industry aqusa nlp qus framework requirements engineering requirements quality user stories a mapping study on requirements engineering in agile software development 2015 ieee agile software development asd methods have gained popularity in the industry and been the subject of an increasing amount of academic research although requirements engineering re in asd has been studied the overall understanding of re in asd as a phenomenon is still weak we conducted a mapping study of re in asd to review the scientific literature 28 articles on the topic were identified and analyzed the results indicate that the definition of agile re is vague the proposed benefits from agile re included lower process overheads a better requirements understanding a reduced tendency to over allocate development resources responsiveness to change rapid delivery of value and improved customer relationships the problematic areas of agile re were the use of customer representatives the user story requirements format the prioritization of requirements growing technical debt tacit requirements knowledge and imprecise effort estimation we also report proposed solutions to the identified problems agile development mapping study requirements engineering scrum a systematic literature review on agile requirements engineering practices and challenges 2014 elsevier ltd all rights reserved unlike traditional software development methods agile methods are marked by extensive collaboration i e face to face communication although claimed to be beneficial the software development community as a whole is still unfamiliar with the role of the requirements engineering practices in agile methods the term agile requirements engineering is used to define the agile way of planning executing and reasoning about requirements engineering activities moreover not much is known about the challenges posed by collaboration oriented agile way of dealing with requirements engineering activities our goal is to map the evidence available about requirements engineering practices adopted and challenges faced by agile teams in order to understand how traditional requirements engineering issues are resolved using agile requirements engineering we conducted a systematic review of literature published between 2002 and june 2013 and identified 21 papers that discuss agile requirements engineering we formulated and applied specific inclusion and exclusion criteria in two distinct rounds to determine the most relevant studies for our research goal the review identified 17 practices of agile requirements engineering five challenges traceable to traditional requirements engineering that were overcome by agile requirements engineering and eight challenges posed by the practice of agile requirements engineering however our findings suggest that agile requirements engineering as a research context needs additional attention and more empirical results are required to better understand the impact of agile requirements engineering practices e g dealing with non functional requirements and self organising teams agile requirements engineering agile software development methods collaboration systematic review traditional requirements engineering a framework to study requirements driven collaboration among agile teams findings from two case studies 2014 elsevier ltd all rights reserved stakeholders collaboration is required to develop requirements in agile software development requirements engineering and agile methods share common grounds as they both focus on stakeholder collaboration the key issue is finding a way to study collaboration driven by requirements in geographically distributed agile teams in this paper we aim to propose a framework to study collaboration driven by requirements among agile teams and determine the impact of their collaboration patterns on the iteration performance we define collaboration in terms of communication as information exchange among members and awareness knowledge of others two case studies were conducted to examine communication and awareness network patterns among distributed agile teams data were collected through questionnaires semi structured interviews and onsite observation the findings revealed that the framework aids in determining the core members collaboration trends clustering tendency communication and awareness reciprocity of the teams small worldliness and centralisation behaviour of the networks and iteration performance of the agile teams the framework has implications for the industrial practitioners i e managers to learn about their team s collaboration in order to take measures for performance improvement at the same time the researchers can use this framework to study other social aspects in variable settings to produce more empirical results agile methods collaboration communication and awareness distributed agile teams requirements driven collaboration acm international conference proceeding series the proceedings contain 53 papers the topics discussed include cloud network architecture design patterns a pattern for wsdl based testing of web service compositions consumer behavior change pattern for energy efficiency growth mindset development pattern five patterns for designing pattern mining workshops guiding the selection of security patterns based on security requirements and pattern classification patterns to build the magic backlog michael weiss the business of open source missing patterns design of knowledge management info structures interaction design patterns for accessible video learning technologies patterns for integrating agile development processes and user centred design rendering patterns for modern web enterprise applications pattern catalog for multicore migration of embedded automotive systems model transformation and synchronization process patterns weaving in patterns into it infrastructure models industry case and approaches test patterns for android mobile applications applying performance patterns for requirements engineering and awareness seeds for more diversity in computer science education using personas to support the goals in user stories 2015 ieee this paper proposes a conceptual framework motivated by personas and composed of certain interrelated artifacts to provide a better support for the goals included in the contents of structured user story statements agile methodology artifact ethnography quality software requirements engineering traceability specifying guidelines to transform i∗ model into user stories an overview copyright 2015 for this paper by its authors requirements engineering is a process of obtaining and detailing the goals of systems to be therefore different approaches can improve the requirements elicitation phase such as diagrams and documentations scenarios based on gore approach such as i∗ framework model the early phase of requirements stage the framework however can become a large and unreadable diagram on the other hand user stories are clear concise and can represent the late phase of requirements therefore this paper presents an overview of a proposal to transform i∗ models into user stories as a way to facilitate the management of requirements in the agile projects agile projects goal oriented requirements engineering i∗ framework scenario transformation user stories requirements engineering in agile projects a systematic mapping based in evidences of industry copyright 2015 by the authors interest in the adoption of agile methodologies has grown in recent years as a strategy to minimize problems in software development however recent studies indicate high rates of failure also in projects that use agile processes in this context this research conducted an exploratory study to investigate how requirements engineering is used in projects that adopt agile methodologies for this a systematic mapping was performed and it identified the engineering requirements techniques that are running in the industry the problems and limitations in projects that adopt agile methodologies the low involvement of users and the constant changes of requirements were identified as the main challenges to be overcome agile methodologies requirements systematic mapping effective hybrid tool for global software development research india publications requirements engineering is as its name suggests the engineering discipline of establishing user requirements and specifying software systems there are many definitions of requirements engineering however they all share the idea that requirements involves finding out what people want from a computer system and understanding what their needs mean in terms of design requirements engineering is closely related to software engineering which focuses more on the process of designing the system that users want perhaps the most concise summary comes from barry boehm requirements are designing the right thing as opposed to software engineering s designing the thing right boehm 1981 requirement engineering is the important phase in the software development here we gather all requirements of the software which is proposed for development an agile methodology produces high quality software and takes less time in comparison to traditional methods agile was discovered for managing the development process in the environment where requirement could be changed during development process requirement engineering is the important phase in the agile development methodology in this paper we are providing a hybrid approach for requirement engineering in the agile with the help of jad and the prioritization of the requirements in the agile is helped by the viewpoint agile methodology jad requirement engineering viewpoint 21st international working conference on requirements engineering foundation for software quality refsq 2015 the proceedings contain 23 papers the special focus in this conference is on requirements engineering foundation for software quality the topics include experimental validation of a risk assessment method supporting the validation of adequacy in requirements based hazard mitigations metrics for the evaluation of feature models in an industrial context modeling and reasoning about information quality requirements detecting and correcting outdated requirements in function centered engineering of embedded systems estimating the implementation risk of requirements in agile software development projects with traceability metrics the role of catalogues of threats and security controls in security risk assessment an empirical study with atm professionals analyzing and enforcing security mechanisms on requirements specifications how artifacts support and impede requirements communication consonance between economic and it services finding the balance between conflicting requirements from stakeholder requirements to formal specifications through refinement towards more efficient requirements formalization the emerging requirement for digital addiction labels challenges of the customer organization s requirements engineering process in the outsourced environment a case study a case study evaluation of the guideline supported quper model for elicitation of quality requirements towards crowd based requirements engineering a research preview functional requirements modelling for interactive tv applications a magnet based approach for visualizing requirements artifacts requirements engineering in the bidding stage of software projects a research preview supporting requirements feedback flows in iterative system development and user constrained clustering in online requirements forums the nerv methodology a lightweight process for addressing non functional requirements in agile software development 2015 ieee agile software development has become very popular around the world in recent years with methods such as scrum and extreme programming xp literature suggests that functionality is the primary focus in agile processes while non functional requirements nfrs are either ignored or ill defined however for software to be of good quality both functional requirements frs and nfrs need to be taken into consideration lack of attention to nfrs has been documented to be the cause of failure for many software projects hence special attention needs to be focused on nfrs in agile software development requirements elicitation implementation in design development and validation are important activities of software development agile has good processes to elicit functional requirements that are captured as user stories however nfrs elicitation has not been given enough attention within agile processes additionally reasoning and validating of nfrs have been lacking this research proposes the nerv methodology nonfunctional requirements elicitation reasoning and validation in agile processes current results show the artifacts developed in this research can potentially help software development organizations address nfrs in early agile processes agile software development agile user stories functional requirements nerv methodology nfr nfr elicitation taxonomy nfr quantification taxonomy nfr reasoning taxonomy nfruscom non functional requirements scrum what do practitioners vary in using scrum springer international publishing switzerland 2015 background agile software development has become a popular way of developing software scrum is the most frequently used agile framework but it is often reported to be adapted in practice objective thus we aim to understand how scrum is adapted in different contexts and what are the reasons for these changes method using a structured interview guideline we interviewed ten german companies about their concrete usage of scrum and analysed the results qualitatively results all companies vary scrum in some way the least variations are in the sprint length events team size and requirements engineering many users varied the roles effort estimations and quality assurance conclusions many variations constitute a substantial deviation from scrum as initially proposed for some of these variations there are good reasons sometimes however the variations are a result of a previous non agile hierarchical organisation agile processes industrial case study scrum variations us2startool generating i∗ models from user stories copyright 2015 for this paper by its authors in agile methods the requirements are represented by user stories however this model does not allow a good visualization of context in which a story is inserted reducing the understanding of the system as a whole on the other hand the i∗ model presents dependencies among organizational actors and the understanding of the context in which a requirement is inserted this paper presents an implementation of an automated solution as a tool to mapping user stories into i∗ models us2startool adding a support for agile development environment us2startool can help requirements engineer in agile development environments contextualizing the environment in which user stories are inserted and showing relationships between the actors and the system i∗ model meta model model mapping user story an impact study of business process models for requirements elicitation in xp springer international publishing switzerland 2015 many communication problems may appear during requirements elicitation causing that final products do not accomplish client expectations this paper analyzes the impact of using business processes management notation bpmn instead of user stories during requirements analysis in agile methodologies for analyzing the effectiveness of our approach we compare the use of user stories vs bp models in eleven software projects during requirements elicitation phase experiments evidence that bpmn models improve quality and quantity of information collected during requirements elicitation and ease that clients specify clearly their needs and business goals bpmn business process management notation requirements elicitation software user stories xp extreme programming a comparative study of software tools for user story management 2014 elsevier b v all rights reserved context user stories have become widely accepted in agile software development consequently a great number of software tools that provide inter alia support for practices based on user stories have emerged in recent years these tools may have different features and focus in terms of support for agile requirements engineering re concepts and practices objective the present study aims to provide a deep insight into the current capabilities and future trends of software support for agile re practices based on user stories method a comparative qualitative study of a set of agile software tools has been conducted according to the following criteria coverage of the key functional requirements support for basic agile re concepts and practices and user satisfaction with the tool the criteria for tool selection were diversity of software tools high rating on the user stories community web site http www userstories com and availability for review results the results show a generally good coverage of key functional requirements related to management of user stories and epics high level release planning and low level iteration planning on the other hand user role modeling and persona support have not been addressed at all and it has been found that requirements for acceptance testing support were completely covered by only one tool more importantly the study has revealed significant differences in the way different tools support agile re concepts and practices if at all finally qualitative analysis of user reviews has demonstrated that practitioners prefer tools that are easy to set up easy to learn easy to use and easy to customize over more sophisticated but simultaneously more demanding tools conclusion although the progress that has been made since the inception of these tools is quite clear there is still room for improvements in terms of support for various agile re practices within a specific agile process agile practices requirements engineering software support user story management integrating user stories and i∗ models a systematic approach copyright 2015 scitepress science and technology publications user stories are a common way to describe requirements in agile methods however the use of user stories is restricted since they offer only a limited view of the whole system in contrast one of the features of the i∗ framework is provides a visual representation of the actors involved in a system and the goals that are to be met this allows for a better understanding of the problem as well as for a better overview and evaluation of alternative solutions in addition i∗ models consider the early phases of requirements engineering while user stories cover the later phases in this context this paper presents an approach to map user stories to i∗ models and vice versa aiming at providing a bigger picture of the system as a whole a case study to evaluate this work is also presented suggesting the viability of the approach agile requirements i∗ models user stories weekly round trips from norms to requirements and tests an industrial experience report 2015 ieee seac is a major software provider in italy in the area of business management with a focus on norms and human resources seac is re engineering their huge legacy system to c sql server to minimise the risks associated with such reengineering project seac has adopted an incremental and agile process model which produces small and frequent releases of new incremental modules that replace a portion of the legacy system at a time since the seac software handles business activities that are highly dependent on norms such as the contracts of employees the taxation of incomes and salaries the pension contributions one of the key challenges is to support a smooth transformation of norms into requirements into code and eventually into test cases used to verify that norms have been implemented as prescribed by the law the se research unit at fbk has been involved to introduce a set of practices aimed at supporting such transformation so as to improve the current process we report the experience made during the project in this paper agile process industrial experience requirements and testing in practice evaluation of behaviormap a user centered behavior language 2015 ieee in the software development process one of the recurring problems is to ensure that the expectations of stakeholders are being met these expectations must match the system s behavior and be present in the requirements specifications and models the requirements engineering discipline studies how to capture specify validate and manage requirements however recent empirical studies show that stakeholders do not usually understand traditional requirements models this paper focuses on the cognitive evaluation of a user centered language called behaviormap that aims to specify behavioral user scenarios in a cognitive way based on mind map modelling this paper describes an experimental evaluation to verify the understandability of the behaviormap scenarios compared to the textual ones the experiment gathered data from 15 individuals naïve users with different backgrounds that had to analyze 8 scenarios being 4 graphical and 4 textual to assess the participants cognitive effort it was used questionnaires also the time effort to perform the tasks was measured this experiment showed promising results for the behaviormap scenarios agile requirements behavior driven design cognitive effort mind map modelling user centred requirements 8th ifip wg 8 1 working conference on practice of enterprise modeling poem 2015 the proceedings contain 33 papers the special focus in this conference is on evolving enterprises and securing enterprises the topics include towards guiding the use of enterprise modeling in the context of business and it alignment towards a generic goal model to support continuous improvement in sme construction companies a risk based approach supporting enterprise architecture evolution pattern based security requirements derivation from secure tropos models analyzing attack strategies through anti goal refinement eliciting security requirements for business processes of legacy systems testing a selection of bpmn tools for their support of modelling guidelines consistently formalizing a business process and its properties for verification dealing with risks and workarounds case based development of consumer preferences using brand personality and values co creation modelling users feedback in crowd based requirements engineering factors influencing productization of enterprise modeling methods in designing and developing capabilities benefits of enterprise architecture management using value models for business risk analysis in e service networks analyzing trust requirements in socio technical systems an experience report of improving business process compliance using security risk oriented patterns towards an oss adoption business impact assessment the concepts of decision making modeling devops deployment choices using process architecture design dimensions simplicity is not simple agile modelling method engineering and towards dw support for formulating policies non functional requirements for distributable user interfaces in agile processes copyright 2014 acm this paper presents a two folded approach to deal with non functional requirements for distributable user interfaces deuis in agile processes this proposal employs a conceptual agile framework that ensures earlier consideration of nonfunctional requirements and stakeholders involvement to solve tensions among agility requirements engineering practices and continuous system architecture adaptation besides it improves the step of continuous architecture adaptation as established in the deui field by employing model driven architectures thus while this approach profits from the conceptual framework by means of continuous feedback on how to technically better support the classical tension between agility and requirement engineering it also takes advantage of modeldriven architecture to cope with the tension between agility and distributable user interface architecture changes affine agile methodologies distributable user interfaces model driven development scrum use of method for elicitation documentation and validation of software user requirements medov in agile software development projects 2014 ieee agile and lean software development methodologies appear as a popular alternative to plan driven methodologies but these methodologies have no structure in the process of user requirements specification this paper shows how method for elicitation documentation and validation of software user requirements medov supports agile and lean software development methodologies the medov helps stakeholders in their everyday work with minimal impact on agility the method also ensures an active role of business users a wide picture what usually is the problem for agile development and definition of non functional requirements what the even bigger problem is the medov ensures that no unnecessary features are produced so that no extra code is created and maintenance is easier as well as code correction and improvement using models enables agility in product maintenance especially for integrated systems where one change can have multiple impacts on different parts of system agile methodologies business process management event driven process chain epc method lean software development requirements engineering uml diagrams user centered design in agile re through an on site user experience consultant 2014 ieee this paper is about experiences with user centered design ucd and agile requirements engineering re in fixed price projects efficiently incorporating usability and ucd into re remains a challenge in this paper we describe our experience with the introduction of a team role called on site user experience consultant which supports integrating ucd activities tightly in agile re we name ucd activities and how they fit in our industrial projects also we describe how old habits in communication and interaction have to change to establish ucd within the project team and with the clients agile requirements engineering a research perspective agile methodologies have impact not only on coding but also on requirements engineering activities in the paper agile requirements engineering is examined from the research point of view it is claimed that use cases are a better tool for requirements description than user stories as they allow zooming through abstraction levels can be reused for user manual generation and when used properly can provide quite good effort estimates moreover as it follows from recent research parts of use cases namely event descriptions can be generated in an automatic way also the approach to non functional requirements can be different our experience shows that they can be elicited very fast and can be quite stable 2014 springer international publishing switzerland agility effort estimation non functional requirements requirements engineering use cases user manual 2014 ieee 2nd international workshop on usability and accessibility focused requirements engineering usare 2014 proceedings the proceedings contain 8 papers the topics discussed include user oriented requirements engineering user centered design in agile re through an on site user experience consultant accessibility requirements for blind and visually impaired in a regional context an exploratory study design science research based blended approach for usability driven requirements gathering and application development analysis of trends in the occurrence of eyeblinks for an eyeblink input interface designing for usability in 3d virtual environments health in hand putting mhealth design in context and building up a virtual community for home based chronic diseases healthcare 2014 ieee 4th international workshop on empirical requirements engineering empire 2014 proceedings the proceedings contain 12 papers the topics discussed include a review of practice and problems in requirements engineering in small and medium software enterprises in thailand systematic reviews in requirements engineering a tertiary study how smartphone users assess the value risk trade off of apps an observational study security triage a report of a lean security requirements methodology for cost effective security analysis an experiment on comparing textual vs visual industrial methods for security risk assessment security requirement elicitation techniques the comparison of misuse cases and issue based information systems an experiment design for validating a test case generation strategy from requirements models and a framework for understanding collaborative creativity in requirements engineering empirical validation decisively application of quantitative analysis and decision science in agile requirements engineering 2014 ieee while many mature requirements engineering re tools for agile exist re professionals at large have not been able to benefit from quantitative analysis and decision science quads techniques in this context in this paper we present an agile re tool decisively which brings a new perspective to automation in the re process through application of quads to address requirement discovery analysis estimation and prioritization techniques explored in decisively include analytical hierarchical process ahp for prioritization and estimation lorenz function to shortlist user stories by analyzing the distribution of votes box plot analysis to predict velocity and text mining to discover implied requirements from documents agile ahp box plot quantitative analysis amp decision science requirements prioritization span story points estimation text mining velocity prediction 2014 ieee 1st international workshop on evolving security and privacy requirements engineering espre 2014 proceedings the proceedings contain 8 papers the topics discussed include semiautomatic security requirements engineering and evolution using decision documentation heuristics and user monitoring argumentation based security requirements elicitation the next round towards a framework to measure security expertise in requirements analysis engineering privacy requirements valuable lessons from another realm supporting evolving security models for an agile security evaluation using malware analysis to improve security requirements on future systems and pattern based and iso 27001 compliant risk analysis for cloud systems and l square preliminary extension of the square methodology to address legal compliance delivering user stories for implementing logical software architectures by multiple scrum teams in software projects agile methodologies are based in small development cycles and in continuous communication with customers with low needs on modeling formalism for requirements elicitation and documentation however there are projects whose context requires formal modeling and documentation of requirements in order to raise and manage critical issues from the very beginning of the project like architectural diagrams this work presents an approach for deriving a list of user stories using a logical architectural diagram as input derived user stories are then delivered to multiple scrum teams 2014 springer international publishing logical architectures scrum software requirements user stories requirements computation analyzing requirements cognition in multiple development paradigms the identification and management of users requirements have been a persistent challenge confronting software development projects for decades complicating this challenge research on requirements engineering processes has failed to keep pace with significant changes in the lived practice of software development in this paper we consider requirements oriented processes as a socio technical computational task in which diverse individuals and artifacts collaboratively compute the requirements for an envisioned software resource through the perspective of distributed cognition we analyze the distributed requirements activities of three information systems development projects each representing a distinct development methodology structured development agile development and open source software development we construct models of the computational structures of these projects to support a novel analytical basis for comparison and contrast of requirements oriented efforts in these development methodologies agile software development distributed cognition open source software development requirements engineering structured development 18th international conference on evaluation and assessment in software engineering ease 2014 the proceedings contain 59 papers the topics discussed include practitioners and researchers expectations on design space exploration for multicore systems in the automotive and avionics domains a survey survey on research synthesis in software engineering in quest for requirements engineering oracles dependent variables and measurements for good re a visual analysis approach to update systematic reviews a systematic literature review for agile development processes and user centered design integration uml consistency rules a systematic mapping study how do software developers experience team performance in lean and agile environments automatic extraction of developer expertise evaluating software merge quality an empirical investigation of the factors affecting agile usage and knowledge sharing for common understanding of technical specifications through artifactual culture handling design level requirements across distributed teams developing a new feature for 12 danish mobile banking apps 2014 ieee bankdata and mjolner have cooperated in the development of a new feature for 12 danish mobile banking apps bankdata is the main system provider and mjolner is subcontractor different teams from bankdata have collected requirements developed the necessary backend and middleware software and designed the user interface one team from mjolner has implemented the app feature the cooperation between the teams was centered around design level requirements our contribution is to describe and discuss a number of lessons learned regarding requirements representations requirements tools and cooperation process we have faced challenges which were amplified by our distributed teams set up we also briefly describe a number of initiatives we have launched recently to alleviate the problems and improve the handling of design level requirements in our future cooperation good enough requirements agile and lean approaches pragmatic requirements engineering process efficiency developing ux for collaborative mobile prototyping prototyping is an essential part of the user centered design process ucd since the emergence of touch based mobile devices in recent years a broad range of efforts has been taken to adapt professional prototyping tools to the mobile context however none of the existing mobile prototyping solutions adapts sufficiently to the needs of multidisciplinary teams or considers the experience of the users working environments explicitly our goal was to develop a mobile prototyping tool that supports the users in their tasks with special attention to the context of use we especially considered the holistic experience relating all tasks of the human centered design process our approach of requirements engineering focused on ux methods to get a deep insight not only on pragmatic features but also emotional demands i e hedonic qualities therefore we tried to strengthen the hedonic qualities to support action mode usage for leveraging creative potentials we d like to reveal whether and to what extent a detailed look on ux can ensure the working progress efficiency and motivation of a multidisciplinary software engineering team practicing agile methods we will illustrate this by presenting the development process of our mobile prototyping tool prime especially concerning new perspectives of a design process that focuses on hedonic parameters 2014 springer international publishing switzerland hedonic quality holistic experience joy of use mobile applications prototyping tools user centered design user experience snapmind a framework to support consistency and validation of model based requirements in agile development 2014 ieee two fundamental principles and values of agile methods are customer satisfaction by rapid delivery of useful software and the improvement of the communication process by continuous stakeholders involvement but how to deal with customers satisfaction and find a better visualization model at the requirements level which stakeholders can understand and be involved in an agile development context also how this visualization model enhancement can guarantee consistency between agile requirements artefacts e g user stories and domain models thus to answer these questions this paper presents the snapmind framework this framework aims to make the requirements modelling process more user centered through the definition of a visual requirements language based on mind maps model driven and domain specific language techniques moreover through these techniques the snapmind framework focuses on support for consistency between user stories and the domain models using a model animation technique called snapshots the framework was applied to an industrial case study to investigate its feasibility agile software requirements domain specific languages mind map model driven engineering snapshots sharing knowledge through tangible models designing kickoff workshops for agile software development projects springer international publishing switzerland 2014 all rights are reserved in software engineering the programmer depends on precise descriptions of the system to be built to get these descriptions analysts condense the knowledge about the domain from observations and discussions with the users the people that will eventually work with the software the users have to communicate their knowledge about the domain and express their needs with tbpm we have shown that it is possible for end users to express themselves by means of process models we now transfer these findings to other fields in software engineering we investigated in the discipline of requirements engineering especially in the context of agile software development approaches from practitioners we learned that during the first iterations code tends to be thrown away completely since the initial requirements gathering phase is intentionally kept lean we therefore introduced the concept of need finding iterations and tackle this problem in our research we develop a holistic workshop methodology to kick off agile software development projects in which a shared understanding among stakeholders is to be fostered discussions that would arise after a software prototype has been implemented are encouraged to be conducted at an earlier stage by making use of an adequate modeling solution we propose story prototypes which essentially enrich user stories with control flow information and thereby are enhanced to show the big picture rather than just individual aspects of the system to be built in such a kickoff workshop we encourage a detailed need finding together with the customer by means of shared model building user stories template for object oriented applications user stories present the mean of communication between customer and development team in agile methods this paper provides a new user stories voice aimed to ease and automate analysis of objects and their action from the user story using ooadare object oriented analysis and design approach for the requirements engineering approach 1 ooadare approach was also missing a communication mean with the customer user stories with the new template will do the job 2013 ieee agile method approach object oriented application user stories user stories voice a private living lab for requirements based evaluation a living lab is described as an open innovation space for the cooperation of users researchers and even companies to participate in a common process to develop innovative solutions an architecture for a living lab for ir has been proposed in 1 in this paper we propose a method and system that foregoes the inherent openness of the living lab and implements a private living lab to enable the cooperation between a research department agile software development and requirements engineering quality assurance this allows the research department to overcome the limitations of the usual approach to gold standard based evaluation while preserving its positive aspects the definition of a private livin g lab may be seen along the lines of the separation of public and private clouds in cloud computing copyright 2013 acm evaluation living lab private search requirements engineering with agent oriented models this paper provides a solution how to gather requirements using modified principles of agent oriented modeling by simplifying the concepts of agent oriented modeling for requirements engineering we have found that this kind of modeling can be used in various software development projects including agile software development for agile requirements engineering to verify our theories we ve used our practice in two real life projects this paper contains summary of ideas and practices developed during these projects copyright 2013 scitepress agent oriented modeling agile development requirements engineering systems modeling user stories improving user involvement through a model driven requirements approach model driven web engineering mdwe methodologies have proven to be a mature way of developing web applications dramatically increasing productivity during development however after more than a decade of evolution the artifacts and processes used to gather requirements have not changed substantially at the same time the capacity of quickly adapting to emergent domain specific requirements a feature that became popular with the massive adoption of agile approaches has become hard to achieve in these methodologies in this context in order to implement this kind of refined requirements as fast as possible changes are usually applied directly to the generated application losing the abstraction and its inherent productivity provided by the model driven process another way of implementing this kind of changes is by extending the modeling language but this implies a high effort and again a consequent productivity loss in this paper we propose a model driven development approach called mockre that captures requirements using user interface prototypes mockups that end users can understand completely the process and tooling presented here allows end users to express requirements annotating the mockups with textual descriptions and also generating a running application in the same way that mdwe environments do developers may later use these initial specifications placed by end users as valuable model concepts that can be refined through direct coding in a non intrusive way through this strategy mockre intends to make a more extensive reuse of end users specifications throughout the whole developing process 2013 ieee agile mockups model based requirements engineering model driven development identifying smart solutions for fighting illegal logging and timber trade we investigate how smart information and communication technologies ict solutions can be used for combating illegal logging and timber trade we put together techniques from agile requirements engineering to propose a methodology for identifying user stories and associated risks and priorities and via a collaborative participatory single day workshop named inception workshop we present our findings from the first application of the method with the active involvement of the relevant stakeholders i e technical and domain experts which concluded in seven user stories ifip international federation for information processing 2013 agile methods forestry illegal logging illegal timber trade inception workshop low cost sensors participatory methods requirements engineering rfid smart solutions user stories 7th international conference on research challenges in information science rcis 2013 conference proceedings the proceedings contain 71 papers the topics discussed include towards a proposal to capture usability requirements through guidelines collaborative creativity in requirements engineering analysis and practical advice handling requirements dependencies in agile projects a focus group with agile software development practitioners goal formalization and classification for requirements engineering fifteen years later pattern based methodology for uml profiles evolution management supporting organizational evolution by means of model driven reengineering frameworks m2flex a process metamodel for flexibility at runtime model driven development of a generic data control engine an industrial experience modeling temporality and subjectivity in conml a framework for question answering and its application to business intelligence and adapting to uncertain and evolving enterprise requirements the case of business driven business intelligence towards next generation requirements engineering this paper analyzes the potential of the mobile social web in facilitating the social dimension of agile requirements engineering in doing so an agile requirements engineering process arep is presented arep consists of a nonlinear sequence of technical activities each of which is supported by a number of social activities a compendium of representative examples that illustrate the interplay between activities underlying arep and social web applications is given the relationships to other software project artifacts and to open source software oss are highlighted 2012 ieee agile methodology collective intelligence human computer interaction mobility software engineering web 2 0 experiences by using affine for building collaborative applications for online communities continuous problems and deficits in developing complex and ever changing software systems led to agile methods e g scrum nevertheless the problem of considering a plethora of different functional as well as nonfunctional requirements n frs remains unsolved and gains in importance when engineering state of the art software the current tide of approaches aims at handling every single nfr by an individual process integrated into scrum yielding a process complexity which can not be handled properly scrum based affine was designed explicitly to provide an alternative solution to over complex design and development processes and still considering all kinds of nfrs early enough in the process in this paper we discuss collected findings by using affine in various projects dealing with the development of software for user centered online communities towards some evidence of its suitability 2013 springer verlag berlin heidelberg affine agile software process nonfunctional requirements engineering scrum security and usability user experience on the interaction between socio technical dimensions in the next generation of requirements engineering the practice of human centered methodologies for software development such as agilemethodologies is impacted by the surrounding technological environment this paper analyzes the potential of the mobile social web in facilitating the social dimension of agile requirements engineering in doing so an agile requirements engineering process arep is presented arep consists of a nonlinear sequence of technical activities each of whichis supported by a number of social activities the interplay between activities underlying arep and social web applications is illustrated by means of representative examples the relationships to other software project artifacts and to open source software oss are highlighted agile methodology collective intelligence knowledge engineering mobility social dynamics web 2 0 agile requirements prioritization in large scale outsourced system projects an empirical study the application of agile practices for requirements prioritization in distributed and outsourced projects is a relatively recent trend hence not all of its facets are well understood this exploratory study sets out to uncover the concepts that practitioners in a large software organization use in the prioritization process and the practices that they deem good we seek to provide a rich analysis and a deep understanding of three cases in an exploratory study that was carried out in a large and mature company widely recognized for its excellence and its engagement in outsourced software development we used in depth interviews for data collection and grounded theory techniques for data analysis our exploration efforts yielded the following findings i understanding requirements dependencies is of paramount importance for the successful deployment of agile approaches in large outsourced projects ii next to business value the most important prioritization criterion in the setting of outsourced large agile projects is risk iii the software organization has developed a new artefact that seems to be a worthwhile contribution to agile software development in the large delivery stories which complement user stories with technical implications effort estimation and associated risk the delivery stories play a pivotal role in requirements prioritization iv the vendor s domain knowledge is a key asset for setting up successful client developer collaboration v the use of agile prioritization practices depends on the type of project outsourcing arrangement our findings contribute to the empirical software engineering literature by bringing a rich analysis of cases in agile and distributed contexts from a vendor s perspective we also discuss the possible implications of the results for research and in practice 2013 elsevier inc agile requirements engineering case study distributed project management qualitative research large projects outsourced software development requirements dependencies requirements prioritization requirements engineering foundation for software quality 19th international working conference refsq 2013 proceedings the proceedings contain 28 papers the topics discussed include software architects experiences of quality requirements what know and what we do not know a persona based approach for exploring architecturally significant requirements in agile projects using clustering to improve the structure of natural language requirements documents automatic requirement categorization of large natural language specifications at mercedes benz for review improvements requirement ambiguity not as important as expected results of an empirical evaluation the design of sree a prototype potential ambiguity finder for requirements specifications and lessons learned factors influencing user feedback on predicted satisfaction with software systems maps of lessons learnt in requirements engineering a research preview and requirements traceability across organizational boundaries a survey and taxonomy 2013 3rd international workshop on empirical requirements engineering empire 2013 proceedings the proceedings contain 7 papers the topics discussed include specifying a framework for evaluating requirements engineering technology challenges and lessons learned evaluating the remo ekd technique a technique for the elicitation of software requirements based on ekd organizational models managing requirements volatility while scrumming within the v model users involvement in requirements engineering and system success studying relevant socio technical aspects of requirements driven collaboration in agile teams process research in requirements elicitation and requirements prioritization in software engineering a systematic mapping study servus collaborative tool support for agile requirements analysis agility in software and service engineering usually needs to encom pass the requirements analysis phase this paper describes a multi lingual web based tool that allows multiple users and stakeholders of different possibly geo graphically dispersed organizations to perform requirements analysis activities in an agile and collaborative manner and in close cooperation with software archi tects and engineers the tool relies upon the identification and semi formal de scription of use cases e g following cockburn s approach and the resource ori ented extensions proposed by the servus design methodology it supports to define relationships between use cases their representation in uml their step wise refinement and mapping to existing or emerging capabilities of service plat forms as well as the specification of associated test cases the tool is illustrated by its use in the european research project envirofi this project aims at ana lyzing and specifying the generic and specific enablement of the future internet core platform for the environmental information space agility environment information space future internet requirements analysis service oriented analysis and design servus use cases from pixels to bytes evolutionary scenario based design with video change and user involvement are two major challenges in agile software projects as change and user involvement usually arise spontaneously reaction to change validation and communication are thereby expected to happen in a continuous way in the project lifecycle we propose evolutionary scenario based design which employs video in fulfilling this goal and present a new idea that supports video production using secondlife like virtual world technology 2012 acm requirements engineering scenario based design video prototyping virtual world a framework to diminish the gap between the business specialist and the software designer requirements engineering establishes the process for defining requirements as one in which elicitation modeling and analysis are tasks which must be carried out this process should involve different stakeholders and their different viewpoints among these stakeholders there is the software designer responsible for creating models based on the information gathered by business specialists however this communication channel may create some noise that leads to information being lost this loss produces a semantic gap between what is desired and what will be developed the semantic gap is characterized by inconsistencies in the requirements represented by scenarios user stories in a behavior driven context and by the conceptual model this paper presents an interactive approach to the agile requirements modeling thus fostering greater consistency between the artifacts of the scenarios and the conceptual model this consistency is ensured by using a mind model specification which will serve as a basis for transforming the definitions of the scenario and generating a conceptual model represented by a uml class diagram the mind model represents the main role of this approach and functions as a bond that represents the business entities thus enabling the requirements to be more consistent with the reality of the business 2012 ieee agile modeling requirements behaviour driven development domain model mind map modeling uml mapping participatory design methods to the cognitive process of creativity to facilitate requirements engineering this chapter describes the user driven creativity framework a framework that links several participatory design pd activities into one combined method this framework designed to be accordant with the mental process model of creativity aims to integrate user involvement and creativity in the early stages of application requirements gathering and concept development this chapter aims to contribute to recent discussions on how user centered or participatory design methods can contribute to information systems development methodologies the authors describe a mobile language learning case study that demonstrates how an application of the framework resulted in system paper prototypes and unveiled perceptions of learners and teachers effectively yielding the necessary in depth user knowledge and involvement to establish a strong foundation for further agile development activities this chapter provides engineers or end user representatives with a hands on guide to elicit user requirements and envision possible future application information architectures 2013 igi global cherishing ambiguity neil maiden professor of systems engineering and head of the centre for hci design at city university london talks about the role of ambiguity in requirements engineering ambiguity can be defined as a specification that makes it possible to interpret a problem feature in at least two different ways the human in the loop makes requirements ambiguity almost inevitable one example of ambiguity in action is in agile development at the start of a project requirements are deliberately underspecified and therefore ambiguous during the project a more precise understanding of requirements emerges from different forms of communication and collaboration between different stakeholders ambiguity can be positively useful if used in a right manner ambiguities ambiguity requirements towards model driven game engineering for serious educational games tailored use cases for game requirements educational games are essential in the next generation of e learning tools because games stress visual and experiential learning they require active involvement by student players while providing almost instantaneous feedback the long term goal of this research project is to define a model driven game engineering approach simsys that supports the rapid development of serious educational games across diverse educational topics here we present our approach for modeling serious educational games using tailored uml use cases visual uml diagram and detailed tabular specifications the tailored approach integrates features of storyboarding techniques well established in the game community with use case modeling well established in the software engineering community the use case model can be transformed into a formal xml representation that can be loaded by the simsys game play engine part of a game on agile software development process is used for illustration 2012 ieee model driven game engineering requirements engineering serious educational games storyboards use cases on the suitability of the social web environment for agile requirements engineering the agile methodologies are part of a shift from predictive to adaptive approach to software development and are being increasingly deployed in many organizations this paper views agile requirements engineering as a kind of social engineering and explores the potential of the social web in facilitating it in doing so the interplay between stakeholders salient activities of agile requirements engineering process and social web applications is illustrated by means of representative examples the implications towards agile requirements engineering education are highlighted 2012 springer science business media dordrecht agile methodology human computer interaction software engineering use case user story web 2 0 integrating requirements engineering and user experience design in product life cycle management product development processes and best practices have come a long way in the last decade through continuous evolutions of new lifecycle and process models development models such as the waterfall model spiral model rational unified process agile and many others have looked at efficiency of the development processes these approaches have helped practitioners improve immensely on the efficiency and efficacy of the product development processes however product quality needs to be measured by parameters that go beyond the traditional criteria like performance reliability reusability etc a product that has any interaction with the end user also needs to meet a fundamental requirement of being user friendly development models such as jad joint application development have focused on making products user friendly apart from achieving the technical soundness in a product the success of the product also largely depends on how well the product addresses the primary requirements of the user such as desirability relevance and usability not meeting these requirements leads to bad user experience which in turn can actually lead to failure of the product this paper discusses some of the misconceptions and myths that exist in the industry regarding requirements engineering re and user experience design uxd and how user needs typically slip through the cracks under the name of non functional requirements the paper highlights the need for re and uxd focus during the overall product development life cycle in the concluding section an integrated framework for re and uxd in the plm process is presented 2012 ieee product life cycle management plm requirements engineering re user experience design uxd task descriptions versus use cases use cases are widely used as a substantial part of requirements also when little programming is expected cots based systems commercial off the shelf are use cases effective as requirements to answer this question we invited professionals and researchers to specify requirements for the same project acquire a new system to support a hotline among the 15 replies eight used traditional use cases that specified a dialog between user and system seven used a related technique task description which specified the customer s needs without specifying a dialog it also allowed the analyst to specify problem requirements problems to be handled by the new system it turned out that the traditional use cases covered the customer s needs poorly in areas where improvement was important but difficult use cases also restricted the solution space severely tasks did not have these problems and allowed an easy comparison of solutions 2011 springer verlag london limited agile requirements cots diffusion of innovation interaction design software requirements task description use case verification 4th international conference on human centered software engineering hcse 2016 the proceedings contain 28 papers the special focus in this conference is on human centered software engineering the topics include human factors engineering as the methodological babel fish translating user needs into software design improving software effort estimation using an expert centred approach a compositional model for gesture definition a development process for usable large scale interactive critical systems agile user experience development in a large software organization smartphone applications usability evaluation methods towards api usability a structural analysis of usability problem categories requirements sensemaking using concept maps towards conflict management in user interface composition driven by business needs a model for assessing organizational learning in software development organizations a personality based design approach using subgroup discovery assessing use complexity of software support for the application of creativity techniques in requirements engineering exploring local cultural perspectives in user interface development in an indian offshoring context improving support for visual task modelling lessons learned from evaluating the usability of mobile spreadsheet applications prototask new task model simulator the usage of usability techniques in scrum projects visualizing sensor data and graphical controls based environment for user interface evaluation the many lives of an agile story design processes design products and understandings in a large scale agile development project in agile software development asd stakeholders use stories to stimulate conversations that create and convey understanding of software requirements some authors have argued that asd methods have limited applicability to large scale projects because agile stories are not sufficient to capture the complexities of up front design this paper reports a 2 5 year field study of how an asd team for a complex software system adapted the user story concept and the scrum approach the team sought to create a convention for representing agile stories which could capture the complexities of the system requirements without burdening the team with unneeded documentation they developed eight different ways to represent a story the core representation of the approach was called a hyperepic a structured collection of closely related hyperstories hyperepics required 90 99 fewer words than conventional specifications because of their dense form hyper epics were not useful for other phases in the design build processes the team evolved a design build work practice that proceeded in stages in each stage stories underwent a one or more transformations each transformation represented stories differently to create varied kinds of understandings among different stakeholder sets the team was able to gain the benefits of asd faster development cycles less documentation rapid adaptation to insights and conditions 2012 ieee there s never enough time doing requirements under resource constraints and what requirements engineering can learn from agile development while requirements engineering textbooks state that a requirements specification must be complete in real life projects we are always starting too late with too few resources so we can t do everything the software development community has solved a similar problem not having enough resources to implement everything that was asked for by introducing agile development methods which offer ways of segmenting the overall project and choosing which parts to allocate resources to this paper is about how insights from that agile development community can be applied to requirements engineering activities for any agile or non agile development project key terms in agile development such as working product and user story must be mapped intelligently to terms in requirements engineering and not simply copied the product of requirements engineering is not the same as the product being implemented by developers 2011 ieee agile development requirements engineering systems projects triage show and tell play in combining natural language with user interaction for specifying behavior in search of improving the ways to create meaningful systems from requirements specifications this paper combines the showing and telling of how a system should behave using scenario based programming and the language of live sequence charts we suggest how user interaction with the system and user written requirements in natural language can interleave to create specifications through an interface that is both natural and agile 2011 iadis intelligent interfaces live sequence charts requirement engineering scenario based programming towards agile security risk management in re and beyond little attention has been given so far to the process of security risk management at the early stages of system development security has been addressed by isolated security assurance practices some of which consider risks and mitigations but they do not provide an overview of the overall security state of the system being developed this paper takes the position that 1 these isolated security assurance practices should be fully integrated and should be embedded in short iterations of risk assessment treatment and acceptance providing input for updating security requirements and for security risk management and that 2 available empirical data from public catalogs and databases should be used as a source of expertise to leverage past experiences and therefore reduce although not eliminate subjectivity of human judgment borrowing from the agile software development and project management philosophy we introduce the idea of a light weight agile approach to security risk management integrated to the development life cycle 2011 ieee agile software development information security risk management secure engineering security assurance support tool to the validation process of functional requirements the activity of validating identified requirements for an information system helps to improve the quality of a requirements specification document and consequently the success of a project although various different support tools to requirements engineering exist in the market there is still a lack of automated support for validation activity in this context the purpose of this paper is to make up for that deficiency with the use of an automated tool to provide the resources for the execution of an adequate validation activity the contribution of this study is to enable an agile and effective follow up of the scope established for the requirements so as to lead the development to a solution which would satisfy the real necessities of the users as well as to supply project managers with relevant information about the maturity of the analysts involved in requirements specification 2005 ieee requirements engineering requirements validation software quality assurance software requirements specification automated requirements engineering use case patterns driven approach based on a novel multi phases process a new use case patterns catalogue is constructed this catalogue is then utilised as a framework for a new use case patterns driven approach for requirement engineering the application of the proposed approach in a testwarehouse environment showed promising results in saving up to 30 of the total software development project time yet the resulted requirements models showed high 85 95 completeness percentage furthermore the application of an automated version of the proposed approach saved an extra 43 of the time saved by its manual application this had direct implications on improving requirements and design deliverables of agile software development processes nevertheless users raised a number of concerns that have been considered to outline prospective phases of this research 2011 the institution of engineering and technology information requirements analysis for holonic manufacturing systems in a virtual environment the design and development of holonic manufacturing systems requires careful and sometimes risky decision making to ensure that they will successfully satisfy the demands of an ever changing market in this paper the authors propose a methodology for a holonic manufacturing systems requirement analysis that is based on a virtual reality approach and aimed at assisting designers of such systems along the entire systems design and development process exploiting virtual reality helps the user collect valid information quickly and in a correct form by putting the user and the information support elements in direct relation with the operation of the system in a more realistic environment a prototype software system tool is designed to realise the features outlined in each phase of the methodology a virtual manufacturing environment for matching the physical and the information model domains is utilised to delineate the information system requirements of holonic manufacturing systems implementation a set of rules and a knowledge base is appended to the virtual environment to remove any inconsistency that could arise between the material and the information flows during the requirement analysis holonic manufacturing systems information requirements analysis virtual factory virtual reality 2010 3rd international workshop on managing requirements knowledge mark 10 the proceedings contain 8 papers the topics discussed include an ontological framework to manage the relative conflicts between security and usability requirements relating domain model based requirements management and situational method engineering rationale management challenges in requirements engineering concept mapping as a means of requirements tracing a semantic and collaborative platform for agile requirements evolution a hybrid recommender system for finding relevant users in open source forums and using audio and collaboration technologies for distributed requirements elicitation and documentation a semantic and collaborative platform for agile requirements evolution the characteristics of web based and community oriented social software are very useful in the context of software engineering in general and requirements engineering in particular their ease of use transparency of communication user orientation self organization and emergent nature resulting from a continual social feedback are particularly relevant to an agile requirements definition exercise the reason is that agile requirements are inherently meant to be collaboration intensive however while the benefits of social platforms are valuable they are necessary and not sufficient in themselves for making the exercise effective the emerging social software engineering discipline is about enabling community driven creation management and deployment of software by applying methods processes and tools in online environments in this paper we report our work on a semantic and collaborative platform that combines the virtues of social software principles and the semantic web concepts to enable knowledge assisted agile requirements definition 2010 ieee collaborative and semantic requirements definition semantic assistance social software engineering transition to agile development rediscovery of important requirements engineering practices many organizations have started to use agile development processes to speed up the development cycle and to improve the ability of the company in reacting to changing requirements adopting agile practices may happen as a revolution where all old practices are removed or as a more gradual process in this paper we discuss lessons learnt in two agile transition processes based on our experience agile processes can be used in embedded software development for products the challenges include the varying size of user requirements the role of system requirements and architecturally significant requirements it is difficult for large organizations to be agile work allocation for a large number of different teams with different competencies tends to decrease speed and increase the role of design and management we conclude that agile development in this context needs very skilled developers and has to be a combination of new and old practices 2010 ieee best practices requirements engineering a usability pattern based requirements analysis method to bridge the gap between user tasks and application features in software development it is important to mediate various concerns coming from user experience ux designers and application developers in agile user centered design agile ucd there is a special role called specialist who is dedicated to implement application features as well as to monitor user experiences however the specialist normally has difficulty in linking user tasks to be accessed via a user interface ui into application feature entities in addition the specialist may also have some unsettled usability risks that might result in the failure of meeting certain usability criteria and passing acceptance tests to alleviate these difficulties of the specialists in agile ucd we propose a usability pattern based requirement analysis method this method uses standardized and common representations of requirements specification to bridge the gap between user tasks and related application features of a ui it also provides a guideline to allow the specialist to reduce usability risks in an early stage by reflecting usability factors of ui design patterns to an application design a case study has been conducted to show how users can effectively specify user tasks and application features on ui workflows it also shows how easy and practical it is to understand the common representations as well as to apply to usability patterns 2010 ieee agile user centered design application feature requirements analysis method specialist usability pattern user task interaction pattern categories pragmatic engineering of knowledge based systems the application of knowledge based consultation and documentation systems is apart from large industrial projects often also beneficial for small to mid sized enterprises yet their design and implementation still is a tedious and costly task we motivate that customized ui and interaction patterns constitute a pragmatic technique for supporting especially requirements engineering and thus are capable of considerably promoting real world projects in this paper we introduce abstract categories guided adaptive and autonomous entry for classifying tailored patterns for knowledge based systems further we discuss their role in an overall approach extending the agile process model and resulting benefits agile development dialog system user interface design requirements acquirement based on two world simulation method requirements acquirement is the first phase of requirement engineering and there are already many methods to achieve this task but it should be admitted that requirement acquirement is still a big challenge for developers combing with the advanced ideas and efficient practice of xp and considering the current users features a new method of two world simulation is put forward here to obtain more accurate requirements in shorter time the two world simulation is composed of two steps filled with iteration one is about the real world simulation with the main technology of scene analysis and the other is about the computer world simulation with the main technology of fast prototype this method could be applied to the development of small or medium size projects with changeful requirements and it has successfully used in some system development it could also provide some suggestions for other developers to make the requirements acquirement easier 2010 ieee fast prototype requirements acquirement scene analysis two world simulation xp towards knowledge assisted agile requirements evolution this paper presents work on a recommendation system for knowledge assisted agile requirements evolution k gilere we treat requirements engineering as a special case of knowledge engineering and emphasize the fact that providing a domain knowledge edge can impart agility to the requirements definition exercise the approach differs from existing agile methods in that it seamlessly incorporates a domain knowledge base into an agile requirements definition framework and explicitly provides to requirement analysts relevant online domain specific recommendations based on underlying ontologies the framework presents a domain knowledge seed to requirement analysts the seed provides a view of core features in a given domain and associated knowledge elements such as business processes rules policies partial data models use cases and test cases these in turn are mapped with agile requirements elements such as user stories features tasks product backlog sprints and prototype plans the requirement analyst can evolve the seed to suit her specific project needs as she modifies and evolves the seed specification she receives domain specific online recommendations to improve the correctness consistency and completeness of her requirement specification documents and executable models using the domain knowledge seed as a point of departure provides a jump start to her project each exercise of requirements definition thus becomes an evolution from the seed instead of the traditional clean slate requirements engineering re that typically starts from the scratch hence the term kgilere we elaborate how k gilere helps in practicing the essence of agile doctrines while defining software requirements by providing just in time recommendations copyright 2010 acm collaborative and semantic requirements definition domain specific recommendations knowledge assisted agile from formal requirements to automated web testing and prototyping use cases and user interface prototypes are agile techniques used to specify required functionalities of an object oriented system testing can find most errors of the software and ensure that the requirement specifications are satisfied by the application we can derive test cases from use cases and run them in user interfaces but we do it in a mechanical way in this paper we propose a new approach for automating the generation of user interface prototypes and test cases for web applications starting from a formalization of the requirements based on controlled use cases extended with the system glossary and the user interface specifications we automatically generate web pages and test cases which are passed as parameters for an automated web testing tool springer verlag london limited 2010 automation requirements engineering software prototyping software testing best practices guidelines for agile requirements engineering practices developing software that meets the customers or stakeholders needs and expectation is the ultimate goal of the software development methodology to meet their need we have to perform requirement engineering which helps to identify and structure requirements in traditional software development methods end users or stakeholders predefined their requirements and sent to the development team to analysis and negotiation to produce requirement specification in many cases it is risky or very difficult and not economical to produce a complete verifiable set of requirements traditional software development has a problem to deal with requirement change after careful analysis and negotiation this problem is well tackled by the agile practices as it s recommends an on site customer to represents their requirements through user stories on story cards generally customers have rarely a general picture of the requirements or system in their mind which leads problems related to requirements like requirements conflicts missing requirements and ambiguous requirements etc and does not address non functional requirements from exploration phase this chapter introduces best knowledge based guidelines for agile requirements engineering to enhance the quality of requirements story cards 2010 igi global generating user stories in groups communicating about system requirements with user stories is a distinctive feature of agile software development methods while user stories make system requirements intelligible to both customers and technical developers they also create new challenges for the requirements elicitation process such as personal bias and requirements coverage in this study we propose that when elicited from groups instead of individuals the number of stories generated the uniqueness and the comprehensiveness of the stories is likely to increase a lab experiment design is delineated and partially completed future research will need to be conducted to determine conclusions 2009 springer berlin heidelberg group story telling requirements elicitation user stories little design up front a design science approach to integrating usability into agile requirements engineering in recent years design science has gained wide recognition and acceptance as a formal research method in many disciplines including information systems design science research in human computer interaction is not so abundant hci is a discipline primarily focusing on design evaluation and implementation where design plays the role as a process as well as an artefact in this paper we present a design science approach using little design up front to integrate the user centred design perspective into agile requirements engineering we also present the results of two agile projects to validate the proposition that incorporating ucd perspective into agile software development improves the design quality of software systems 2009 springer berlin heidelberg agile requirements engineering design science usability efficient building of interactive applications guided by requirements models the analysis of functional and non functional requirements of an interactive application not only encompasses the descriptive aspects of its functionality and the user and system restrictions it must also satisfy user needs such as usability along with system needs such as reliability intermod is an interactive application design methodology with agile characteristics which proposes the use of incremental models to define requirements configure presentation and develop functionality this poster is focused on the requirements of the intermod methodology for the efficient construction of interactive applications these models include user system task and dialog models an example created with a tool that follows these principles and illustrates our approach to the dialog model is presented 2009 springer berlin heidelberg dialog model methodology requirements analysis system model task model user model query based requirements engineering for health care information systems examples and prospects designing healthcare information systems is a challenge to software engineering theory and practice many requirements engineering re methods demand user participation clear functional objectives and a well defined context of use these demands are hard to meet in the healthcare domain which is characterized by high diversity complexity and little time and money to spend there are many examples of healthcare software systems that have failed due to lacking investment in the early phases of design and requirements analysis we have developed methods for gathering detailed observational data about care and communication practice in this article we explain how this data can be used for iterative demanddriven requirements elicitation and to answer design questions the examples are taken from structured observation of actors situations information usage and activities at two norwegian hospitals we regard this approach as a useful supplement to other re methods in particular for agile development methods 2009 ieee method for software cost estimating using scope champions there are many methods of software cost estimating cocomo function points analysis three point estimate use case points class points xp user stories sloc prediction and others with their advantages and drawbacks one common problem with all methods is the necessity to estimate the whole requirements specification item by item at the end either this process is expensive or the numbers are inaccurate this paper presents a method of software cost estimating using a limited number of functional requirements called scope champions estimators produce more detailed and grounded numbers that are used in a final estimation formula the method reduces the costs of estimating and increases accuracy 2009 springer berlin heidelberg cost optimization requirements analysis size estimating software cost estimating requirements analysis as a guide for the process of organising and developing an interactive application 2009 iadis developing interactive applications according to quality criteria can be done within the environment of a methodology centred on the user and by means of the agile but ordered realisation of its components the analysis of functional and non functional requirements does not only encompass the descriptive aspects of functionality it must also satisfy user needs such as usability as understood in terms of efficiency effectiveness and satisfaction of use at the same time the analysis should cover other important conditioning factors such as system reliability and security this article is based on the intermod methodology whose objective is to facilitate the design of quality interactive applications intermod proposes using user centred models which allow to define the application requirements and to describe the human computer dialogue both of them are embedded in an early prototype evaluation process the requirements models the presentation model and the software model are involved in this process several tools guide the process described in intermod and here we focus on diagram diagram gathers the requirements models automatically creates a user friendly prototype and brings the developers and users into the process design in a continuous evaluate phase all the models are saved in xml allowing communication among them some examples made with that tool illustrate our approach dialogue model methodology requirements analysis system model task model user model story cards process improvement framework this paper describes an ongoing process to define a suitable process improvement model for story cards based requirement engineering process and practices at agile software development environments key features of the story card maturity model are solves the problems related to the story cards like requirements conflicts missing requirements ambiguous requirements define standard structure of story cards to address non functional requirements from exploration phase and the use of a simplified and tailored assessment method for story cards based requirements engineering practices based on the cmm which is poorly addressed at cmm cmm does not cover how the quality of the requirements engineering process should be secured or what activities should be present for the requirements engineering process to achieve a certain maturity level it is difficult to know what is not addressed or what could be done to improve the process we also presents how can be the identified areas of improvement from assessment can be mapped with best knowledge based story cards practices for agile software development environments agile requirements requirements engineering software process improvement story cards user story applying a video based requirements engineering technique to an airport scenario in the development of software intensive systems the interaction between customer and supplier is usually text based we argue that with agile project management gaining momentum the inclusion of enduser feedback and a better mutual understanding between customer and supplier on hardware and software design goals becomes increasingly important we propose the use of video techniques videobased requirements engineering vbre to support the communication between all stakeholders the key ingredients of vbre are user centric videos and an exploratory environment for creating multi path scenarios in this workshop session the participants will get hands on experience with vbre techniques and tools while working on a fictitious airport baggage handling system 2008 ieee insert an improved story card based requirement engineering practice for extreme programming developing software that meets the customers or stakeholders needs and expectation is the ultimate goal of the software development methodology to meet their need we have to perform requirement engineering which helps to identify and structure requirements in traditional software development methods end users or stakeholders predefined their requirements and sent to the development team to analysis and negotiation to produce requirement specification in many cases it is risky or very difficult and not economical to produce a complete verifiable set of requirements traditional software development has a problem to deal with requirement change after careful analysis and negotiation this problem is well tackled by the xp as xp recommends an on site customer to represents their requirements through user stories on story cards generally customers have rarely a general picture of the requirements or system in their mind which leads problems related to requirements like requirements conflicts missing requirements and ambiguous requirements etc and does not address non functional requirements from exploration phase agile requirements agile requirements elicitation story cards user story acceptance test driven story card development an improved requirement elicitation process in xp requirement elicitation is a process to collect information from the end users or stakeholders of system in traditional software development models requirements are predefined and sent to the developers to do analysis from various stakeholders requirement elicitation and quality related to requirements are the challenging issues in the software development life cycle xp recommend an on site customer to represents their requirements through user stories on story cards generally customers have rarely a general picture of the requirements or system in their mind which leads problems related to requirements like requirements conflicts missing requirements and ambiguous requirements etc and not address non functional requirements from exploration phase two third of the projects are failed because of ambiguous and incomplete user requirements and poor quality of the requirements acceptance testing is also one of the key issues which is often left unsolved or uncovered to verify user requirements in xp agile software development methodology to solve these problems we propose a new improved requirement elicitation gathering process framework for story cards in xp to improve quality of user stories to capture functional and non functional user requirements on story cards our approach involves adopting acceptance tests right from story cards as soon as requirements are clearly understood we also aim to demonstrate how acceptance test will improve story card driven agile software development xp we believe this will enhance the popularity of agile based software development acceptance test extreme programming requirement engineering story card user story proceedings of the 13th international workshop on exploring modeling methods for systems analysis and design emmsad 2008 held in conjunction with the caise 2008 conference the proceedings contain 14 papers the topics discussed include towards systematic usage of labels and icons in business process models the power context of method in action a case study a formal comparison of conceptual data modeling languages atomicity and normalization a modeling methodology for empirically studying user behavior the case of uml diagram usage modeling architectural design rules in uml from method fragments to method services method engineering as game design an emerging hci perspective on methods and case tools using eeml for combined goal and process oriented modeling evaluation through a case study guiding system modelers in multi view environments a domain engineering approach metamodeling variability to enable requirements reuse meta meta model extensions for manageability of large scale collaborative modeling what is an aspect in aspect oriented requirements engineering and integrating agile modeling with participative enterprise modeling towards an agile infrastructure to provision devices applications and networks a service oriented approach most industries and organizations use collections of tools devices and applications that are growing in complexity new tools or applications may be acquired and old tools may become obsolete over time they are often running on a variety of platforms have different bandwidth and qos requirements and in most cases they cannot be accessed through a single point of entry moreover some tools may require specific configurations done by technical experts to address these issues we propose an extensible reliable and simple software architecture that can hide the complexity of provisioning the network and running the tools this paper introduces a service oriented approach for creating an agile infrastructure to provision devices applications and their underlying networks the eucalyptus prototype is developed as an empirical application to test this approach eucalyptus is built on a set of generic fine grained web services to manage and configure available resources where new resources can be custom built or imported from a third party they can be integrated into eucalyptus using a set of web service enabled apis our user community consists of architects and industrial designers eucalyptus can manage and configure the resources needed by geographically distributed groups of architects who need to collaborate in real time on the design of buildings in a virtual participatory design studio pds eucalyptus provides a single point of entry for the architects to access a wide variety of tools videoconference applications visualization services rendering services employing parallel computers etc eucalyptus provides a set of upper layer services for users to provision devices and applications running on high speed broadband networks as well as the commercial ip networks 2007 ieee incorporating user centered requirement engineering into agile software development agile software engineering approaches gain more and more popularity in today s development organizations the need for usable products is also a growing factor for organizations thus their development processes have to react on mis demand and have to offer approaches to integrate the factor usability in their development processes the approach presented in this paper evaluates how agile software engineering models consider activities of usability engineering to ensure the creation of usable software products the user centeredness of the two agile se models scrum and xp has been analyzed and the question of how potential gaps can be filled without loosing the process agility is discussed as requirements play a decisive role during software development in software engineering as well as usability engineering therefore different user centered requirements that ensure the development of usable systems served as basis for the gap analysis springer verlag berlin heidelberg 2007 agile software engineering usability engineering user centered requirements human computer interaction interaction design and usability 12th international conference hci international 2007 proceedings the proceedings contain 132 papers the topics discussed include design principles based on cognitive aging redesigning the rationale for design rationale towards generic interaction styles for product design incorporating user centered requirement engineering into agile software development a scenario based design method with photo diaries and photo essays alignment of product portfolio definition and user centered design activities a new user centered design process for creating new value and future a meta cognition modeling of engineering product designer in the process of product design emotional experiences and quality perceptions of interactive products aspects of integrating user centered design into software engineering processes activity theoretical analysis and design model for web based experimentation participatory design using scenarios in different cultures and holistic interaction between the computer and the active human being are use cases beneficial for developers using agile requirements agile teams commonly use user stories conversations with on site customers and test cases to gather requirements some agile teams like to add other artifacts such as use cases to provide more detail to the agile requirements this paper presents the results of a controlled experiment aimed to learn whether use cases could help agile requirements and indirectly to find if agile requirements techniques are sufficient in the study subjects were given requirements for three maintenance tasks as use cases or agile requirements or both we found that subjects using use cases spent less time understanding requirements in comparison to subjects not using use cases in addition the presence of the use cases helped subjects to ask better questions to the on site customer however we could not determine if subjects using use cases understood the requirements better we conclude that the inclusion of use cases in agile requirements could benefit agile teams 2007 ieee proceedings of the iasted international conference on software engineering se 2007 the proceedings contain 62 papers the topics discussed include designing an automated staff and organization performance appraisal nextmove a distributed project management tool a development methodology for moderately open multi agent systems towards engineering web services improving agile software development by the application of method engineering practices towards an agile process pattern modeling framework requirements change management process models an evaluation a revision based logical framework for evolvable software the role of domain knowledge representation in requirements elicitation improving requirements engineering from the client s perspective in the health care domain on synchronization with direct delaying and resuming a survey of context aware middleware java debugging laboratory for automatic generation and analysis of trace data and a practical approach to task dialog and abstract presentation modeling of graphical user interfaces the application of user stories for strategic planning in agile development stories are typically used to define small independent pieces of functionality that have value for the customer they are most often used to define requirements for future development this paper describes a project where stories were used on a much broader scale as part of a strategic planning exercise to identify a long term development roadmap for a new system stories were used not only to define what needed to be built but also to document existing functionality and gaps with current systems this resulted in the generation of a large number of stories which created challenges with managing and keeping the stories up to date as the project proceeded springer verlag berlin heidelberg 2007 requirements specification what strategy under what conditions there are several strategies philosophies of is development structured data oriented object oriented serviceoriented and agile programming their application was to a high degree implied by technological conditions the strategies have been determining the information systems architecture and the tools and methods of requirement specification due the success of new strategies the older ones are improperly considered to be obsolete there are discussed the conditions under which the application of a particular strategy is not only feasible but optimal and when and how different strategies are to be combined all the strategies except the service oriented one are suited to the development of application more or less from scratch the application has a programmed number of threads the current largest information systems like the systems supporting e government or global enterprises must have serviceoriented architecture of a specific form software confederations confederation oriented strategy is different from the other strategies but it can should be combined with them the main differences are in the use of legacy systems and software standards 2007 ieee agility in soa batch systems data stores in soa data driven systems requirements specification in soa software confederations user oriented service interfaces identifying application key knowledge through system operations modeling one of the problems associated with complex systems engineering is identifying the system knowledge relevant to build system implementation system operations are an essential part of this knowledge software and system engineering standards highlight the importance of system operations templates for a concept of operations document are available from different standard bodies in the context of requirements engineering and specification however specific guidelines for operations modeling are not usually provided this paper introduces an approach to systematically model system operations the cornerstone for this is an operations metamodel this metamodel is presented within this paper and has been defined using uml 2 x the baseline for the metamodel is a schema also introduced within the paper which formalizes system operations in terms of commands acting on systems inputs to the system and different kinds of outputs classified into responses notifications and alarms operations models as presented here comprise system knowledge essentials from a functional point of view but reduced in size compared to the whole system specification they can be deployed in several ways this paper presents their use as drivers for system development and validation from early lifecycle stages 2007 ieee agile methodologies complex systems concept of operations conops engineering of computer based systems systems software operations modeling systems software systems engineering user system interaction modeling deriving static and dynamic concepts from software requirements using sophisticated tagging natural language requirements specifications form the basis for the subsequent phase of the information system development process namely the development of conceptual schemata both the textual as well as the conceptual representations are not really appropriate for being thoroughly captured and validated by the requirement holders i e the end users therefore in our approach the textual specifications are firstly linguistically analyzed and translated into a so called conceptual predesign schema that schema is formulated using an interlingua which is based on a lean semantic model thus allowing users to participate more efficiently in the design and validation process after validation the predesign schema is mapped to a conceptual representation e g uml the sequence of these translation and transformation steps is described by the niba workflow this paper focuses on the information supporting a step by step mapping of natural language requirements specifications to a conceptual model and on how that information is gained on particular we present a four level interpretation of tagging output 2006 elsevier b v all rights reserved conceptual modeling natural language processing requirements engineering shallow parsing tagging managing ucd within agile projects the issues related to managing user centered design ucd involved in software development projects that follow an agile development methodology are discussed iterative phases of ucd involves understanding users by observing and interviewing end users and other stakeholders phase 2 defines interaction takes the output from phase 1 and creates use cases from the user research these use cases are used as input to phase 3 design ui where prototypes are iteratively created and evaluated it is recommended that understanding users should involve anticipating activities such as reading background literature gathering information on competing products and conducting early customer interviews agile friendly use case methods should be promoted so that time and effort are not wasted in addition user interface ui should be undermined as independently empowered teams evolving code in parallel without coordinating each other a user story driven software development method software process improvement in small organizations is a challenging task to support the process improvement in small organizations agile development methods are very valuable user story is one of the important practices of extreme programming to learn the development model of user story the paper introduces a user story driven software development method oriented to small organizations and projects the method is helpful to requirement analysis designing iteration plan and release plan etc the method is valuable for project team less than 10 people which is proved by some projects iteration user requirement user stories 9th workshop iberoamericano de ingenieria de requisitos y ambientes de software ideas 2006 the proceedings contain 45 papers the special focus in this conference is on software engineering the topics include trends on cots component selection quality measurement and evaluation based on metrics and indicators software development in mda environments towards semi automated workflow based aggregation of web services a semantic assembly and composition services and components extending uml to support both agency and organizational architectural features adaptation of software processes with based on risk and organizational patterns aspects identification in requirements engineering an ontology software requirements an ontology for requirements engineering requirements elicitation process for software packaging and software to measure increasing understanding of requirements development software with distributed teams semiautomatic method for identification operations from conceptual graphs a model driven approach for the design of secure xml databases transforming ternary associations to database schemas an osgi based framework for pervasive systems development applying mda to the conceptual design of data warehouses generating technological solutions based on web services composition measurement and assessment of quality in use usability evaluation of an environment model oriented architectures an extensible model for representing and tracing architecture based design processes quality assessment documents aspect oriented requirements measures analysis stage requirements elicitation metrics for the evaluation of business process models evaluation approaches for software architectural documents performance testing for web gis applications the problem of duplication of movements data on measurement procedure business process modeling based on web services dynamic integration based on functionality context of application components detection and resolution of conflicts aspects based on an expert system rules experience in the development of an application open source accounting using xp generation modeling multi agent systems from the scenarios and user centred requirements for improving an intensive care unit information system beap an end user agile programming paradigm for business applications business applications are subject to changes with technology trends or market demands however quick response to these changes is still a challenging issue most of the existing architectures e g corba web services still expose the developers to excessive low level details and force a tight coupling between program modules for end users developing customizing and reengineering applications remain difficult and time consuming tasks a high level programming model is presented together with a descriptive programming paradigm called beap to facilitate end user programming in this approach applications could be visually composed from well defined software components called funnels in an event driven fashion application examples have shown that by raising the level of abstraction as well as simplifying the programming model beap could empower end users to build business applications on demand with improved productivity springer science business media inc 2006 agile component event based pi calculus virtualization visual programming automating functional tests using selenium ever in search of a silver bullet for automated functional testing for web applications many folks have turned to selenium selenium is an open source project for in browser testing originally developed by thoughtworks and now boasting an active community of developers and users one of selenium s stated goals is to become the de facto open source replacement for proprietary tools such as winrunner of particular interest to the agile community is that it offers the possibility of test first design of web applications red green signals for customer acceptance tests and an automated regression test bed for the web tier this experience report describes the standard environment for testing with selenium as well as modifications we performed to incorporate our script pages into a wiki it includes lessons we learned about continuous integration script writing and using the selenium recorder renamed ide we also discuss how long it took to write and maintain the scripts in the iterative development environment how close we came to covering all of the functional requirements with tests how often the tests should be and were run and whether additional automated functional testing below the gui layer was still necessary and or appropriate while no silver bullet selenium has become a valuable addition to our agile testing toolkit and is used on the majority of our web application projects it promises to become even more valuable as it gains widespread adoption and continues to be actively developed 2006 ieee inivis ac3d v6 cadalyst inivis released v6 of ac3d its fully integrated subdivision surface modeler which allows smooth 3d shapes to be described by using simple underlying polygon objects ac3d explore design concepts and create 3d models for various uses from games to models which can be used in major design applications ac3d design tools includes the opengl 3d graphics which provides an adjustable field of view and facilitates the user to either spin the model or switch into its walk mode for quake style control ac3d has full polygon editing which creates a sphere and deform the shape by moving the points or vertices system requirements for running ac3d v6 is a pc with atleast a pentium 120 mhz processor 64 mb ram 10mb of free hard disk space and windows 95 98 me nt 4 2000 xp or linux x86 ac3d v6 is economically priced at 69 95 for the full version with upgrades from previous versions users can download a 14 day fully functional trial version from the ac3d website for evaluation extending xp practices to support security requirements engineering this paper proposes a way of extending extreme programming xp practices in particular the original planning game and the coding guidelines to aid the developers and the customer to engineer security requirements while maintaining the iterative and rapid feedback driven nature of xp more specifically these steps result in two new security specific flavours of xp user stories abuser stories threat scenarios and security related user stories security functionalities the introduced extensions also aid in formulating security specific coding and design standards to be used in the project as well as in understanding the need for supporting specific security related user stories by the system the proposed extensions have been tested in a student project agile software development development methodology extreme programming requirements security engineering proceedings icse05 27th international conference on software engineering the proceedings contain 133 papers the topics discussed include transitions in programming models agile open source distributed and on time inside the eclipse development process addressing software dependability with statistical and machine learning techniques system challenges for ubiquitous pervasive computing research challenges of autonomic computing clinical requirements engineering silver bullet or fool s gold supporting usability in open source software development how software can help or hinder human decision making and vice versa moving from a plan driven culture to agile development testing database transactions with agenda helping users avoid bugs in gui applications using structural context to recommend source code examples automatic generation and maintenance of correct spreadsheets a framework of greedy methods for constructing interaction test suites demand driven structural testing with dynamic instrumentation and an adaptive object model with dynamic role binding agile software development human values and culture people involved in the development of agile methods seem to agree that agile methods emphasize close collaboration between the users and the developers of a project and relatively quick development cycles that can react to changing requirements two classical techniques offer insights into the arguments surrounding agile methods the two techniques referred to as utilitarian and deontological analyses as well as other applied ethics techniques offer software engineers a more precise language for articulating their ideas about software engineering issues that involve human values that improved language is expected to lead to more productive discussions about the strengths and weaknesses of development methods requirements interaction management in an extreme programming environment a case study this work reports experience applying the process of requirements interaction management rim within the context of developing a commercial internet based software application in an industrial venue employing the extreme programming xp methodology we describe our means of managing the interactions by extending the standard xp requirements process while maintaining consistency with the principles of xp itself we outline our rationale for modifying the xp requirements process and provide a temporal comparison showing that for this project modified process is essential to successful application of rim copyright 2005 acm dependency analysis extreme programming interaction analysis requirements engineering requirements interaction management system analysis system specification user stories enterprise architects join the team the parallels between architecture and business requirements are compelling agile methods have successfully delivered applications with improved value to business customers and successful business applications keep the business users closely involved the same success can be achieved by involving architects as customers for their requirements ifip tc 5 wg 5 5 6th ifip international conference on information technology for balanced automation systems in manufacturing and services basys 2004 the proceedings contain 56 papers the special focus in this conference is on information technology for balanced automation systems in manufacturing and services the topics include implementation issues with holonic control device communication interfaces holonic manufacturing control contingencies based reconfiguration of holonic control devices agent based simulation agent based architecture for information handling in automation systems an intelligent agent validation architecture for distributed manufacturing organizations multi agent based framework for large scale visual program reuse integrating multi agent systems alarm root cause detection system a methodology for shop floor reengineering based on multiagents agent based distributed collaborative monitoring and maintenance in manufacturing mobile access to process knowledge reliable communications for mobile agents the telecare solution an empirical research in intelligent manufacturing preference based scheduling for an hms environment optimization algorithm for dynamic multi agent job routing agent system application in high volume production management multi agent based robust scheduling for agile manufacturing fusion based intelligent support for logistics management a web services agent based model for inter enterprise collaboration analysis of requirements for collaborative scientific experimentation environments a knowledge management based framework as a way for sme networks integration collaborative e engineering environments to support integrated product development applying a benchmarking methodology to empower a virtual organisation a contribution to understand collaboration benefits predictive performance measurement in virtual organisations multi layers supply chain modeling based on multi agents approach a formal theory of bm virtual enterprises structures a distributed knowledge base for manufacturing scheduling sme service networks for cooperative operation of robot installations information infrastructures and sustainability knowledge based requirements engineering for reconfigurable precision assembly systems definitions limitations and approaches of evolvable assembly system platforms benefits of modularity and module level tests automated system for leather inspection modelling and simulation of human centred assembly systems a real case study decision support when configuring automatic systems a maintenance policy selection tool for industrial machine parts using data mining for virtual enterprise management an application of machine learning for internet users evaluating a software costing method based on software features and case based reasoning reduction techniques for instance based text categorization one class learning for human robot interaction cepstral analysis in tool monitoring and intelligent diagnosis and learning in centrifugal pumps requirements engineering process selection at hewlett packard the requirements engineering re processes used at hewlett packard hp are many and varied they range from informal to formal on projects that are short agile and at internet speed as well as long and methodical ones typically the re approach is influenced by business drivers as well as constraints or attributes of the project some of the major attributes that affect hp s re selection process include level of understanding of the user s domain needs project size and complexity schedule resources cost quality expectations project personnel expertise development model in house versus outsourced tolerance for requirements volatility cost of requirements changes during development and after release and the speed at which changes can be applied to the product after release attributes of the re approach for two hp projects are examined in this paper the first project is agile with an internet speed release schedule it is based on experience with the web site and consumer award winning eservices hpshopping com organization the other project is large complex and makes use of outsourced development it is based on experience with the development of an hp worldwide ww it customer communications system that cuts across all of hp s businesses many different re processes are used at hp the most effective ones are those customized to closely fit the business drivers and project attributes 2004 ieee improving requirements management in extreme programming with tool support an improvement attempt that failed while extreme programming xp relies on certain principles it requires an extensive set of tools to enable an effective execution of its practices in many companies putting stories on the board may not be sufficient for managing rapidly changing requirements the objective of this paper is to report the results from a study where a requirement management tool the storymanager was developed to meet the needs of a xp project team the tool was used in a case project where a mobile application for real markets was produced the tool was dropped by the team only after two releases the reasons of the process improvement failure are addressed in this paper the principal results show that the tool was found to be too difficult to use and that it failed to provide as powerful a visual view as the paper pen board method the implications of these findings are addressed for both the practitioners and researchers in the field generalized release planning for product line architectures this paper elaborates on the coordination and management of evolving software product lines where development teams work around a shared and reusable domain infrastructure the trend away from monolithic applications and towards component based product line architectures has enabled the development of complex software to be undertaken by autonomous and often geographically separated teams delivering a complete product or product line requires significant coordination to bring the separate development streams together at agreed upon points in the schedule for integration and test in such complex development scenarios a release matrix has been proposed as a generalization of release planning and tracking addressing multiple products components and their interdependencies at an enterprise or marketplace level here we describe the results of the practical trials of the release matrix that provide pragmatic guidelines for its use and indicate areas for future research relationships to established processes including requirements engineering and configuration management are clarified and the methodology neutral technique is shown to complement work in areas including agile methods and component contracts springer verlag 2004 imaginate a case is given on how one programmer completed agile development by sitting down with the user and creating the software in real time focus is on the lessons learned throughout the process which are as follows users like results and care less about the technology they like to be involved reuse is great but use is better and tools should support rapid development with feedback not rup not xp multiple letters usage centered engineering for web applications a flexible model driven approach for engineering web applications that succeeds through a focus on user interface design and usability is presented its simple model driven techniques work well for novel applications and integrate readily with lightweight or agile development processes under compressed development schedules get ready for agile methods with care traditionalists advocate using extensive planning codified processes and rigorous reuse to make development an efficient and predictable activity that gradually matures toward perfection although many of their advocates consider the agile and plan driven software development methods polar opposites synthesizing the two can provide developers with a comprehensive spectrum of tools and options adapting xp to complex application domains extreme programming xp works well for small software projects in not too complex application domains in many of these projects the rather simple requirements engineering of xp customers write story cards has proved suitable but today we are more often faced with complex application domains in which the classical xp techniques will not suffice the tutorial shows how to adapt extreme programming to complex application domains and to demanding development tasks we focus mainly on the requirements engineering part and show how to enhance xp with interviews scenarios and system visions we also integrate the management perspective into the planning game reconciling this perspective to users needs we propose a set of best practice methods we have used in a number of industrial high risk projects for different complex application domains clients and users complex application domains extreme programming on site customer planning game proceedings of the 1998 20th international conference on software engineering the proceedings contains 64 papers from the 20th international conference on software engineering topics discussed include agile software processes software process modeling software process improvement activities virtual reality systems object request broker goal driven requirements engineering conceptual module querying reuse driven interprocedural slicing three dimensional software modeling the internet architecture based runtime software evolution regression test selection techniques form based visual programs integrating architecture description languages automated validation systems object oriented software distributed systems non intrusive object introspection and object oriented reuse