the quality of your code is the quality of your brand and it s time to pay attention to software testing 2015 ieee competition in the automotive industry is intense and successful companies must constantly innovate by introducing new technology to differentiate and improve their brands as a result today s vehicles have evolved from a mechanical device into an integrated machine with embedded software powering performance in all major systems including engine control power train suspension braking and entertainment consider a few of these incredible statistics today s vehicles have more computer processing power than nasa s early spacecraft an average modern high end car has more lines of code than an f 35 joint strike fighter and finally many automobiles actually have an addressable ip address these technological improvements are driving brand success stories as modern consumers experiences are shaped more by the software than the hardware a strong brand can create significant value in the automotive industry as a focus on integrated technology helps to drive brand loyalty and value according to interbrand s 15th annual best global brands report the collective value of the automotive brands appearing on the global brands ranking increased 14 6 percent three out of the five top risers listed were from the automotive sector making the 15th annual report a record breaking one for the auto industry however statistics also show that more than 50 percent of auto recalls are now due to software bugs not mechanical issues with an industry average of 5 10 bugs per thousand lines of code the errors can pile up fast as automobiles evolve from mechanical to software devices automakers must rethink fundamental product development principles including moving from a sequential compartmentalized design process to a more agile approach with higher degrees of collaboration between self directed cross functional teams this paper will outline why software quality needs to be at the top of the list for automotive oems looking to preserve and elevate their brand status for quality to improve continuous integration and continuous software testing are a necessity while software testing has traditionally been viewed as a development expense we will explain that when developed properly software tests are an asset similar to source code that should provide value over the entire product life cycle well designed tests allow regressions to be caught prior to product release and lead to a reduction in branch damage and costs associated with product recalls road vehicles software quality testing software reliability software testing vehicle safety agile learning through continuous assessment 2015 ieee this work explores the impact of teaching and learning if the rate of learner engagement outside the classroom is continuously measured and available to the instructor and students we describe an ongoing implementation of a monitoring tool built within a software engineering continuous integration and testing ci test platform that integrates multiple streams of student activity and performance on yearlong junior software engineering projects the ci test platform allows for continuous and instantaneous feedback which we will use to inform student behavior change in the work in progress we describe the technology its impact on the teaching process for the instructor and preliminary results observing impacts on student engagement behavior agile continuous assessment project learning a modular approach to collaborative development in an openstack testbed 2015 ieee cloudwave is an integrated project funded by the european commission whose aim is to provide a new powerful foundation for the development deployment and management of cloud based services cloudwave will develop a set of software components that have to be integrated into a single multi layer cloud stack based on openstack during the project a testbed environment allows project partners to exert full control over deployed componentry and collaborate on development among testbed requirements the most interesting ones include providing a flexible infrastructure capable of emulating several multi node cloud environments and enabling the automatic deployment of cloudwave artifacts into such environment during integration phases this paper provides a high level description of the testbed design and implementation focusing on the technologies exploited to meet such requirements cloud computing containers continuous integration integration testbed openstack virtual infrastructure intent tests and release dependencies pragmatic recipes for source code integration 2015 ieee continuous integration of source code changes for example via pull request driven contribution channels has become standard in many software projects however the decision to integrate source code changes into a release is complex and has to be taken by a software manager in this work we identify a set of three pragmatic recipes plus variations to support the decision making of integrating code contributions into a release these recipes cover the isolation of source code changes contribution of test code and the linking of commits to issues we analyze the development history of 21 open source software projects to evaluate whether and to what extent those recipes are followed in open source projects the results of our analysis showed that open source projects largely follow recipes on a compliance level of 75 hence we conclude that the identified recipes plus variations can be seen as wide spread relevant best practices for source code integration evaluating the monolithic and the microservice architecture pattern to deploy web applications in the cloud 2015 ieee cloud computing provides new opportunities to deploy scalable application in an efficient way allowing enterprise applications to dynamically adjust their computing resources on demand in this paper we analyze and test the microservice architecture pattern used during the last years by large internet companies like amazon netflix and linkedin to deploy large applications in the cloud as a set of small services that can be developed tested deployed scaled operated and upgraded independently allowing these companies to gain agility reduce complexity and scale their applications in the cloud in a more efficient way we present a case study where an enterprise application was developed and deployed in the cloud using a monolithic approach and a microservice architecture using the play web framework we show the results of performance tests executed on both applications and we describe the benefits and challenges that existing enterprises can get and face when they implement microservices in their applications cloud computing continuous delivery iaas infrastructure as a services microservice architecture microservices paas platform as a service scalable applications service oriented architectures soa software architecture software engineering efficient regression testing based on test history an industrial evaluation 2015 ieee due to changes in the development practices at axis communications towards continuous integration faster regression testing feedback is needed the current automated regression test suite takes approximately seven hours to run which prevents developers from integrating code changes several times a day as preferred therefore we want to implement a highly selective yet accurate regression testing strategy traditional code coverage based techniques are not applicable due to the size and complexity of the software under test instead we decided to select tests based on regression test history we developed a tool the difference engine which parses and analyzes results from previous test runs and outputs regression test recommendations the difference engine correlates code and test cases at package level and recommends test cases that are strongly correlated to recently changed packages we evaluated the technique with respect to correctness precision recall and efficiency our results are promising on average the tool manages to identify 80 of the relevant tests while recommending only 4 of the test cases in the full regression test suite continuous integration industrial evaluation regression testing social testing a framework to support adoption of continuous delivery by small medium enterprises 2015 ieee continuous delivery cd represents a challenge for software test teams because of the continuous introduction of new features and feedback from customers we consider testing in a framework where users are encouraged to report defects through social or other incentive schemes using an enterprise dataset we address the question of which types of defects can best be found in the field allowing in house test resources to be refocused validation of these touch points ultimately interweaves both customer and business needs the proposed framework is one which can help small to medium software businesses which typically have limited resources to test and release software via cd oats an automated test system for openocd 2015 ieee this paper describes an industrial experience about the realization of an automated test system oats currently used during the openocd development process the experience has involved concepts about debuggers and software testing and the exploitation of continuous integration techniques in order to automatically build and test software releases in an industrial context continuous integration debugger intel galileo oats openocd software testing continuous architecture sustainable architecture in an agile and cloud centric world 2016 murat erder and pierre pureur published by elsevier inc all rights reserved continuous architecture provides a broad architectural perspective for continuous delivery and describes a new architectural approach that supports and enables it as the pace of innovation and software releases increases it departments are tasked to deliver value quickly and inexpensively to their business partners with a focus on getting software into end users hands faster the ultimate goal of daily software updates is in sight to allow teams to ensure that they can release every change to the system simply and efficiently this book presents an architectural approach to support modern application delivery methods and provide a broader architectural perspective taking architectural concerns into account when deploying agile or continuous delivery approaches the authors explain how to solve the challenges of implementing continuous delivery at the project and enterprise level and the impact on it processes including application testing software deployment and software architecture covering the application of enterprise and software architecture concepts to the agile and continuous delivery models explains how to create an architecture that can evolve with applications incorporates techniques including refactoring architectural analysis testing and feedback driven development provides insight into incorporating modern software development when structuring teams and organizations workshop preview of the 15th workshop on domain specific modeling dsm 2015 domain specific languages provide a viable and time tested solution for continuing to raise the level of abstraction and thus productivity beyond coding making systems development faster and easier when accompanied with suitable automated modeling tools and generators it delivers to the promises of continuous delivery and devops in domain specific modeling dsm the models are constructed using concepts that represent things in the application domain not concepts of a given programming language the modeling language follows the domain abstractions and semantics allowing developers to perceive themselves as working directly with domain concepts together with frameworks and platforms dsm can automate a large portion of software production this paper introduces domain specific modeling and describes the splash 2015 workshop to be held on 27 th of october in pittsburgh pa which is the 15 th anniversary of the event code generation domain specific languages metamodeling modeling languages synthesizing continuous deployment practices used in software development 2015 ieee continuous deployment speeds up the process of existing agile methods such as scrum and extreme programming xp through the automatic deployment of software changes to end users upon passing of automated tests continuous deployment has become an emerging software engineering process amongst numerous software companies such as facebook github netflix and rally software a systematic analysis of software practices used in continuous deployment can facilitate a better understanding of continuous deployment as a software engineering process such analysis can also help software practitioners in having a shared vocabulary of practices and in choosing the software practices that they can use to implement continuous deployment the goal of this paper is to aid software practitioners in implementing continuous deployment through a systematic analysis of software practices that are used by software companies we studied the continuous deployment practices of 19 software companies by performing a qualitative analysis of internet artifacts and by conducting follow up inquiries in total we found 11 software practices that are used by 19 software companies we also found that in terms of use eight of the 11 software practices are common across 14 software companies we observe that continuous deployment necessitates the consistent use of sound software engineering practices such as automated testing automated deployment and code review agile continuous delivery continuous deployment follow up inquiries industry practices internet artifacts multi perspective regression test prioritization for time constrained environments 2015 ieee test case prioritization techniques are widely used to enable reaching certain performance goals during regression testing faster a commonly used goal is high fault detection rate where test cases are ordered in a way that enables detecting faults faster however for optimal regression testing there is a need to take into account multiple performance indicators as considered by different project stakeholders in this paper we introduce a new optimal multi perspective approach for regression test case prioritization the approach is designed to optimize regression testing for faster fault detection integrating three different perspectives business perspective performance perspective and technical perspective the approach has been validated in regression testing of industrial mobile device systems developed in continuous integration the results show that our proposed framework efficiently prioritizes test cases for faster and more efficient regression fault detection maximizing the number of executed test cases with high failure frequency high failure impact and cross functional coverage compared to manual practice regression testing software testing test case prioritization model based performance evaluations in continuous delivery pipelines in order to increase the frequency of software releases and to improve their quality continuous integration ci systems became widely used in recent years unfortunately it is not easy to evaluate the performance of a software release in such systems one of the main reasons for this difficulty is often the lack of a test environment that is comparable to a production system performance models can help in this scenario by eliminating the need for a production sized environment building upon these capabilities of performance models we have introduced a model based performance change detection process for continuous delivery pipelines in a previous work this work presents an implementation of the process as plug in for the ci system jenkins continuous delivery palladio component model performance change detection performance evaluation vehicle level continuous integration in the automotive industry 2015 acm embedded systems are omnipresent in the modern world this naturally includes the automobile industry where electronic functions are becoming prevalent in the automotive domain embedded systems today are highly distributed systems and manufactured in great numbers and variance to ensure correct functionality systematic integration and testing on the system level is key in software engineering continuous integration has been used with great success in the automotive industry though system tests are still performed in a big bang integration style which makes tracing and fixing errors very expensive and time consuming thus i want to investigate whether and how continuous integration can be applied to the automotive industry on the system level doing so i present an adapted process of continuous integration including methods for test case specification and selection i will apply this process as a pilot project in a production environment at bmw and evaluate the effectiveness by gathering both qualitative and quantitative data from the gained experience i will derive possible improvements to the process for future implementations and requirements on test hardware used for continuous integration automotive continuous integration embedded testing quality and productivity outcomes relating to continuous integration in github 2015 acm software processes comprise many steps coding is followed by building integration testing system testing deployment operations among others software process integration and automation have been areas of key concern in software engineering ever since the pioneering work of osterweil market pressures for agility and open decentralized software development have provided additional pressures for progress in this area but do these innovations actually help projects given the numerous confounding factors that can influence project performance it can be a challenge to discern the effects of process integration and automation software project ecosystems such as github provide a new opportunity in this regard one can readily find large numbers of projects in various stages of process integration and automation and gather data on various influencing factors as well as productivity and quality outcomes in this paper we use large historical data on process metrics and outcomes in github projects to discern the effects of one specific innovation in process automation continuous integration our main finding is that continuous integration improves the productivity of project teams who can integrate more outside contributions without an observable diminishment in code quality continuous integration github pull requests poster improving cloud based continuous integration environments 2015 ieee we propose a novel technique for improving the efficiency of cloud based continuous integration development environments our technique identifies repetitive expensive and time consuming setup activities that are required to run integration and system tests in the cloud and consolidates them into preconfigured testing virtual machines such that the overall costs of test execution are minimized we create such testing machines by reconfiguring and opportunistically snapshotting the virtual machines already registered in the cloud cost flow flow constraints integration test linear programming snapshot system tests test driven development 3rd international workshop on release engineering releng 2015 2015 ieee release engineering deals with all activities inbetween regular development and actual usage of asoftware product by the end user i e integration build testexecution packaging and delivery of software although re search on this topic goes back for decades the increasing heterogeneity and variability of software products along withthe recent trend to reduce the release cycle to days or even hoursstarts to question some of the common beliefs and practicesof the field for example a project like mozilla firefox releasesevery 6 weeks generating updates for dozens of existing fire fox versions on 5 desktop 2 mobile and 3 mobile desktopplatforms each of which for more than 80 locales in this con text the international workshop on release engineering releng aims to provide a highly interactive forum for re searchers and practitioners to address the challenges of findsolutions for and share experiences with release engineering and to build connections between the various communities build system continuous delivery deployment integration packaging release engineering test execution architecting to ensure requirement relevance keynote twinpeaks workshop 2015 ieee research has shown that up to two thirds of features in software systems are hardly ever used or not even used at all this represents a colossal waste of r amp d resources and occurs across the industry on the other hand product management and many others work hard at interacting with customers building business cases and prioritizing requirements a fundamentally different approach to deciding what to build is required requirements should be treated as hypothesis throughout the development process and constant feedback from users and systems in the field should be collected to dynamically reprioritize and change requirements this requires architectural support beyond the current state of practice as continuous deployment split testing and data collection need to be an integral part of the architecture in this paper we present a brief overview of our research and industry collaboration to address this challenge data driven development requirements engineering software architecture wait for it determinants of pull request evaluation latency on github 2015 ieee the pull based development model enabled by git and popularised by collaborative coding platforms like bit bucket gitorius and github is widely used in distributed software teams while this model lowers the barrier to entry for potential contributors since anyone can submit pull requests to any repository it also increases the burden on integrators i e members of a project s core team responsible for evaluating the proposed changes and integrating them into the main development line who struggle to keep up with the volume of incoming pull requests in this paper we report on a quantitative study that tries to resolve which factors affect pull request evaluation latency in github using regression modeling on data extracted from a sample of github projects using the travis ci continuous integration service we find that latency is a complex issue requiring many independent variables to explain adequately automatic testing complexity theory computational modeling data mining software engineering software quality experiences virtualizing a large scale test platform for multimedia applications copyright 2015 icst testing is an essential part of software development and many test platforms exist to facilitate the process test systems are scarce because especially scalability tests require many computational resources in this paper we show that these limitations can be overcome by migrating the test infrastructure into cloud environments concrete virtualization concepts for large scale testbeds are discussed using the example of nessee an emulation environment for testing distributed audio video conferencing applications furthermore we describe how the cloud migration allows us to better integrate the test runs of the platform into the work ow of software development cloud migration continuous integration nessee network emulation software test enabling collaborative development in an open stack testbed the cloud wave use case 2015 ieee the cloud wave project embodies a challenging set of goals including the development of software components that have to be integrated into a single multi layer cloud stack based on open stack while cutting across the infrastructure as a service platform as a service and software as a service levels by targeting layer spanning issues such as feedback driven development and coordinated adaptation a devops ready test bed environment should allow project partners to exert full control over deployed compo entry and collaborate on development goals include providing a flexible infrastructure capable of emulating several multi node cloud environments as well as enabling the automatic deployment of cloud wave artifacts into such environment in order to simplify integration activities this paper takes a snapshot of the current situation with regards to the design and implementation of such a setup trying to gain relevant insight out of this effort cloud computing continuous integration devops integration testbed openstack virtual infrastructure proceedings 2nd international workshop on rapid continuous software engineering rcose 2015 the proceedings contain 8 papers the topics discussed include build waiting time in continuous integration an initial interdisciplinary literature review introducing continuous delivery of mobile apps in a corporate environment a case study continuous experimentation in the b2b domain a case study supporting continuous integration by code churn based test selection mashing up software issue management development and usage data continuous api design for software ecosystems towards post agile development practices through productized development infrastructure and rolling out a mission critical system in an agilish way reflections on building a large scale dependable information system for public sector software metrics in students software development projects copyright 2015 acm a software metric is the measurement of a particular characteristic of a software or the measurement of a software project and process in this paper we study how student project managers and team members observe metrics like working hours number of test cases requirement statuses regular reporting and number of code commits and which metrics they consider most important the metrics that the teams reacted most often were team s working hours and requirements statuses these metrics were also considered the most useful by the project managers we propose a method to calculate defect rate of reporting metrics and combine this defect rate with the way the project teams used the metrics it seems that when the teams were motivated to use metrics observed them and reacted on base of the metrics they also had less defects on reporting the metrics continuous integration project management project metrics software metrics student projects unit testing a reusable automated acceptance testing architecture for microservices in behavior driven development 2015 ieee cloud computing and mobile cloud computing are reshaping the way applications are being developed and deployed due to their unique needs such as massive scalability guaranteed fault tolerance near zero downtime etc and also daunting challenges such as security reliability continuous deployment and update capability microservices architecture where application is composed of a set of independently deployable services is increasingly becoming popular due to its capability to address most of these needs and challenges in recent years the behavior driven development bdd has become one of the most popular agile software development processes and frequently used in microservices development the key to success of bdd is the executable acceptance tests that describe the expected behavior of a feature and its acceptance criteria in the form of scenarios using simple and business people readable syntax the reusability auditability and maintainability become some of the major concerns when bdd test framework is applied for each microservice repository and no previous research addresses these concerns in this paper we present a reusable automated acceptance testing architecture to address all these concerns behavior driven development executable automated acceptance testing functional testing gherkin microservice a distributed test system architecture for open source iot software 2015 acm in this paper we discuss challenges that are specific to testing of open iot software systems the analysis reveals gaps compared to wireless sensor networks as well as embedded software we propose a testing framework which a supports continuous integration techniques b allows for the integration of project contributors to volunteer hardware and software resources to the test system and c can function as a permanent distributed plugtest for network interoperability testing the focus of this paper lies in open source iot development but many aspects are also applicable to closed source projects interoperability open source iot test system architecture shorter feedback loops by means of continuous deployment springer international publishing switzerland 2015 gathering early feedback on features is critical to many projects many agile methodologies define feedback loops often the feedback loop for completed features only closes after the iteration finishes in this paper we will introduce a way of closing this feedback loop early by means of continuous deployment this also lowers the deployment effort for developers increasing their happiness bdd continuous deployment continuous integration hot compatibility short feedback loops tdd testing zero downtime deployment introducing continuous delivery of mobile apps in a corporate environment a case study 2015 ieee software development is conducted in increasingly dynamic business environments organizations need the capability to develop release and learn from software in rapid parallel cycles the abilities to continuously deliver software to involve users and to collect and prioritize their feedback are necessary for software evolution in 2014 we introduced rugby an agile process model with workflows for continuous delivery and feedback management and evaluated it in university projects together with industrial clients based on rugby s release management workflow we identified the specific needs for project based organizations developing mobile applications varying characteristics and restrictions in projects teams in corporate environments impact both process and infrastructure we found that applicability and acceptance of continuous delivery in industry depend on its adaptability to address issues in industrial projects with respect to delivery process infrastructure neglected testing and continuity we extended rugby s workflow and made it tailor able eight projects at cap gemini a global provider of consulting technology and outsourcing services applied a tailored version of the workflow the evaluation of these projects shows anecdotal evidence that the application of the workflow significantly reduces the time required to build and deliver mobile applications in industrial projects while at the same time increasing the number of builds and internal deliveries for feedback agile methods configuration management continuous delivery continuous integration release management software evolution user feedback user involvement test orchestration a framework for continuous integration and continuous deployment 2015 ieee theenterprises follow agile software development methodology to because business requirements changes frequently inagile software developmentmethodology it is essential to continuously integrate the component into a main trunk of a project to test the new component of the system then test all the component of the project this happens frequently so it needs to streamlineprocesses to orchestrate the tests so it is difficult to manage the software development life cycle for those changes and maintain the software code quality to maintain the product quality it is essential to integrate the product component and need to deploy a product on pre production environment and test the product hence the need for continuous integration and continuous delivery process for software product the popularization of devops and cloud computing has revolutionized the software delivery process making it faster and affordable for business to release their software continuously hence enterprises need for reliable and predictable delivery process of software the objective of the paper is to design an effective framework for automated testing and deployment to help to automate the code analysis test selection test scheduling environment provisioning test execution results analysis and deployment pipeline test orchestration framework typically very complicated to develop such pipeline to make software reliable and bug free for environment provisioning can be provided through virtualization and cloud computing agile software development cloud computing continious deployment cd continuousintegration ci delivery pipeline devops test oracle test orchestration defining metrics for continuous delivery and deployment pipeline continuous delivery is a software development practice where new features are made available to end users as soon as they have been implemented and tested in such a setting a key technical piece of infrastructure is the development pipeline that consists of various tools and databases where features flow from development to deployment and then further to use metrics unlike those conventionally used in software development are needed to help define the performance of the development pipeline in this paper we address metrics that are suited for supporting continuous delivery and deployment through a descriptive and exploratory single case study on a project of a mid sized finnish software company solita plc as concrete data we use data from project lupapiste a web site for managing municipal authorizations and permissions agile measurements continuous deployment lean software development a practical approach to software continuous delivery focused on application lifecycle management copyright 2015 by ksi research inc and knowledge systems institute graduate school to deliver quality software continuously is a challenge for many organizations it is due to factors such as configuration management source code control peer review delivery planning audits compliance continuous integration testing deployments dependency management databases migration creation and management of testing and production environments traceability and data post fact integrated management process standardization among others to overcome these challenges this paper presents a continuous delivery process that promotes artefacts produced by developers in a managed fashion to production environment allowing bidirectional traceability between requirements and executables and integrating all activities of software development using the concepts of application lifecycle management as a result we obtained an ecosystem of tools and techniques put into production in order to support this process 1 application lifecycle management continuous delivery process quality transitioning towards continuous delivery in the b2b domain a case study springer international publishing switzerland 2015 delivering value to customers in real time requires companies to utilize real time deployment of software to expose features to users faster and to shorten the feedback loop this allows for faster reaction and helps to ensure that the development is focused on features providing real value continuous delivery is a development practice where the software functionality is deployed continuously to customer environment although this practice has been established in some domains such as b2c mobile software the b2b domain imposes specific challenges this article presents a case study that is conducted in a medium sized software company operating in the b2b domain the objective of this study is to analyze the challenges and benefits of continuous delivery in this domain the results suggest that technical challenges are only one part of the challenges a company encounters in this transition the company must also address challenges related to the customer and procedures the core challenges are caused by having multiple customers with diverse environments and unique properties whose business depends on the software product some customers require to perform manual acceptance testing while some are reluctant towards new versions by utilizing continuous delivery it is possible for the case company to shorten the feedback cycles increase the reliability of new versions and reduce the amount of resources required for deploying and testing new releases b2b case study continuous delivery continuous deployment development process continuous integration using cloud computing 2015 aisti nowadays systems can evolve quickly and to this growth is associated for example the addiction of new features or even the change of system perspective required by the stakeholders consequently these cause an increase in the number of developed tests run a large battery of tests sequentially can take hours however tests can run faster in a distributed environment with rapid availability of pre configured systems such as cloud computing this paper pretends to demonstrate some scenarios on the implementation of the practice continuous integration ci in information systems with software tests performed on cloud computing the main goal is explore the most of capacities that ci practice gives for automating the build and testing in a information system architecture build cloud computing continuous integration deployment software testing virtual to the near end using virtual platforms for continuous integration 2015 acm continuous integration ci is a hot topic in software development today ci is a critical enabler for agile methods and higher software development velocity and productivity however adopting the practice of continuous integration can be difficult especially when developing software for embedded systems practices such as agile and continuous integration are designed to enable engineers to constantly improve and update their products however these processes can break down without access to the target system a way to collaborate with other teams and team members and the ability to automate tests this paper outlines how simulation can enable teams to more effectively manage their integration and test practice using virtual platforms as a key part of the test setup and simulation as a key part of the test strategy agile continuous integration simulated hardware simulation simulator integration tlm transactionlevel simulation virtual platform a quality framework for software continuous integration 2015 the authors the research in this paper combines two main areas the first one is software quality and the second is the agile practices of continuous integration software quality has been an important topic since the beginning of the software development and production many researches have been conducted to discuss how the quality of software is a critical factor to its success 1–5 because software became an important part of almost every task in our daily life having high quality software that meets the users expectations is important 6 software integration is a stage in every software development lifecycle it is defined as the process to assemble the software components and produce a single product it has been shown that software integration and integration testing can make more than 40 of the overall project cost so it is important that they are done efficiently and easily to be able to manage the involved risks 7 a software engineering practice called continuous integration ci was introduced by kent beck and ron jeffries to mitigate the risks of software integration enhance its process and improve its quality 8 in this research the principles of ci are identified and applied to a case study in order to analyze their impact on the software development process quality factors agile continuous integration extreme programming iso software development software quality framework continuous delivery – from concept to product trade offs in effectiveness and efficiency springer international publishing switzerland 2015 the implementation and release of software products has progressed from a lengthy delivery cycle – the methodical sequential path of big bang waterfall product delivery – to the rapid iterative release cycle supported by agile practices recently continuous delivery has emerged as a strategy to accelerate product availability however only a systematic automation of the build test and deployment processes in concert with superbly coordinated teams of software practitioners and business partners makes make this possible however trade offs in the optimization of process may act to limit the innovativeness of product output this panel will discuss approaches challenges risks and strategies for using continuous delivery to competitive advantage agile automation delivery innovation processes waterfall applying continuous integration for reducing web applications development risks 2015 ieee in order to project resource manage and time control large or complex software system need be modularized software system is decomposed into subsystems functional modules and basis components finally all tested components have to integrate to be the complete system applying iid interactive incremental development mechanism agile development model becomes the practical method to reduce software project failure rate continuous integration ci is an iid implementation concept which can effectively reduce software development risk web app with high change characteristic is suitable to use agile development model as the development methodology the paper depth surveys ci operating environment and advantages introducing ci concept can make up the development change impacts of web app for this the paper proposes a web applications continuous integration procedure wacip to assist the system integration operating wacip with ci makes web app can be deployed quickly increase stakeholder communication frequency improve staff morale and effectively reduce web app development risks agile process continuous integration development risks integration test web app supporting continuous integration by code churn based test selection 2015 ieee continuous integration promises advantages in large scale software development by enabling software development organizations to deliver new functions faster however implementing continuous integration in large software development organizations is challenging because of organizational social and technical reasons one of the technical challenges is the ability to rapidly prioritize the test cases which can be executed quickly and trigger the most failures as early as possible in our research we propose and evaluate a method for selecting a suitable set of functional regression tests on system level the method is based on analysis of correlations between test case failures and source code changes and is evaluated by combining semi structured interviews and workshops with practitioners at ericsson and axis communications in sweden the results show that using measures of precision and recall the test cases can be prioritized the prioritization leads to finding an optimal test suite to execute before the integration 16th international conference on agile software development xp 2015 the proceedings contain 49 papers the special focus in this conference is on agile processes in software engineering and extreme programming the topics include an industrial case study on test cases as requirements key challenges in early stage software startups current practices and future needs functional size measures and effort estimation in agile development software development as an experiment system coordinating expertise outside agile teams a definition and perceived adoption impediments scaling kanban for software development in a multisite organization the two faces of uncertainty management ambidexterity towards introducing agile architecting in large companies agile and the global software leaders shorter feedback loops by means of continuous deployment applying agile and lean elements to accelerate innovation culture in a large organization organizational culture aspects of an agile transformation building learning organization through peer hands on support community and gamification learning from disaster and experience practical applications of the agile fluency model improving processes by integrating agile practices assurance case integration with an agile development method paradigm shift from large releases to continuous deployment of software agility in dynamic environments applying randori style kata and agile practices to an undergraduate level programming class continuous strategy process in the context of agile and lean software development and automatizing android unit and user interface testing extending software repository hosting to code review and testing we will describe how cern s services around issue tracking and version control have evolved and what the plans for the future are we will describe the services main design integration and structure giving special attention to the new requirements from the community of users in terms of collaboration and integration tools and how we address this challenge when defining new services based on gitlab for collaboration to replace our current gitolite service and code review and jenkins for continuous integration these new services complement the existing ones to create a new global development tool stack where each working group can place its particular development work flow journal of physics conference series the proceedings contain 68 papers the topics discussed include improved atlas hammercloud monitoring for local site administration scaling up atlas production system for the lhc run 2 and beyond project prodsys2 root 6 and beyond tobject c 14 and many cores implementing a domain specific language to configure and run lhcb continuous integration builds the gridpp dirac project implementation of a multi vo dirac service recent developments in user job management with ganga the atlas software installation system v2 a highly available system to install and validate grid and cloud sites via panda optimizing cms build infrastructure via apache mesos multicore job scheduling in the worldwide lhc computing grid extending software repository hosting to code review and testing monitoring system for the belle ii distributed computing geant4 computing performance benchmarking and monitoring and improvements to the user interface for lhcb s software continuous integration system ceur workshop proceedings the proceedings contain 21 papers the topics discussed include towards proactive management of technical debt by software metrics defining metrics for continuous delivery and deployment pipeline metrics for gerrit code review test suite evaluation using code coverage based metrics accounting testing in software cost estimation a case study of the current practice and impacts icdo integrated cloud based development tool for devops internal marketplace as a mechanism for promoting software reuse lean startup meets software product lines survival of the fittest or letting products bloom model based technology of software development in large requirements management in github with a lean approach and preventing malicious attacks by diversifying linux shell commands enabling devops collaboration and continuous delivery using diverse application environments springer international publishing switzerland 2015 aiming to provide the means for efficient collaboration between development and operations personnel the devops paradigm is backed by an increasingly growing collection of tools and reusable artifacts for application management continuous delivery pipelines are established based on these building blocks by implementing fully automated end to end application delivery processes which significantly shorten release cycles to reduce risks and costs as well as gaining a critical competitive advantage diverse application environments need to be managed along the pipeline such as development build test and production environments in this work we address the need for systematically specifying and maintaining diverse application environment topologies enriched with environment specific requirements in order to implement continuous delivery pipelines beside the representation of such requirements we focus on their systematic and collaborative resolution with respect to the individual needs of the involved application environments continuous delivery devops pipeline requirements topology continuous test generation on guava springer international publishing switzerland 2015 search based testing can be applied to automatically generate unit tests that achieve high levels of code coverage on object oriented classes however test generation takes time in particular if projects consist of many classes like in the case of the guava library to allow search based test generation to scale up and to integrate it better into software development continuous test generation applies test generation incrementally during continuous integration in this paper we report on the application of continuous test generation with evosuite at the ssbse 15 challenge on the guava library our results show that continuous test generation reduces the time spent on automated test generation by 96 while increasing code coverage by 13 9 on average automated unit test generation continuous integration continuous test generation search based testing continuously delivering your network 2015 ieee softwarization and cloudification of networks through software defined networking and network functions virtualisation promise a new degree of flexibility and agility by moving logic from device firmware into software applications and applying software development mechanisms innovation can be introduced with less effort concrete ways how to operate and orchestrate such systems are not yet defined the process of making changes to a controller software or a virtualized network function in a production network without the risk of network disruption is not covered by literature complexity of systems brings the risk of unexpected side effects and has so long been a show stopper for administrators applying changes to networking devices this paper suggests the adaption of the successful concept of continuous delivery into the software defined networking world test driven development and automatic acceptance tests demonstrate that the software engineering community already found ways to ensure that changes do not break applied to network engineering the adaption of continuous delivery can be seen as an enabler for risk free and frequent changes in production infrastructure through push button deployments models testing models in continuous integration of model driven development we propose to test software models with software models model driven software development proposes that software is to be constructed by developing high level models that directly execute or generate most of the code on the other hand test driven development proposes to produce tests that validate the functionality of the code this paper brings both together by using logic labeled finite state machines to deploy executable models of embedded systems and also to configure the corresponding tests the advantage is a much more efficient validation of the models with more robust and durable representations that ensure effective and efficient quality assurance throughout the development process saving the costly exercise of formal model checking until the system is complete enough to meet all requirements finite state machines model driven development real time systems software models test driven development validation and model checking sqa mashup a mashup framework for continuous integration 2014 elsevier b v all rights reserved context continuous integration ci has become an established best practice of modern software development its philosophy of regularly integrating the changes of individual developers with the master code base saves the entire development team from descending into integration hell a term coined in the field of extreme programming in practice ci is supported by automated tools to cope with this repeated integration of source code through automated builds and testing one of the main problems however is that relevant information about the quality and health of a software system is both scattered across those tools and across multiple views objective this paper introduces a quality awareness framework for ci data and its conceptional model used for the data integration and visualization the framework called sqa mashup makes use of the service based mashup paradigm and integrates information from the entire ci toolchain into a single service method the research approach followed in our work consists out of i a conceptional model for data integration and visualization ii a prototypical framework implementation based on tool requirements derived from literature and iii a controlled user study to evaluate its usefulness results the results of the controlled user study showed that sqa mashup s single point of access allows users to answer questions regarding the state of a system more quickly 57 and accurately 21 6 than with standalone ci tools conclusions the sqa mashup framework can serve as one stop shop for software quality data monitoring in a software development project it enables easy access to ci data which otherwise is not integrated but scattered across multiple ci tools our dynamic visualization approach allows for a tailoring of integrated ci data according to information needs of different stakeholders such as developers or testers continuous integration controlled user study information needs software quality tool integration using simulation to evaluate error detection strategies a case study of cloud based deployment processes 2015 elsevier inc all rights reserved the processes for deploying systems in cloud environments can be the basis for studying strategies for detecting and correcting errors committed during complex process execution these cloud based processes encompass diverse activities and entail complex interactions between cloud infrastructure application software tools and humans many of these processes such as those for making release decisions during continuous deployment and troubleshooting in system upgrades are highly error prone unlike the typically well tested deployed software systems these deployment processes are usually neither well understood nor well tested errors that occur during such processes may require time consuming troubleshooting undoing and redoing steps and problem fixing consequently these processes should ideally be guided by strategies for detecting errors that consider trade offs between efficiency and reliability this paper presents a framework for systematically exploring such trade offs to evaluate the framework and illustrate our approach we use two representative cloud deployment processes a continuous deployment process and a rolling upgrade process we augment an existing process modeling language to represent these processes and model errors that may occur during process execution we use a process aware discrete event simulator to evaluate strategies and empirically validate simulation results by comparing them to experiences in a production environment our evaluation demonstrates that our approach supports the study of how error handling strategies affect how much time is taken for task completion and error fixing deployment process process modeling simulation creating smart tests from recorded automated test cases springer international publishing switzerland 2015 in order to shorten time to market many software development teams have adopted continuous integration and automated testing although user interface test automation is a suitable solution for agile development the resulting frequently changing application gives rise to challenging task especially from the point of view of maintenance in this paper we present an approach bypassing those drawbacks through test recording enhanced by postprocessing that creates smart tests that are easy to maintain we have analyzed recorded tests and created step signatures that we then use to find a sequence of common steps based on this we identify reusable parts which we consequently optimize using algorithms that are introduced in this paper to remove inefficient duplications in tests automated testing common sequences reusable objects test recording test set optimization tackling exascale software challenges in molecular dynamics simulations with gromacs springer international publishing switzerland 2015 gromacs is a widely used package for biomolecular simulation and over the last two decades it has evolved from small scale efficiency to advanced heterogeneous acceleration and multi level parallelism targeting some of the largest supercomputers in the world here we describe some of the ways we have been able to realize this through the use of parallelization on all levels combined with a constant focus on absolute performance release 4 6 of gromacs uses simd acceleration on a wide range of architectures gpu offloading acceleration and both openmp and mpi parallelism within and between nodes respectively the recent work on acceleration made it necessary to revisit the fundamental algorithms of molecular simulation including the concept of neighborsearching and we discuss the present and future challenges we see for exascale simulation in particular a very fine grained task parallelism we also discuss the software management code peer review and continuous integration testing required for a project of this complexity testing robot controllers using constraint programming and continuous integration 2014 elsevier b v all rights reserved context testing complex industrial robots cirs requires testing several interacting control systems this is challenging especially for robots performing process intensive tasks such as painting or gluing since their dedicated process control systems can be loosely coupled with the robot s motion control objective current practices for validating cirs involve manual test case design and execution to reduce testing costs and improve quality assurance a trend is to automate the generation of test cases our work aims to define a cost effective automated testing technique to validate cir control systems in an industrial context method this paper reports on a methodology developed at abb robotics in collaboration with simula for the fully automated testing of cirs control systems our approach draws on continuous integration principles and well established constraint based testing techniques it is based on a novel constraintbased model for automatically generating test sequences where test sequences are both generated and executed as part of a continuous integration process results by performing a detailed analysis of experimental results over a simplified version of our constraint model we determine the most appropriate parameterization of the operational version of the constraint model this version is now being deployed at abb robotics s cir testing facilities and used on a permanent basis this paper presents the empirical results obtained when automatically generating test sequences for cirs at abb robotics in a real industrial setting the results show that our methodology is not only able to detect reintroduced known faults but also to spot completely new faults conclusion our empirical evaluation shows that constraint based testing is appropriate for automatically generating test sequences for cirs and can be faithfully deployed in an industrial context agile development constraint programming continuous integration distributed real time systems robotized painting software testing proceedings of the iasted international symposium on software engineering and applications sea 2015 the proceedings contain 15 papers the topics discussed include performance analysis for a cloud computing application access control mechanisms in big data processing iteractive 3d sound generation visualization toolkit for linux kernel tracing and performance verification spider mscontrol a tool for support to the measurement process using gqim approach an improved implementation of parallel selection on gpus vulnerability based information security risk assessment using attack tree design and implementation of an integrated information system for korean women s education programs and models testing models in continuous integration of model driven development a scalable big data test framework 2015 ieee this paper identifies three problems when testing software that uses hadoop based big data techniques first processing big data takes a long time second big data is transferred and transformed among many services do we need to validate the data at every transition point third how should we validate the transferred and transformed data we are developing a novel big data test framework to address these problems the test framework generates a small and representative data set from an original large data set using input space partition testing using this data set for development and testing would not hinder the continuous integration and delivery when using agile processes the test framework also accesses and validates data at various transition points when data is transferred and transformed automated verification and validation methods for transmission control software copyright 2015 sae international with the increasing popularity of seamless gear changing and smooth driving experience along with the need for high fuel efficiency transmission system development has rapidly increased in complexity so too has transmission control software while quality requirements are high and time to market is short as a result extensive testing and documentation along with quick and efficient development methods are required fev responds to these challenges by developing and integrating a transmission software product line with an automated verification and validation process according to the concept of continuous integration ci hence the following paper outlines a software architecture called persist where complexity is reduced by a modular architecture approach additionally modularity enables testability and tracking of quality defects to their root cause to tap this potential the software is tested documented and built every night with a high degree of automation in order to uncover quality risks earlier in development the effect of that approach is shown by examples from a 7 gear series transmission project continuous testing and monitoring leads to a steadily increasing quality level while the project plan fulfillment can be tracked on a daily base it is shown that the combination of modular architecture and automated verification and validation of software helps improve the overall quality and process in the increasing complexity of the transmission system research preview supporting requirements feedback flows in iterative system development springer international publishing switzerland 2015 context motivation today embedded systems are increasingly interconnected and operate in a rich context of systems and internet based services iterative development is one strategy of developing such cyber physical systems it enables exploration of early prototypes of a feature in the context of its intended use and collecting telemetric data from test runs this is a rich data source that can be leveraged for learning behavioural requirements for a feature question problem however we found practitioners struggling with deriving requirements for the next iteration from such test runs in a systematic and repeatable way principal ideas results we allow test drivers to add markers when the system behaves unexpectedly by introducing a dedicated feedback tool preliminary evaluation shows that these markers lead to better feedback to the development team and indicates a positive impact on the development cycle contribution we give an example report experiences and discuss industrial implications of feedback systems and in situ requirements gathering in iterative system development feedback system in situ requirements requirements and continuous integration model based advancements at lockheed martin space systems company 2015 american institute of aeronautics and astronautics inc aiaa all rigts reserved lockheed martin space systems company lmssc has been using model based tools with autogeneration of flight code for a decade we are aggressively driving insertion of model based capabilities into all engineering and production disciplines using our digital tapestry which links all stages of manufacturing – from initial concept and design to production and qualification our space vehicle integration lab svil has been the driving force for the embedded software migration to model based technologies with insertions into nearly every stage in the software life cycle from concept and requirements definition to program simulation and qualification for embedded software we have embraced the mathworks simulink model based development tools and developed a framework in which to control the transformation of both our products and our workforce to these techniques using a consistent approach in many cases the lmssc has developed our own add ons to the cots tools available to ensure compatibility in our processes and to fill in gaps in the cots tool capabilities in that time the cost to develop software using model based tools dropped 39 varieties of capabilities contributed to the reduction and were described in detail along with their contribution to the savings lmssc is pursuing a concept called digital tapestry digital tapestry leverages the strengths of model based development to document elaborate and communicate the aspects of a system for all program stakeholders in a digital fashion with detailed sysml models the digital tapestry is enabling a capability called configure to order using the configure to order capability expert engineers make decisions about mission capabilities and system components which when combined with the detailed sysml models rapidly and automatically elaborates the impacts to other subsystems and system components once the system impacts for a given change are reported the new systems engineering products can be rapidly communicated by a set of tools developed to generate matlab and simulink code fragments from the sysml models the activity models internal block diagrams and other interface specification models from sysml can be automatically converted to implemented simulink and matlab artifacts for incorporation in the system implementation and round tripped to sysml when needed lmssc has seen the use of mathworks simulink increase dramatically in the last 7 years many adopting programs made rapid progress and developed novel and productive ways to use simulink in software development and systems analysis tasks however while collaboration helped limited standardization of the simulink development among many groups even in the same programs led to simulink models that were difficult to share and re use seeing an opportunity to improve future performance lmssc embarked on the development of the coresim initiative using the best capabilities tools and practices from across lmssc the coresim initiative developed a set of simulink development guidelines and tools that are dramatically improving the productivity of simulink development teams in lmssc in addition to development guidelines and process expectations coresim also includes a unit test framework capable of continuous integration an analysis framework to allow analysts to rapidly assess the performance of a simulink algorithm and a repository of simulink models built to coresim standards coresim use within lmssc is expanding as more programs adopt and improve the products over the next 5 years lmssc expects to save 30 of fsw algorithm development costs for programs adopting the coresim framework techniques for improving regression testing in continuous integration development environments copyright 2014 acm in continuous integration development environments software engineers frequently integrate new or changed code with the mainline codebase this can reduce the amount of code rework that is needed as systems evolve and speed up development time while continuous integration processes traditionally require that extensive testing be performed following the actual submission of code to the codebase it is also important to ensure that enough testing is performed prior to code submission to avoid breaking builds and delaying the fast feedback that makes continuous integration desirable in this work we present algorithms that make continuous integration processes more cost effective in an initial presubmit phase of testing developers specify modules to be tested and we use regression test selection techniques to select a subset of the test suites for those modules that render that phase more costeffective in a subsequent post submit phase of testing where dependent modules as well as changed modules are tested we use test case prioritization techniques to ensure that failures are reported more quickly in both cases the techniques we utilize are novel involving algorithms that are relatively inexpensive and do not rely on code coverage information two requirements for conducting testing cost effectively in this context to evaluate our approach we conducted an empirical study on a large data set from google that we make publicly available the results of our study show that our selection and prioritization techniques can each lead to costeffectiveness improvements in the continuous integration process continuous integration regression test selection regression testing test case prioritization climbing the stairway to heaven evolving from agile development to continuous deployment of software 2014 springer international publishing switzerland all rights reserved software intensive systems companies need to evolve their practices continuously in response to competitive pressures based on a conceptual model presented as the stairway to heaven we present the transition process when moving from traditional development towards continuous deployment of software our research confirms that the transition towards agile development requires a careful introduction of agile practices into the organization a shift to small development teams and a focus on features rather than components the transition towards continuous integration requires an automated test suite a main branch to which code is continually delivered and a modularized architecture the move towards continuous deployment requires internal and external stakeholders to be fully involved and a proactive customer with whom to explore the concept finally the transition towards r d as an innovation system requires careful ecosystem management in order to align internal business strategies with the dynamics of a competitive business ecosystem characteristic for all transitions is the critical alignment of internal and external processes in order to fully maximize the benefits as provided by the business ecosystem of which a company is part the civit model in a nutshell visualizing testing activities to support continuous integration 2014 springer international publishing switzerland all rights reserved nowadays innovations in many products ranging from customer electronics to high end industry electric electronic components are driven by software thus new or extended features to software and mechatronic products can be realized and deployed to the market much faster while the use of software enables an enormous flexibility mastering the ever growing complexity of the resulting products to meet the quality goals required for the market is getting more and more challenging continuous development combined with continuous testing is a successful method that actively incorporates the customer to get feedback for the feature to be deployed early and thus product owners developers and testers can collaborate more effectively to meet the market s needs from literature setting up such an agile development process is clear the individual situation in terms of organization processes and development and test tooling however is depending on the company many of the aforementioned aspects have grown over the years and cannot be easily changed in this article we present the civit model which allows companies to get an explicit understanding and overview of their current testing and integration activities with civit s intuitive representation of the current status companies are able to identify bottlenecks and derive actions points to evolve their processes methods and development and test tooling towards a more agile and continuous deployment oriented organization thus they will be able to develop integrate evaluate and deploy new features faster to the end user hence strengthening their own market position scaling agile mechatronics an industrial case study 2014 springer international publishing switzerland all rights reserved the automotive industry is currently in a state of rapid change the traditional mechanical industry has forced by electronic revolution and global threats of climate change transformed into a computerized electromechanical industry a hybrid or electric car of 2013 can have in the order of 100 electronic control units running gigabytes of code working together in a complex network within the car as well as being connected to networks in the world outside this exponential increase of software has posed new challenges for the r d organizations in many cases the commonly used method of requirement engineering towards external suppliers in a waterfall process has shown to be unmanageable part of the solution has been to introduce more in house software development and the new standardized platform for embedded software autosar during the past few years volvo cars has focused on techniques and processes for continuous integration of embedded software for active safety body functions and motor and hybrid technology the feedback times for ecu system test have decreased from months to in the best cases hours domain specific languages dsl for both software and physical models have been used to great extent when developing in house embedded software at volvo cars the main reasons are the close connection with mechatronic systems motors powertrain servos etc the advantage of having domain experts not necessarily software experts developing control software and the facilitated reuse of algorithms model driven engineering also provides a method for agile development and early learning in projects where hardware and mechanics usually are available only late model based testing of the software is performed both as pure simulation mil and in hardware in the loop hil rigs before it is deployed in real cars this testing is currently being automated for several rigs as part of the continuous integration strategy the progress is however not without challenges details of the work split with tier 1 suppliers using the young autosar standard and the efficiency of autosar code are still open problems another challenge is to manage the complex model framework required for virtual verification when applied on system level and numerous dsls have to be executed together reviser efficiently updating ide ifds based data flow analyses in response to incremental program changes 2014 acm most application code evolves incrementally and especially so when being maintained after the applications have been deployed yet most data flow analyses do not take advantage of this fact instead they require clients to recompute the entire analysis even if little code has changeda time consuming undertaking especially with large libraries or when running static analyses often e g on a continuous integration server in this work we present reviser a novel approach for automatically and efficiently updating inter procedural dataflow analysis results in response to incremental program changes reviser follows a clear and propagate philosophy aiming at clearing and recomputing analysis information only where required thereby greatly reducing the required computational effort the reviser algorithm is formulated as an extension to the ide framework for inter procedural finite distributed environment problems and automatically updates arbitrary ide based analyses we have implemented reviser as an open source extension to the heros ifds ide solver and the soot program analysis framework an evaluation of reviser on various client analyses and target programs shows performance gains of up to 80 in comparison to a full recomputation the experiments also show reviser to compute the same results as a full recomputation on all instances tested ide ifds incremental analysis inter procedural static analysis ow sensitive analysis open source and standards the role of open source in the dialogue between research and standardization 2014 ieee open source communities have emerged as increasingly popular structure for the rapid introduction of software standards the telecom industry is increasingly based on deployment and operation of software technologies for infrastructure services not just enterprise support functions as open source communities are increasingly enabling new innovation ecosystems for communications services they are expected to take on a key role in the process of developing telecom industry standards this fundamental transition is being driven by a technology evolution that will raise organizational legal and architectural challenges to the telecommunications industry while the challenges have to be carefully considered the business agility and operational efficiency potential of open source adoption is expected to mitigate the difficulty of adopting this new model for designing developing testing and deploying network solutions business agility collaboration continuous integration devops industry alliance innovation open source community standards continuous software engineering and beyond trends and challenges throughout its short history software development has been characterized by harmful disconnects between important activities e g planning development and implementation the problem is further exacerbated by the episodic and infrequent performance of activities such as planning testing integration and releases several emerging phenomena reect attempts to address these problems for example the enterprise agile concept has emerged as a recognition that the benefits of agile software development will be suboptimal if not complemented by an agile approach in related organizational function such as finance and hr continuous integration is a practice which has emerged to eliminate discontinuities between development and deployment in a similar vein the recent emphasis on devops recognizes that the integration between software development and its operational deployment needs to be a continuous one we argue a similar continuity is required between business strategy and development bizdev being the term we coin for this these disconnects are even more problematic given the need for reliability and resilience in the complex and data intensive systems being developed today drawing on the lean concept of ow we identify a number of continuous activities which are important for software development in today s context these activities include continuous planning continuous integration continuous deployment continuous delivery continuous verification continuous testing continuous compliance continuous security continuous use continuous trust continuous run time monitoring continuous improvement both process and product all underpinned by continuous innovation we use the umbrella term continuous ∗ continuous star to identify this family of continuous activities bizdev continuous software engineering continuous star devops towards agile and beyond an empirical account on the challenges involved when advancing software development practices during the last decade the vast majority of software companies have adopted agile development practices now companies are looking to move beyond agile and further advance their practices in this paper we report on the experiences of a company in the embedded systems domain that is adopting agile practices with the intention to move beyond agile and towards continuous deployment of software based on case study research involving group interviews and a web based survey we identify challenges in relation to 1 the adoption of agile practices 2 testing practices 3 continuous deployment and 4 customer validation springer international publishing switzerland 2014 agile practices beyond agile challenges continuous deployment nmotion a continuous integration system for nasa software this paper describes the architecture and implementation of a continuous integration system for nasa independent verification and validation iv v program s independent test capability itc team developed spacecraft simulation environments this system is composed of a repository automated build server automated unit tests integrated issue tracking with one click deployment scenarios supporting multiple targets and platforms this presentation will describe a use case whereas test scripts were integrated into the james webb space telescope integrated simulation and test jist simulator and executed in a completely automated fashion to perform v v of the flight software fsw additional use cases and plans are discussed for incorporating the gsfc core flight system cfs software into the itc continuous integration system automation continuous integration simulation testing v amp v implementation of continuous integration and automated testing in software development of smart grid scheduling support system 2014 ieee when smart grid scheduling support system d5000 system was developed the development team ran across tough issue that the system is difficult for integration and becomes unstable after integration due to the complexity to resolve the problem the author made research and introduced continuous integration and automated testing approach on d5000 system development this paper provides the concept and advantages of continuous integration and analyzes the necessity for continuous integration it also describes automated testing for quality improvement with code static analytics automated unit testing and automated function testing this paper gives a case study to deploy continuous integration and automated testing on d5000 system development which resolves quality and integration issues effectively and efficiently automated testing continuous integration smart grid visualizing testing activities to support continuous integration a multiple case study while efficient testing arrangements are the key for software companies that are striving for continuous integration most companies struggle with arranging these highly complex and interconnected testing activities there is often a lack of an adequate overview of companies end to end testing activities which tend to lead to problems such as double work slow feedback loops too many issues found during post development disconnected organizations and unpredictable release schedules we report from a multiplecase study in which we explore current testing arrangements at five different software development sites the outcome of the study is a visualization technique of the testing activities involved from unit and component level to product and release level that support the identification of improvement areas this model for visualizing the end to end testing activities for a system has been used to visualize these five cases and has been validated empirically springer international publishing switzerland 2014 and visualization continuous integration software testing continuous test generation enhancing continuous integration with automated test generation 2014 acm in object oriented software development automated unit test generation tools typically target one class at a time a class however is usually part of a software project consisting of more than one class and these are subject to changes over time this context of a class offers significant potential to improve test generation for individual classes in this paper we introduce continuous test generation ctg which includes automated unit test generation during continuous integration i e infrastructure that regularly builds and tests software projects ctg offers several benefits first it answers the question of how much time to spend on each class in a project second it helps to decide in which order to test them finally it answers the question of which classes should be subjected to test generation in the first place we have implemented ctg using the evosuite unit test generation tool and performed experiments using eight of the most popular open source projects available on github ten randomly selected projects from the sf100 corpus and five industrial projects our experiments demonstrate improvements of up to 58 for branch coverage and up to 69 for thrown undeclared exceptions while reducing the time spent on test generation by up to 83 automated test generation continuous integration continuous testing unit testing towards automated execution and evaluation of simulated prototype hri experiments autonomous robots are highly relevant targets for interaction studies but can exhibit behavioral variability that confounds experimental validity currently testing on real systems is the only means to prevent this but remains very labour intensive and often happens too late to improve this situation we are working towards early testing by means of partial simulation with automated assessment and based upon continuous software integration to prevent regressions we will introduce the concept and describe a proof of concept that demonstrates fast feedback and coherent experiment results across repeated trials continuous integration human robot interaction simulation system evaluation testing blueprint for software engineering in technology enhanced learning projects many projects in technology enhanced learning tel aim to develop novel approaches models and systems by field testing new ideas with software prototypes a major challenge is that project consortia need to establish a distributed typically understaffed developer community that has to align its development efforts with needs from application partners and input from research partners tackling this challenge this paper provides a blueprint for software engineering process and infrastructure which was distilled from successful practices in recent tel projects we present a composition of freely available instruments that support open distributed software engineering practices using continuous integration processes the blueprint considers the full development cycle including requirements engineering software architecture issue tracking build management and social aspects of developer community building in tel projects some lessons learned are provided particularly related to open source commitment innovation as a social process and the essential role of time we aim to make software development in tel fit for horizon 2020 with processes and instruments that can be readily adopted for planning and executing future projects 2014 springer international publishing switzerland structuring simulink models for verification and reuse copyright 2014 acm model based development mbd tool suites such as simulink and stateflow offer powerful tools for design development and analysis of models these models can be used for several purposes for code generation for prototyping as descriptions of an environment plant that will be controlled by software as oracles for a testing process and many other aspects of software development in addition a goal of model based development is to develop reusable models that can be easily managed in a version controlled continuous integration process although significant guidance exists for proper structuring of source code for these purposes considerably less guidance exists for mbd approaches in this paper we discuss structuring issues in constructing models to support use and reuse of models for design and verification in critical software development projects we illustrate our approach using a generic patient controlled analgesia infusion pump gpca a medical cyber physical system model based development simulink design ver ifier verification an android based approach for automatic unit test unit test is the first stage in the v model and the foundation of software test by means of integrating android junit a testing tool into a continuous integration platform named jenkins this paper proposes a fully automated unit test approach the approach can generate a visual test report for android projects this achievement can significantly increase the efficiency of multiple unit tests and thus enable engineers to deliver their software products to the end users as soon as possible android automated jenkins junit unit test supporting continuous integration by mashing up software quality information continuous integration ci has become an established best practice of modern software development its philosophy of regularly integrating the changes of individual developers with the mainline code base saves the entire development team from descending into integration hell a term coined in the field of extreme programming in practice ci is supported by automated tools to cope with this repeated integration of source code through automated builds testing and deployments currently available products for example jenkins ci sonarqube or github allow for the implementation of a seamless ci process one of the main problems however is that relevant information about the quality and health of a software system is both scattered across those tools and across multiple views we address this challenging problem by raising awareness of quality aspects and tailor this information to particular stakeholders such as developers or testers for that we present a quality awareness framework and platform called sqa mashup it makes use of the service based mashup paradigm and integrates information from the entire ci toolchain in a single service to evaluate its usefulness we conducted a user study it showed that sqa mashup s single point of access allows to answer questions regarding the state of a system more quickly and accurately than standalone ci tools 2014 ieee automated testing of industrial automation software practical receipts and lessons learned 2014 acm the share of software in industrial automation systems is steadily increasing thus software quality issues become a critical concern for many automation projects which require effective software quality assurance measures in this paper we describe an architecture for automated testing of software applications part of industrial automation systems we focus on testing programmable logic controller plc software for machineries which can be achieved by using test automation frameworks derived from software development the paper provides a collection of practical receipts describing how different approaches from software engineering best practices can be applied in the context of industrial automation systems a combination of these receipts has been used for automating software tests in an industrial automation project in this project more than 200 tests have been developed to assure the quality of critical plc components the tests are an integral part of the project s automated build and continuous integration system every software change triggers an automated build and test process to ensure that no defects or unintended side effects have been introduced the feedback from the project confirmed the applicability and usefulness of the outlined testing approach in context of industry automation the paper concludes with providing recommendations and sharing additional lessons we have learned from automated testing of plc software iec 61131 3 plc software software testing test automation ubuild automated testing and performance evaluation of embedded linux systems this paper describes ubuild a novel tool designed to support the automated execution of repeatable and controlled tests of embedded linux systems this is useful for continuous integration purposes and to evaluate the impact of various design and implementation options on the system s performance ubuild allows the designer to build the embedded system image from scratch by compiling all the needed software from the source code and by even building the needed cross compilation toolchain if required it provides deterministic control on the configuration options used to build the cross compilation toolchain the linux kernel the system libraries and all the programs in this way the effects of each option can be tested and evaluated in isolation 2014 springer international publishing switzerland continuous testing embedded systems performance evaluation evolution of software only simulation at nasa iv amp v software only simulations are an emerging but quickly developing field of study throughout nasa the nasa independent verification validation iv v independent test capability itc team has been rapidly building a collection of simulators for a wide range of nasa missions itc specializes in full end to end simulations that enable developers v v personnel and operators to test as you fly in four years the team has delivered a wide variety of spacecraft simulations ranging from low complexity science missions such as the global precipitation management gpm satellite and the deep space climate observatory dscovr to the extremely complex missions such as the james webb space telescope jwst and space launch system sls this paper describes the evolution of itc s technologies and processes that have been utilized to design implement and deploy end to end simulation environments for various nasa missions a comparison of mission simulators is discussed with focus on technology and lessons learned in complexity hardware modeling and continuous integration the paper also describes the methods for executing the mission s unmodified flight software binaries not cross compiled for verification and validation activities practical experience with test driven development during commissioning of the multi star ao system argos commissioning time for an instrument at an observatory is precious especially the night time whenever astronomers come up with a software feature request or point out a software defect the software engineers have the task to find a solution and implement it as fast as possible in this project phase the software engineers work under time pressure and stress to deliver a functional instrument control software ics the shortness of development time during commissioning is a constraint for software engineering teams and applies to the argos project as well the goal of the argos advanced rayleigh guided ground layer adaptive optics system project is the upgrade of the large binocular telescope lbt with an adaptive optics ao system consisting of six rayleigh laser guide stars and wavefront sensors for developing the ics we used the technique test driven development tdd whose main rule demands that the programmer writes test code before production code thereby tdd can yield a software system that grows without defects and eases maintenance having applied tdd in a calm and relaxed environment like office and laboratory the argos team has profited from the benefits of tdd before the commissioning we were worried that the time pressure in that tough project phase would force us to drop tdd because we would spend more time writing test code than it would be worth despite this concern at the beginning we could keep tdd most of the time also in this project phase this report describes the practical application and performance of tdd including its benefits limitations and problems during the argos commissioning furthermore it covers our experience with pair programming and continuous integration at the telescope 2014 spie adaptive optics commissioning continuous integration distributed software system instrument control software lbt pair programming software engineering tdd test driven development testing testing robotized paint system using constraint programming an industrial case study 2014 ifip international federation for information processing advanced industrial robots are composed of several independent control systems particularly robots that perform process intensive tasks such as painting gluing and sealing have dedicated process control systems that are more or less loosely coupled with the motion control system validating software for such robotic systems is challenging a major reason for this is that testing the software for such systems requires access to physical systems to test many of their characteristics in this paper we present a method developed at abb robotics in collaboration with simula for automated testing of such process control systems our approach draws on previous work from continuous integration and the use of well established constraint based testing and optimization techniques we present a constraint based model for automatically generating test sequences where we both generate and execute the tests as part of a continuous integration process we also present results from a pilot installation at abb robotic where abb s integrated process control system has been tested the results show that the model is both able to discover completely new errors and to detect old reintroduced errors from this experience we report on lessons learned from implementing an automatic test generation and execution process for a distributed control system for industrial robots 15th international conference on agile software development xp 2014 the proceedings contain 27 papers the special focus in this conference is on agile software development the topics include ux design in agile agile principles in the embedded system development agile software development in practice technical dependency challenges in large scale agile software development contracting in agile software projects why we need a granularity concept for user stories self organized learning in software factory using agile methods to implement a laboratory for software product quality evaluation software metrics in agile software visualizing testing activities to support continuous integration comparing a hybrid testing process with scripted and exploratory testing examining the structure of lean and agile values among software developers agile methodologies in web programming the theory and practice of randori coding dojos locating expertise in agile software development projects social contracts simple rules and self organization realizing agile software enterprise transformations by team performance development a test driven approach for model based development of powertrain functions a global agile architecture design approach an experience report from teams at cisco and an empirical account on the challenges involved when advancing software development practices quality assurance for open source software configuration management commonly used open source configuration management systems such as puppet chef and cfengine allow for system configurations to be expressed as scripts a number of quality issues that may arise when executing these scripts are identified an automated quality assurance service is proposed that identifies the presence of these issues by automatically executing scripts across a range of environments test results are automatically published to a format capable of being consumed by script catalogues and social coding sites this would serve as an independent signal of script trustworthiness and quality to script consumers and would allow developers to be made quickly aware of quality issues as a result potential consumers of scripts can be assured that a script is likely to work when applied to their particular environment script developers can be notified of compatibility issues and take steps to address them 2013 ieee assurance automated configuration automated deployment configuration management continuous integration service orchestration design for arinc 653 conformance architecting independent validation of a safety critical rtos 2014 ieee the arinc 653 specification not only provides a standard application programming interface for an rtos but also specifies how to validate an arinc 653 based rtos arinc 653 part 3 conformity test specification specifies test procedures for validation of arinc 653 part 1 required services specification existing arinc 653 verification suites and packs do not provide platform independency maintainability gained by an open source framework a reliable communication protocol and automated testing principles at the same time this paper introduces a brand new validation suite gvt a653 which is platform independent and ensures conformance to arinc 653 specification the suite is based on tetware trademark of opengroup and builds upon continuous integration ci principles it also brings flexibility by providing various protocols including avionics full duplex switched ethernet afdx network that provides deterministic communication required in avionics applications the verification and validation of a large scale system equipment taas as an example this study proposed testing inspecting as a service taas for computing equipment and aimed to test objects in the context of combining software and hardware we developed a dynamic feedback framework to enhance both the efficiency and the quality of the testing service the framework consists of inner and outer feedback mechanisms in which the updated industrial standards and client requirements are incorporated allowing the testing to be modified accordingly a detailed description of the testing procedures and industrial metrology are provided in the study the improvement gained from taas are demonstrated and discussed the results show that by using infrastructure as a service iaas the physical hardware improves in quality due to the fact that the quality was verified by automated optical inspection aoi taas or cloud container data center cdc taas etc moreover the os in platform as a service paas can be ensured because the resources of the physical virtual data in the iaas were tested by the os taas as for the application app taas the stability and performance of the os system can be maintained since the applications of the software on the paas have been tested 2014 ieee automated optical inspection aoi industrial metrology industrial standards system continuous integration test scit testing inspecting as a service taas 28th space simulation conference extreme environments pushing the boundaries the proceedings contain 28 papers the topics discussed include overview of a closed loop gn2 system retrofit at david florida laboratory design of a spacecraft integration and test facility at the johns hopkins university applied physics laboratory optimizing 3 component force sensor installation for satellite force limited vibration testing review of v994 shaker system performance comparing factory acceptance test and final acceptance test results investigation of input and response of pyrotechnic shock tests using vibration exciter and mechanical impact test apparatus statistical tolerance bounds overview and applications to spacecraft and launch vehicle dynamic environments outgassing modeling for solar probe plus solar array degradation in a high fluence high temperature environment nmotion a continuous integration system for nasa software and discrepancies caused by common industry standard practices part 1 environment specification measuring the gain of automatic debug 2013 ieee the purpose of regression testing is to quickly catch any deterioration in quality of a product under development the more frequently tests are run the earlier new issues can be detected resulting in a larger burden for the engineers who need to manually debug all test failures many of which are failing due to the same underlying bug however there are software tools that automatically debug the test failures back to the faulty change and notifies the engineer who made this change by analyzing data from a real commercial asic project we aimed to measure whether bugs are fixed faster when using automatic debug tools compared to manual debugging all bugs in an asic development project were analyzed over a period of 3 months in order to determine the time it took the bug to be fixed and to compare the results from both automatic and manual debug by measuring the time from when the bug report was sent out by the automatic debug tool until the bug was fixed we can show that bugs are fixed 4 times faster with automatic debug enabled bug fixing time was on average 5 7 hours with automatic debug and 23 0 hours for manual debug the result was achieved by comparing bugs that were automatically debugged to those issues that could not be debugged by the tool because those issues were outside the defined scope of the device under test such issues are still reported by the automatic debug tool but marked as requiring manual debug and is consequently a good point of comparison a 4 times quicker bug fixing process is significant and can ultimately contribute to a shortening of a development project as the bug turnaround time is one of the key aspects defining the length of a project especially in the later phase just before release automatic debug continuous integration regression testing system on chip verification investigating the applicability of agility assessment surveys a case study 2014 elsevier inc all rights reserved context agile software development has become popular in the past decade without being sufficiently defined the agile principles can be instantiated differently which creates different perceptions of agility this has resulted in several frameworks being presented in the research literature to evaluate the level of agility however the evidence of their actual use in practice is limited objective the objective is to identify online surveys that assess profile agility in practice and to evaluate the surveys in an industrial setting method the agility assessment surveys were identified through searching the web then they were explored and two surveys were identified as most promising for our objective the selected surveys were evaluated in a case study with three agile teams in a software consultancy company results each team and its customer separately judged the team s agility this outcome was compared with the two survey results in focus group meetings and finally one of the surveys was agreed to provide a more holistic assessment of agility conclusions different surveys may judge agility differently which supports the viewpoint that agile is not well defined therefore practitioners must decide what agile means to them and select the assessment survey that matches their definition abbreviations ci continuous integration gsd global software development pp pair programming rq research question s1 survey 1 s2 survey 2 tdd test driven development tr trouble report t1 team 1 t2 team 2 t3 team 3 xp extreme programming continuous integration for web based software infrastructures lessons learned on the webinos project testing web based software infrastructures is challenging the need to interact with different services running on different devices with different expectations for security and privacy contributes not only to the complexity of the infrastructure but also to the approaches necessary to test it moreover as large scale systems such infrastructures may be developed by distributed teams simultaneously making changes to apis and critical components that implement them in this paper we describe our experiences testing one such infrastructure the webinos software platform and the lessons learned tackling the challenges faced while ultimately these challenges were impossible to overcome this paper explores the techniques that worked most effectively and makes recommendations for developers and teams in similar situations in particular our experiences with continuous integration and automated testing processes are described and analysed 2013 springer international publishing switzerland automated testing continuous integration functional testing web based software infrastructure test case prioritization for continuous regression testing an industrial case study regression testing in continuous integration environment is bounded by tight time constraints to satisfy time constraints and achieve testing goals test cases must be efficiently ordered in execution prioritization techniques are commonly used to order test cases to reflect their importance according to one or more criteria reduced time to test or high fault detection rate are such important criteria in this paper we present a case study of a test prioritization approach rocket prioritization for continuous regression testing to improve the efficiency of continuous regression testing of industrial video conferencing software rocket orders test cases based on historical failure data test execution time and domain specific heuristics it uses a weighted function to compute test priority the weights are higher if tests uncover regression faults in recent iterations of software testing and reduce time to detection of faults the results of the study show that the test cases prioritized using rocket 1 provide faster fault detection and 2 increase regression fault detection rate revealing 30 more faults for 20 of the test suite executed comparing to manually prioritized test cases 2013 ieee continuous integration history based prioritization regression testing software testing test case prioritization hardware and software verification and testing 9th international haifa verification conference hvc 2013 proceedings the proceedings contain 24 papers the topics discussed include backbones for equality increasing confidence in liveness model checking results with proofs speeding up the safety verification of programmable logic controller code modeling firmware as service functions and its application to test generation symbolic model based testing for industrial automation software predictive taint analysis for extended testing of parallel executions continuous integration for web based software infrastructures lessons learned on the webinos project improving post silicon validation efficiency by using pre generated data development and verification of complex hybrid systems using synthesizable monitors assertion checking using dynamic inferenceb and formal specification of an erase block management layer for flash memory implementing continuous integration software in an established computational chemistry software package continuous integration is the software engineering principle of rapid and automated development and testing we identify several key points of continuous integration and demonstrate how they relate to the needs of computational science projects by discussing the implementation and relevance of these principles to amber a large and widely used molecular dynamics software package the use of a continuous integration server has both improved collaboration and communication between amber developers who are globally distributed as well as making failure and benchmark information that would be time consuming for individual developers to obtain by themselves available in real time continuous integration servers currently available are aimed at the software engineering community and can be difficult to adapt to the needs of computational science projects however as demonstrated in this paper the effort payoff can be rapid since uncommon errors are found and contributions from geographically separated researchers are unified into one easily accessible web based interface 2013 ieee 2013 5th international workshop on software engineering for computational science and engineering se cse 2013 proceedings the proceedings contain 14 papers the topics discussed include a case study agile development in the community laser induced incandescence modeling environment cliime binary instrumentation support for measuring performance in openmp programs software design for decoupled parallel meshing of cad models scientific software process improvement decisions a proposed research strategy water science software institute an open source engagement process techniques for testing scientific programs without an oracle design and rationale of a quality assurance process for a scientific framework implementing continuous integration software in an established computational chemistry software package towards flexible automated support to improve the quality of computational science and engineering software and implicit provenance gathering through configuration management building test suites in social coding sites by leveraging drive by commits github projects attract contributions from a community of users with varying coding and quality assurance skills developers on github feel a need for automated tests and rely on test suites for regression testing and continuous integration however project owners report to often struggle with implementing an exhaustive test suite convincing contributors to provide automated test cases remains a challenge the absence of an adequate test suite or using tests of low quality can degrade the quality of the software product we present an approach for reducing the effort required by project owners for extending their test suites we aim to utilize the phenomenon of drive by commits capable users quickly and easily solve problems in others projects even though they are not particularly involved in that project and move on by analyzing and directing the drive by commit phenomenon we hope to use crowdsourcing to improve projects quality assurance efforts valuable test cases and maintenance tasks would be completed by capable users giving core developers more resources to work on the more complicated issues 2013 ieee test generation for robotized paint systems using constraint programming in a continuous integration environment advanced industrial robots usually consist of several independent control systems particularly robots that perform process intensive tasks like painting gluing and sealing have dedicated process control systems that are more or less loosely coupled with the motion control system testing the software for such systems is challenging because physical systems are necessary to test many of their characteristics this paper proposes a method for automated testing of such robot systems our approach draws on previous work on continuous integration combined with constraint programming techniques for test sequence generation in abb robotics process control system for robotized painting many tests are only conducted every six months during the release test with our automated test approach we expect to reduce the round trip time from code change to test completion to less than one day 2013 ieee constraint programming continuous integration robotized painting integrating behavior driven development and programming by contract this paper developed a contracted behavior driven development cbdd method that extends and combines the ideas behind test behavior driven development tdd bdd and programming by contract pbc to improve the overall stability and quality of a system a tool is developed to derive unit tests automatically by analyzing human written specifications for preconditions and post conditions when coupled with data definitions these results will be used to generate code to be run by a unit testing framework before deployment either as part of a continuous integration environment or by individual developers the tool will also generate wireframe classes implementing pre and post conditions within the code and using runtime contract analysis to generate information when an exception occurs thereby helping to automate verification of bug fixes 2013 springer verlag berlin heidelberg software contracted behavior driven development software development tools adapting extreme programming approach in developing electronic document online system edoc extreme programming xp is one of new discipline of software development methodology on values of simplicity communication feedback and also courage xp is an explorative and agile development method that seeks to satisfy the customer through early and continuous delivery of valuable software xp software development process starts with planning and all iterations consist of four basic phases in its life cycle designing coding testing and listening this paper tends to report the experience in adapting xp in developing electronic document online system for the use of centre for diploma studies universiti tun hussein onn malaysia edoc the project under study is a system that is use to store office documents such as letter in an online database the objective of this paper is to discuss the xp practices that had been choosed and also the lesson learnt by practising xp in developing edoc 2013 trans tech publications switzerland agile methodology extreme programming software engineering experienced benefits of continuous integration in industry software product development a case study in this paper we present a multi case study of industrial experiences of continuous integration among software professionals working in large scale development projects in literature multiple benefits of continuous integration are suggested but case studies validating these benefits are lacking this study investigates the extent to which continuous integration effects increased developer productivity increased project predictability improved communication and enabling agile testing suggested in literature are experienced in industry development projects the study involves four independent products at different levels of continuous integration maturity within ericsson ab in each of these products developers testers project managers and line managers have been interviewed their experiences of continuous integration are quantitatively assessed and discussed in comparison to the continuous integration benefits proposed in related work agile software development continuous integration software methodologies iasted multiconferences proceedings of the iasted international conference on software engineering se 2013 the proceedings contain 18 papers the topics discussed include the user information based mobile application recommender system towards r d as innovation experiment systems a framework for moving beyond agile software development software requirement acquisition method based on probabilistic action model algorithm investigating the candidate pair generation of the vf2 algorithm evaluating and improving design patterns applicability with metrics experienced benefits of continuous integration in industry software product development a case study interview guidelines for analyzing software architectural practices in agile projects integration of functional and interface requirements of an web based software a vdm based formal approach using ahp to compare and evaluate software security testing techniques and influence of code completion methods on the usability of apis successful extreme programming fidelity to the methodology or good teamworking context developing a theory of agile technology in combination with empirical work must include assessing its performance effects and whether all or some of its key ingredients account for any performance advantage over traditional methods given the focus on teamwork is the agile technology what really matters or do general team factors such as cohesion primarily account for a team s success perhaps the more specific software engineering team factors for example the agile development method s collective ownership and code management are decisive objective to assess the contribution of agile methodology agile specific team methods and general team factors in the performance of software teams method we studied 40 small scale software development teams which used extreme programming xp we measured 1 the teams adherence to xp methods 2 their use of xp specific team practices and 3 standard team attributes as well as the quality of the project s outcomes we used williams et al s 2004a 33 shodan measures of xp methods and regression analysis results all three types of variables are associated with the project s performance teamworking is important but it is the xp specific team factor continuous integration coding standards and collective code ownership that is significant only customer planning release planning planning game customer access short releases and stand up meeting is positively related to performance a negative relationship between foundations automated unit tests customer acceptance tests test first design pair programming and refactoring is found and is moderated by craftsmanship sustainable pace simple design and metaphor system of names of the general team factors only cooperation is related to performance cooperation mediates the relationship between the xp specific team factor and performance conclusion client and team foci of the xp method are its critical active ingredients 2012 elsevier b v all rights reserved agile methods cooperation extreme programming performance software development teamwork the future of continuous integration in gnome in free and open source software foss projects based on linux systems the users usually install the software from distributions the distributions act as intermediaries between software developers and users distributors collect the source code of the different projects and package them ready to be installed by the users packages seems to work well for managing and distributing stable major and minor releases it presents however various release management challenges for developers of projects with multiples dependencies not always available in the stable version of their systems in projects like gnome composed of dozens of individual components developers must build newer versions of the libraries and applications that their applications depend upon before working in their own projects this process can be cumbersome for developers who are not programmers such as user interaction designers or technical writers in this paper we describe some of the problems that the current distribution model presents to do continuous integration testing and deployment for developers in gnome and present ongoing work intended to address these problems that uses a git like approach to the building and deployment of applications 2013 ieee continuous integration free open source software gnome release engineering continuous delivery easy just change everything well maybe it is not that easy rally software transitioned from shipping code every eight weeks with time boxed scrum sprints to a model of continuous delivery with kanban the team encountered complex challenges with their build systems automated test suites customer enablement and internal communication but there was light at the end of the tunnel greater control and flexibility over feature releases incremental delivery of value lower risks fewer defects easier on boarding of new developers less off hours work and a considerable up tick in confidence this experience report describes the journey to continuous delivery with the aim that others can learn from our mistakes and get their teams deploying more frequently we will describe and contrast this transition from the business product management and engineering perspectives 2013 ieee proceedings agile 2013 the proceedings contain 21 papers the topics discussed include agile software development with distributed teams agility distribution and trust proposing regulatory driven automated test suites agile testing a systematic mapping across three conferences understanding agile testing in the xp agile universe agile and xp conferences analyzing effectiveness of workshops for learning agile development principles system dynamics modeling of agile continuous delivery process transforming a public sector company from stone age to agile adapting agile methodology to overcome social differences in project members beyond requirements dictator how agile helped a business analyst discover her real value black swan farming using cost of delay discover nurture and speed up delivery of value need 4 speed leverage new metrics to boost your velocity without compromising on quality continuous delivery easy just change everything well maybe it is not that easy and refactoring as a lifeline lessons learned from refactoring continuous integration and automation for devops the task of managing large installations of computer systems presents a number of unique challenges related to heterogeneity consistency information flow and documentation the emerging field of devops borrows practices from software engineering to tackle complexity in this paper we provide an insight in how automation can to improve scalability and testability while simultaneously reducing the operators work 2013 springer science business media administration automation devops elearning heterogeneous systems system management openflipper a highly modular framework for processing and visualization of complex geometric models openflipper is an open source framework for processing and visualization of complex geometric models suitable for software development in both research and commercial applications in this paper we describe in detail the software architecture which is designed in order to provide a high degree of modularity and adaptability for various purposes although openflipper originates in the field of geometry processing many emerging applications in this domain increasingly rely on immersion technologies consequently the presented software is unlike most existing vr software frameworks mainly intended to be used for the content creation and processing of virtual environments while directly providing a variety of immersion techniques by keeping openflipper s core as simple as possible and implementing functional components as plugins the framework s structure allows for easy extensions replacements and bundling we particularly focus on the description of the integrated rendering pipeline that addresses the requirements of flexible modern high end graphics applications furthermore we describe how cross platform unit and smoke testing as well as continuous integration is implemented in order to guarantee that new code revisions remain portable and regression is minimized openflipper is licensed under the lesser gnu public license and available up to this state for linux windows and mac osx 2013 ieee automated verification of cardiovascular models with continuous integration tools models in general but especially in medicine need extensive testing and verification to ensure that they do not contain errors and produce correct results traditionally this happens after completing the development in this work an approach to automated and continuous testing verification and documentation based on a continuous integration tool is presented this practice has several advantages in comparison to the traditional way of verification as the model is verified after every single change that is made to it one benefit is the earlier and more precise tracing of errors another advantage is the aggregation of code generation software building testing verifying and documentation in one tool to ensure maximum automation and to reduce expenditure of time furthermore due to the integration of central versioning systems it makes working in development teams easier in this work the development processes of two cardiovascular models are incorporated into a continuous integration system cardiovascular model continuous integration development tools model verification communicating continuous integration servers for increasing effectiveness of automated testing automated testing and continuous integration are established concepts in today x2019 s software engineering landscape but they work in a kind of isolated environment as they do not fully take into consideration the complexity of dependencies between code artifacts in different projects in this paper we demonstrate the continuous change impact analysis process ccip that breaks up the isolation by actively taking into account project dependencies the implemented ccip approach extends the traditional continuous integration ci process by enforcing communication between ci servers whenever new artifact updates are available we show that the exchange of ci process results contribute to improving effectiveness of automated testing 2012 acm dependency management software libraries software project dependency software testing test coverage agile practices in regulated railway software development complex software is becoming an important component of modern safety critical systems to assure the correct function of such software the development processes are heavily regulated by international standards often making the process very rigid unable to accommodate changes causing late integration and increasing the cost of development agile methods have been introduced to address these issues in several software domains but their use in safety critical applications remains to be investigated this paper provides an initial analysis of agile practices in the context of software development for the european railway sector regulated by the en 50128 standard the study complements previous studies on the use of agile methods in other regulated domains a systematic mapping between en 50128 requirements and agile practices showed that all practices support some objectives of the standard important supporting features recognized were focus on simple design test automation coding standards continuous integration and validation however several problematic areas were also identified including vague requirement analysis and change management most agile practices must be adapted to suit regulated software development and this analysis outlines a subset of the required changes 2012 ieee agile practices en 50128 railway safety critical systems software development processes software engineering alma software regression tests the evolution under an operational environment the alma software is a large collection of modules which implements the functionality needed for the observatory day to day operations including among others array antenna control correlator telescope calibration and data archiving many software patches must periodically be applied to fix problems detected during operations or to introduce enhancements after a release has been deployed and used under regular operational conditions under this scenery it has been imperative to establish besides a strict configuration control system a weekly regression test to ensure that modifications applied do not impact system stability and functionality a test suite has been developed for this purpose which reflects the operations performed by the commissioning and operations groups and that aims to detect problems associated to the changes introduced at different versions of alma software releases this paper presents the evolution of the regression test suite which started at the alma test facility and that has been adapted to be executed in the current operational conditions topics about the selection of the tests to be executed the validation of the obtained data and the automation of the test suite are also presented 2012 spie alma continuous integration process data validation software engineering testing framework instrument control software development process for the multi star ao system argos the argos project advanced rayleigh guided ground layer adaptive optics system will upgrade the large binocular telescope lbt with an ao system consisting of six rayleigh laser guide stars this adaptive optics system integrates several control loops and many different components like lasers calibration swing arms and slope computers that are dispersed throughout the telescope the purpose of the instrument control software ics is running this ao system and providing convenient client interfaces to the instruments and the control loops the challenges for the argos ics are the development of a distributed and safety critical software system with no defects in a short time the creation of huge and complex software programs with a maintainable code base the delivery of software components with the desired functionality and the support of geographically distributed project partners to tackle these difficult tasks the argos software engineers reuse existing software like the novel middleware from linc nirvana an instrument for the lbt provide many tests at different functional levels like unit tests and regression tests agree about code and architecture style and deliver software incrementally while closely collaborating with the project partners many argos ics components are already successfully in use in the laboratories for testing argos control loops 2012 spie adaptive optics continuous delivery distributed system instrument control software lbt pair programming rapid prototyping software development process test driven development tdd alma operation support software and infrastructure the atacama large millimeter submillimeter array alma will be a unique research instrument composed of at least 66 reconfigurable high precision antennas located at the chajnantor plain in the chilean andes at an elevation of 5000 m each antenna contains instruments capable of receiving radio signals from 31 3 ghz up to 950 ghz these signals are correlated inside a correlator and the spectral data are finally saved into the archive system together with the observation metadata this paper describes the progress in the development of the alma operation support software which aims to increase the efficiency of the testing distribution deployment and operation of the core observing software this infrastructure has become critical as the main array software evolves during the construction phase in order to support and maintain the core observing software it is essential to have a mechanism to align and distribute the same version of software packages across all systems this is achieved rigorously with weekly based regression tests and strict configuration control a build farm to provide continuous integration and testing in simulation has been established as well given the large amount of antennas it is imperative to have also a monitoring system to allow trend analysis of each component in order to trigger preventive maintenance activities a challenge for which we are preparing this year consists in testing the whole alma software performing complete end to end operation from proposal submission to data distribution to the alma regional centers the experience gained during deployment testing and operation support will be presented 2012 spie infrastructure monitoring operation operation support software regression tests a technique for agile and automatic interaction testing for product lines product line developers must ensure that existing and new features work in all products adding to or changing a product line might break some of its features in this paper we present a technique for automatic and agile interaction testing for product lines the technique enables developers to know if features work together with other features in a product line and it blends well into a process of continuous integration the technique is evaluated with two industrial applications testing a product line of safety devices and the eclipse ides the first case shows how existing test suites are applied to the products of a 2 wise covering array to identify two interaction faults the second case shows how over 400 000 test executions are performed on the products of a 2 wise covering array using over 40 000 existing automatic tests to identify potential interactions faults 2012 ifip international federation for information processing agile automatic combinatorial interaction testing continuous integration product lines testing applying industrial strength testing techniques to critical care medical equipment hardware and software development of embedded systems interdependently gear into each other even more so if the device under development is intended for use in critical care facilities such as intensive care units especially in this case safety measures and risk mitigation techniques are implemented using both hardware and software components thus applying hardware and software testing approaches in combination is inevitable as well the increasing utilization of test domain specific languages test dsls code generators and keyword driven interpreters tends to raise the level of abstraction in test development this approach aims to enhance productivity by generating executable tests from a non programming language created for describing test cases a second goal is to increase coverage by generating tests for as many as possible combinations of input values black box test or for all reasonable paths of a program flow white box test in combination with hardware supported signal generation and fault injection this can be a very powerful strategy for testing safety critical embedded devices this article introduces an example of this strategy the usage of a keyword driven testing technique in cooperation with additional test hardware in the context of an embedded medical device development all the while emphasizing the benefit of combining different approaches it discusses the utilization of commercial off the shelf cots testing hardware as well as the application of an in house developed test box it also highlights the integration of commercial software for requirements engineering test management and continuous integration with a self developed testing framework powered by its own keyword based test dsl 2012 springer verlag domainspecific language embedded system keyword driven medical device safety critical testing hardware mixed data parallel scheduling for distributed continuous integration in this paper we consider the problem of scheduling a special kind of mixed data parallel applications arising in the context of continuous integration continuous integration ci is a software engineering technique which consists in re building and testing interdependent software components as soon as developers modify them the ci tool is able to provide quick feedback to the developers which allows them to fix the bug soon after it has been introduced the ci process can be described as a dag where nodes represent package build tasks and edges represent dependencies among these packages build tasks themselves can in turn be run in parallel thus ci can be viewed as a mixed data parallel application a crucial point for a successful ci process is its ability to provide quick feedback thus make span minimization is the main goal our contribution is twofold first we provide and analyze a large dataset corresponding to a build dag second we compare the performance of several scheduling heuristics on this dataset 2012 ieee continuous integration dag scheduling mixed parallelism communicating continuous integration servers for increasing effectiveness of automated testing automated testing and continuous integration are established concepts in today s software engineering landscape but they work in a kind of isolated environment as they do not fully take into consideration the complexity of dependencies between code artifacts in different projects in this paper we demonstrate the continuous change impact analysis process ccip that breaks up the isolation by actively taking into account project dependencies the implemented ccip approach extends the traditional continuous integration ci process by enforcing communication between ci servers whenever new artifact updates are available we show that the exchange of ci process results contribute to improving effectiveness of automated testing copyright 2012 acm dependency management project dependency software software libraries software testing test coverage joint 10th working conference on software architecture wicsa 2012 and 6th european conference on software architecture ecsa 2012 proceedings companion volume the proceedings contain 35 papers the topics discussed include elements for a cloud based development environment online collaboration revision control and continuous integration an architecture framework for application managed scaling of cloud hosted relational databases framework for monitoring and testing web application scalability on the cloud a first account on stigmergic information systems and their impact on platform development towards bridging the communication gap between consumers and providers in the cloud vulcan architecture model based software development workbench aligning architecture knowledge management with scrum a case study on co evolution of software artifacts using integrated views modeling variability in product lines using domain quality attribute scenarios and configurator as a service tool support for deriving software architectures at runtime simulation of biological neural microcircuits on multi core systems our research focuses on the identification and quantification of the impact that multi core parallelization strategies have on the stability of the result of spiking neural networks simulations we investigated openmp based implementations of the spike response model and spike time dependent plasticity for studying behaviors of biological neurons and synapses the underlying neural microcircuits have small world topologies the simulation strategy is a synchronous one the software development methodology we follow makes use of systematic unit testing and continuous integration giving us a way to verify various perturbations of simulation results we carried out investigations on systems having different multi core processors the processing speed spikes second of our simulator scales well with the number of cores but the parallel efficiency is moderate when all cores of the system are used in the simulation 0 57 for 12 cores e g the primary outcomes of this work are twofold one the one hand the proposed parallel simulation strategies show a dynamic behavior unaltered by the use of multi core specific technologies on the other hand we analyze issues met in our approach to multi core simulations 2012 crown copyright making the leap to a software platform strategy issues and challenges context while there are many success stories of achieving high reuse and improved quality using software platforms there is a need to investigate the issues and challenges organizations face when transitioning to a software platform strategy objective this case study provides a comprehensive taxonomy of the challenges faced when a medium scale organization decided to adopt software platforms the study also reveals how new trends in software engineering i e agile methods distributed development and flat management structures interplayed with the chosen platform strategy method we used an ethnographic approach to collect data by spending time at a medium scale company in scandinavia we conducted 16 in depth interviews with representatives of eight different teams three of which were working on three separate platforms the collected data was analyzed using grounded theory results the findings identify four classes of challenges namely business challenges organizational challenges technical challenges and people challenges the article explains how these findings can be used to help researchers and practitioners identify practical solutions and required tool support conclusion the organization s decision to adopt a software platform strategy introduced a number of challenges these challenges need to be understood and addressed in order to reap the benefits of reuse researchers need to further investigate issues such as supportive organizational structures for platform development the role of agile methods in software platforms tool support for testing and continuous integration in the platform context and reuse recommendation systems 2012 elsevier b v all rights reserved ethnographic study grounded theory platform challenges software platform software reuse the 3c approach for agile quality assurance continuous integration is an agile practice for the continuous integration of new source code into the code base including the automated compile build and running of tests from traditional quality assurance we know software metrics as a very good approach to measure software quality combining both there is a promising approach to control and ensure the internal software quality this paper introduces the 3c approach which is an extension to the agile practice continuous integration it adds continuous measurement and continuous improvement as subsequent activities to ci and establishes metric based quality gates for an agile quality assurance it was developed and proven in an agile maintenance and evolution project for the automotive industry at t systems international a large german ict company within the project the approach was used for a legacy java based web application including the use of open source tools from the java eco system but the approach is not limited to these technical boundaries as similar tools are available also for other technical platforms 2012 ieee agile continuous integration empirical case study quality assurance software metrics the entity system architecture and its application in an undergraduate game development studio this paper reports on the software architecture methodology and student learning experience from the development of morgan s raid an educational game designed to teach fourth graders about indiana s civil war history the game was designed and developed during the 2010 2011 academic year and involved a multidisciplinary undergraduate team the team used industrial best practices of game development including continuous integration distributed version control test driven development and scrum this methodology was supported by an entity system architecture a software architectural design pattern that addresses many shortcomings of inheritance based game engine architectures detailed definitions of the entity system architecture and methodology are presented along with the experience report this combination of methodology and architecture directly contributed to the success of the project both as a software development exercise and as a learning experience copyright 2012 acm education entity system architecture game development studio learning new agile testing modes software is considered to have high quality only if it has undergone a series of good test cases testdriven development is a software development practice that leads to better quality and fewer defects in code the purpose of study of this paper is to evaluate the difference between a traditional testing and agile testing the testing techniques involved in agile projects the different modes of testing the do s and don ts of testing and also about the set of activities an agile tester needs to keep in mind while working on agile projects a study has been conducted in a software firm in chennai india two different testing modes have been proposed based on the testing modes that is projected in this article the do s and don ts of a software tester and their activities has been formulated a simple yes no type questionnaire is included in this article which is given to the testers before testing answering the simple yes no questions makes a tester to be an efficient tester in his job by following the do s and don ts guidelines and the activities of a tester given in this article it is found that the efficiency of an employee involved in agile testing has been improved considerably it is concluded that testing plays a vital role for any project testing would be more efficient if a parallel testing could be done in par with the development team better quality could be achieved if the project team follows a continuous integration with a continuous delivery and a continuous feedback from the customer 2012 asian network for scientific information extreme programming quality assurance test driven development test strategy testing modes testing techniques how well does test case prioritization integrate with statistical fault localization context effective test case prioritization shortens the time to detect failures and yet the use of fewer test cases may compromise the effectiveness of subsequent fault localization objective the paper aims at finding wh ether several previously identified effectiveness factors of test case prioritization techniques namely strategy coverage granularity and time cost have observable consequences on the effectiveness of statistical fault localization techniques method this paper uses a controlled experiment to examine these factors the experiment includes 16 test case prioritization techniques and four statistical fault localization techniques using the siemens suite of programs as well as grep gzip sed and flex as subjects the experiment studies the effects of the percentage of code examined to locate faults from these benchmark subjects after a given number of failures have been observed results we find that if testers have a budgetary concern on the number of test cases for regression testing the use of test case prioritization can save up to 40 of test case executions for commit builds without significantly affecting the effectiveness of fault localization a statistical fault localization technique using a smaller fraction of a prioritized test suite is found to compromise its effectiveness seriously despite the presence of some variations the inclusion of more failed test cases will generally improve the fault localization effectiveness during the integration process interestingly during the variation periods adding more failed test cases actually deteriorates the fault localization effectiveness in terms of strategies random is found to be the most effective followed by the art and additional strategies while the total strategy is the least effective we do not observe sufficient empirical evidence to conclude that using different coverage granularity levels have different overall effects conclusion the paper empirically identifies that strategy and time cost of test case prioritization techniques are key factors affecting the effectiveness of statistical fault localization while coverage granularity is not a significant factor it also identifies a mid range deterioration in fault localization effectiveness when adding more test cases to facilitate debugging 2012 elsevier b v all rights reserved adaptive random testing continuous integration coverage software process integration statistical fault localization test case prioritization using acceptance tests to validate accessibility requirements in ria accessibility stands as a quality requirement for web applications however current accessibility automatic evaluation tools are not capable of evaluating dom dynamic generated content that characterizes ajax applications and rias rich internet applications in this context this paper describes an approach for testing accessibility requirements in ria by using acceptance tests the authors had implemented a set of assistive technology user scenarios in the acceptance tests in order to guarantee keyboard accessibility in web applications as the scenarios were implemented as acceptance tests scenarios they provide accessibility analysis over all layers of the software from server side to client side implementations javascript and dynamically generated dom elements in ria the test scenarios are automatically executed and by doing so fit the continuous integration process of constant delivery of new functionalities in web projects 2012 acm acceptance testing continuous integration web accessibility influences on agile practice tailoring in enterprise software development agile development projects have become a reality in large enterprises using offshore development models a case study involving seven international companies with offices in bangalore india and london uk was conducted including interviews with 19 practitioners the contribution of this paper is to illustrate the reasons for tailoring agile practices within the context of large enterprises the findings show that scrum roles and practices did not conflict with enterprise policies or processes and were thought to improve product quality and productivity however agile practices from the xp tradition were not so widely adopted test driven development did not integrate well within enterprises where independent quality assurance teams were constituted as separate departments continuous integration was found to be challenging where enterprise software products required time consuming regression testing and elaborate code release processes while adoption of coding standards and collective code ownership are necessary to facilitate interaction between disparate stakeholder groups 2012 ieee distributed agile development enterprise software extreme programming xp scrum tailoring a course for developing personal software engineering competencies the strength of a software development team is the sum of the capabilities of each individual team member there exist at the personal level core software engineering competencies that need to be cultivated to allow an individual to fulfill their potential as an effective team contributor students in a course introducing team based software engineering typically possess adequate introductory programming skills but often lack other competencies required to execute a software project successfully students have rarely been introduced to concepts beyond programming such as estimation and planning continuous integration detailed design debugging and unit testing part of being a software engineer is the knowledge of multiple programming languages and tools without such knowledge it is impossible to make intelligent engineering decisions contemporary education philosophy stresses active student initiative and personal responsibility learning in our case with a rapidly evolving technology landscape students must come to realize that as in the workplace many skills are not so much taught as learned this paper captures our experiences with a second year software engineering course designed to address these challenges in addition to discussing the topics covered in the course we also present active and cooperative learning practices utilized in class activities 2012 american society for engineering education improving the quality of emi releases by leveraging the emi testing infrastructure what is an emi release what is its life cycle how is its quality assured through a continuous integration and large scale acceptance testing these are the main questions that this article will answer by presenting the emi release management process with emphasis on the role played by the testing infrastructure in improving the quality of the middleware provided by the project the european middleware initiative emi is a close collaboration of four major european technology providers arc glite unicore and dcache its main objective is to deliver a consolidated set of components for deployment in egi as part of the unified middleware distribution umd prace and other dcis the harmonized set of emi components thus enables the interoperability and integration between grids emi aims at creating an effective environment that satisfies the requirements of the scientific communities relying on it the emi distribution is organized in periodic major releases whose development and maintenance follow a 5 phase yearly cycle i requirements collection and analysis ii development and test planning iii software development testing and certification iv release certification and validation and v release and maintenance in this article we present in detail the implementation of operational and infrastructural resources supporting the certification and validation phase of the release the main goal of this phase is to harmonize into a single release the strongly inter dependent products coming from various development teams through parallel certification paths to achieve this goal the continuous integration and large scale acceptance testing performed on the emi testing infrastructure plays a key role the purpose of this infrastructure is to provide a system where both the production and the release candidate product versions are deployed on this system inter component testing by different product team testers can concurrently take place the testing infrastructure is also continuously monitored through nagios and exposed both to automatic testing and to usage by volunteer end users furthermore the infrastructure size is increased with resources made available by volunteer end users that are interested in implementing production like deployments or specific test scenarios improving the quality of emi releases by leveraging the emi testing infrastructure what is an emi release what is its life cycle how is its quality assured through a continuous integration and large scale acceptance testing these are the main questions that this article will answer by presenting the emi release management process with emphasis on the role played by the testing infrastructure in improving the quality of the middleware provided by the project the european middleware initiative emi is a close collaboration of four major european technology providers arc glite unicore and dcache its main objective is to deliver a consolidated set of components for deployment in egi as part of the unified middleware distribution umd prace and other dcis the harmonized set of emi components thus enables the interoperability and integration between grids emi aims at creating an effective environment that satisfies the requirements of the scientific communities relying on it the emi distribution is organized in periodic major releases whose development and maintenance follow a 5 phase yearly cycle i requirements collection and analysis ii development and test planning iii software development testing and certification iv release certification and validation and v release and maintenance in this article we present in detail the implementation of operational and infrastructural resources supporting the certification and validation phase of the release the main goal of this phase is to harmonize into a single release the strongly inter dependent products coming from various development teams through parallel certification paths to achieve this goal the continuous integration and large scale acceptance testing performed on the emi testing infrastructure plays a key role the purpose of this infrastructure is to provide a system where both the production and the release candidate product versions are deployed on this system inter component testing by different product team testers can concurrently take place the testing infrastructure is also continuously monitored through nagios and exposed both to automatic testing and to usage by volunteer end users furthermore the infrastructure size is increased with resources made available by volunteer end users that are interested in implementing production like deployments or specific test scenarios integrating early v amp v support to a gse tool integration platform the ever growing market pressure and complex products demand high quality work and effectiveness from software practitioners this relates also for the methods and tools they use for the development of software intensive systems validation and verification v v are the cornerstones of the overall quality of a system by performing efficient v v activities to detect defects during the early phases of development the developers are able to save time and effort required for fixing them tool support is available for all types of v v activities especially testing model checking syntactic verification and inspection in distributed development the role of tools is even more relevant than in single site development and tool integration is often imperative for ensuring the effectiveness of work in this paper we discuss how a tool integration framework was extended to support early v v activities via continuous integrations we find that integrating early v v supporting tools is feasible and useful and makes a tool integration framework even more beneficial 2011 ieee continuous integration global software integration tool integration v amp v tools verfication and validation co ordination support for managing progress of distributed agile projects progress in agile development is determined by the amount of working software produced source code versioning unit testing continuous integration and acceptance testing at are technical factors that affect the maturity of the software artefects produced therefore development progress is subject to change due to impact of these technical factors e g modifying source code artefects may affect completed user stories in co located agile projects face to face interaction is used to share information about changes that may affect development progress however in distributed projects team members find it harder to maintain an awareness of these changes which affects their understanding of the development progress this causes them to rely on less accurate progress information and contributes in producing low quality code and unnecessary rework and delays in this paper we propose a holistic approach that supports management of the development progress in geographically distributed agile projects by identifying and co ordinating the impact of the technical factors on progress which will provide distributed agile teams with improved awareness of the actual progress of the software 2011 ieee agile development co ordination geographically distributed project progress tracking common agile practices in software processes objective to investigate studies about software processes looking for practices which can be used to obtain agility in software processes method a systematic review including seven search engines was executed in feb 2010 to apply the defined criteria to select papers and extract information regarding working practices bringing agility to software processes results from 6696 retrieved papers 441 were selected to support the identification of 236 occurrences of 51 distinct practices associated with the concept of agility their descriptions were deeply analyzed and consolidated after discarding those which appeared in the technical literature in a small amount of papers 17 agile practices were identified conclusion although further studies are necessary to evaluate the efficacy of these 17 agile practices 12 of them have been more commonly approached in the software projects and could be primarily considered test driven development continuous integration pair programming planning game onsite customer collective code ownership small releases metaphor refactoring sustainable pace simple design and coding standards 2011 ieee agile methods agile practices agile software processes evidence based software engineering systematic review towards behavior driven operations bdops modern enterprise software systems entail many challenges such as availability scalability complexity and providing business agility ensuring the systems to be up and running for 24 × 7 has become a mandate for operations agile development has been adopted to keep pace with the demands of business and it test driven development tdd and behavior driven development bdd are practices which enable agile development so far the agile approach has been limited to development for ensuring business to be truly agile we need to take forward the agile approach to operations in this paper we discuss the behavior driven approach for operations specifically on the core sub systems like infrastructure provisioning deployment and monitoring we share our explorations and experiments with behavior driven monitoring bdm and how the same can be adopted for infrastructure provisioning and deployment we used cucumber nagios to detect behavior of an enterprise application we close this paper with a note on the benefits to busmess and it showing its relevance to devops continuous delivery and cloud computing 2011 iet behavior driven development behavior driven infrastructure behavior driven monitoring behavior driven operations cucumber nagios functional testing of complex event processing applications complex event processing cep is a powerful technology for implementing real time applications it offers efficient processing of occurring information pieces so called events based on an architecture that provides strong decoupling of its components event producer event processors and event consumer 4 for this cep is seen as an important contribution in future information systems cep applications already have been successfully applied in different fields of industry like finance logistics and manufacturing vendors of cep products promise agile real time systems as you are able to change business logic on the fly but this promise brings risks without comprehensive quality assurance changing small pieces of these complex systems can lead to unpredictable errors modern agile methodologies rely on strong quality assurance techniques like test driven development continuous integration or automated user acceptance tests 27 these methodologies will also be important in the development of cep applications this paper gives an overview about what requirements cep products will have to meet to support up to date software quality assurance 2011 ieee complex event processing functional testing quality assurance developing knowledge systems with continuous integration with the industrial success of knowledge based systems new requirements with respect to knowledge engineering processes arise besides advanced knowledge acquisition tools novel techniques for the quality assurance need to be established in order to maintain a safe development process in software engineering the application of continuous integration as a collection of practices has proved to be suitable for this task in this paper we transfer the general ideas of continuous integration from software engineering to knowledge engineering and we demonstrate the implementation of a continuous integration tool into a state of the art knowledge engineering workbench continuous integration knowledge engineering testing on practical adequate test suites for integrated test case prioritization and fault localization an effective integration between testing and debugging should address how well testing and fault localization can work together productively in this paper we report an empirical study on the effectiveness of using adequate test suites for fault localization we also investigate the integration of test case prioritization and statistical fault localization with a postmortem analysis approach our results on 16 test case prioritization techniques and four statistical fault localization techniques show that although much advancement has been made in the last decade test adequacy criteria are still insufficient in supporting effective fault localization we also find that the use of branch adequate test suites is more likely than statement adequate test suites in the effective support of statistical fault localization 2011 ieee continuous integration debugging testing implementation technology study of distributed automated software testing in order to study the distributed and automated testing of large scale software a distributed automated software testing platform dastp was presented which was based on the analysis of an existing software testing framework and the idea of distributed continuous software quality assurance the prototype system was implemented the platform integrated a series of tools required in the software testing and could use free resources in internet to complete the continuous integration and testing of large scale software a task scheduling algorithm based on part time constraint and an improved aco algorithm for set partitioning problem were proposed these two algorithms can partition testing task into subtasks and then schedule these subtasks automatically by running mysql testing in the prototype system the feasibility of the platform architecture and the effectiveness of the algorithms were verified aco algorithm automated software testing distributed continuous quality assurance distributed task scheduling software testing platform identifying opaque behavioural changes developers modify their systems by changing source code updating test suites and altering their system s execution context when they make these modifications they have an understanding of the behavioural changes they expect to happen when the system is executed when the system does not conform to their expectations developers try to ensure their modification did not introduce some unexpected or undesirable behavioural change we present an approach that integrates with existing continuous integration systems to help developers identify situations whereby their changes may have introduced unexpected behavioural consequences in this research demonstration we show how our approach can help developers identify and investigate unanticipated behavioural changes 2011 authors dynamic analysis impact analysis research demonstration static analysis unexpected behavioural change test data to reduce the complexity of unit test automation in order to automatically test large and complex software systems a well defined test process and a huge amount of test data are needed when it comes to test automation the quality of test data always plays a significant role by reducing the cost and the time required for the test activities in this work we follow the principle of quality of the test cases comes before quantity to show how the right selection of test data helps to address the goal of qualitative testing while optimizing the test effort needed 2011 authors continuous integration test automation test data unit testing testing in parallel a need for practical regression testing when software evolves its functionalities are evaluated using regression testing in a regression testing process a test suite is augmented reduced prioritized and run on a software build version regression testing has been used in industry for decades while in some modern software activities we find that regression testing is yet not practical to apply for example according to our realistic experiences in sohu com inc running a reduced test suite even concurrently may cost two hours or longer nevertheless in an urgent task or a continuous integration environment the version builds and regression testing requests may come more often in such a case it is not strange that a new round of test suite run needs to start before all the previous ones have terminated as a solution running test suites on different build versions in parallel may increase the efficiency of regression testing and facilitate evaluating the fitness of software evolutions on the other hand hardware and software resources limit the number of paralleled tasks in this paper we raise the problem of testing in parallel give the general problem settings and use a pipeline presentation for data visualization solving this problem is expected to make practical regression testing continuous integration pipeline scheduling regression testing test case prioritization a scalable autotest platform for embedded system the complex and diversity of embedded system make the developing and testing embedded system a hard work providing a high availability high scale universal testing platform can improve the development of embedded software the autotest platform focuses on layered scalability and continuous integration loose coupling between the layers makes the system easy to extend at the local layer continuous improvements reduce the initial investment optimize the platform implementation and expand capacity and capabilities according to requirements users commit test requests front end and background centralized testing cluster executes this task and returns results to users 2010 ieee autotest black box testing embedded system tdd agilists and the art of integrated assessment tool development software engineering for integrated assessment needs to address the fact that systems and models developed are increasingly used in participatory settings applying old principles of inside out design and development using waterfall model based processes is no longer sufficient new software engineering insights based on interaction design and iterative agile processes for the development help in building systems from a more outside in perspective based on two case studies from large european projects on integrated assessment this switch from applying old to applying new principles will be described and its effects discussed elements were taken from interaction design personas story boards mock ups focus groups and focus tasks these were mixed with an iterative and incremental development process using agile elements such as daily stand ups user stories planning games test driven development and continuous integration the resulting process was used for the development of the two systems siat and seamless if for integrated assessment giving them a more user oriented focus than what would have resulted from following the old principles agile software development integrated assessment interaction design influence of low frequency powertrain vibrations on driveability assessments cost and time efficient vehicle development is increasingly depending on the usage of adequate software tools to enhance effectiveness the aim is a continuous integration of simulation tools and test environments within the vehicle development process in order to save time and costs this paper introduces a procedure to reveal the cause of low frequency powertrain vibrations and the influences on the dynamic behavior of a vehicle on a roller test bench the affected longitudinal acceleration signal is an arbitrative criterion for the driveability assessment with avl driveâ a well known driveability analysis and development tool for the objective assessment concerning nvh and driveability aspects of full vehicles 1 these experimental studies are embedded into an approach which describes the functional assembly of three applied test environments road roller test bench and simulation with according tools in order to facilitate an integrated driveability development process the low powertrain vibrations are identified by performance of positive load change maneuvers tip in in the vehicle on a roller test bench a parallel recording of acceleration signals by the driveability analysis sensor system and of defined surfaces by a 3d laser scanning vibrometer lsv allows an identification of possible vibration causes by analysis of the appearing frequency spectrum furthermore is elucidated how the influences of different tires at the vehicle affect its longitudinal dynamic behavior hence the rim surface is scanned with a 3d laser scanning vibrometer focusing its longitudinal acceleration stimulation in the range of 1 100hz the gained knowledge from these investigations helps to determine room for improvement of vehicle driveability and nvh behavior but as well for advancement of simulation models copyright 2010 sae international assessment of a submerged grid mooring in the gulf of maine the university of new hampshire unh developed and maintained an offshore aquaculture test site in the western gulf of maine south of the isles of shoals in approximately 50 m of water this site was designed to have a permanent moored grid to which prototype fish cages or surface buoys could be attached for testing new designs and the viability of the structure in the exposed gulf of maine in 1999 the first moorings deployed consisted of twin single bay grids each capable of each securing one fish cage these systems were maintained until 2003 to expand the biomass capacity of the site the single bay moorings were recovered and a new four bay submerged grid mooring was deployed within the same foot print of the previous twin systems this unique system operated as a working platform to test various structures including surface and submersible fish cages feeding buoys and other supporting equipment in addition the expanded capability allowed aquaculture fish studies to be conducted along with engineering and new cage feeder testing the 4 bays of the mooring system were located 15 meters below the surface these bays were supported by nine flotation elements the system was secured to the seafloor on the sides with twelve catenary mooring legs consisting of polysteel line 27 5 m of 52 mm chain and a 1 ton embedment anchor and in the center with a single vertical line to a 2 ton weight to size the mooring gear the unh software package aqua fe was employed this program can apply waves and currents to oceanic structures predicting system motions and mooring component tensions the submerged grid was designed to withstand 9 meter 8 8 second waves with a 1 m s collinear current when securing four fish cages during its seven year deployment the site regularly experienced extreme weather events most n otably a storm with a 9 m significant wave height 10 second dominate period in april 2007 the maximum currents at the site were observed during internal solitary wave events when 0 75 m s currents with 25 minute periods and 8 m duration were observed the mooring was recovered in 2010 after 7 years of continuous deployment without problems the dominate maintenance requirement of the mooring was the cleaning once a year of excessive mussel growth on the flotation elements and grid lines no problems of anchor dragging or failure of mooring components were documented during the deployment upon recovery critical mooring components were inspected and documented focusing on items with wear or other areas of interest the mooring proved to be a reliable stable working platform for a variety of prototype ocean projects highlighting the importance of a sound engineering approach taken in the design process 2010 ieee foundations for event based process analysis in heterogeneous software engineering environments for monitoring controlling and improving software development projects project and quality managers need tool support to analyze engineering processes within development environments unfortunately technical and semantic gaps between the engineering tools and related data models make it hard to observe and analyze the implemented tool based engineering processes in this paper we build on a service oriented platform for technically and semantically integrating heterogeneous engineering tools and propose an approach to monitor analyze and improve tool based engineering processes we empirically evaluate the approach using the continuous integration and test process and discuss strengths and limitations major result was that the approach enabled comparing expected and real life engineering processes with respect to process structure performance of individual process steps and risk of bottlenecks 2010 ieee software process software validation and verification on the integration of test adequacy test case prioritization and statistical fault localization testing and debugging account for at least 30 of the project effort scientific advancements in individual activities or their integration may bring significant impacts to the practice of software development fault localization is the foremost debugging sub activity any effective integration between testing and debugging should address how well testing and fault localization can be worked together productively how likely does a testing technique provide test suites for effective fault localization to what extent may such a test suite be prioritized so that the test cases having higher priority can be effectively used in a standalone manner to support fault localization in this paper we empirically study these two research questions in the context of test data adequacy test case prioritization and statistical fault localization our preliminary postmortem analysis results on 16 test case prioritization techniques and four statistical fault localizations show that branch adequate test suites on the siemens suite are unlikely to support effective fault localization on the other hand if such a test suite is effective around 60 of the test cases can be further prioritized to support effective fault localization which indicates that the potential savings in terms of effort can be significant 2010 ieee continuous integration debugging testing reactive variability management in agile software development agile organizations focus on developing software systems that satisfy their current customer base without worrying about best practices to handle variations of requirements in the system scaling agile methods up to adopt variability management practices in their traditional form is challenging in this paper we discuss the challenges and we contribute a lightweight iterative approach that enables agile organizations to manage variability on demand in a reactive manner the approach relies on agile practices like iterative development refactoring and continuous integration and testing we present a case study to show how the approach was used to handle variability arising from technical and usability issues and we provide a discussion of the advantages and limitations of the approach 2010 ieee the adaptation of test driven software processes to industrial automation engineering software components provide an increasing part of added value in automation systems and become more complex to construct and test test driven development tdd of software systems has been successfully used for agile development of business software systems test cases guide the system implementation and can be executed automatically after software changes continuous integration build strategy however tdd processes need to be adapted to control automation systems engineering where real world systems are challenging to model and to test automatically in this paper we introduce an adapted tdd process from the business software engineering domain to industrial automation engineering we identify a set of uml models that enable the systematic derivation of test cases based on an initial empirical study we evaluate the adapted tdd process based on an industrial use case to identify strength and limitation of this approach major results of the study were that uml models enabled effective test case derivation in the study context 2010 ieee an it perspective on integrated environmental modelling the siat case policy makers have a growing interest in integrated assessments of policies the integrated assessment modelling iam community is reacting to this interest by extending the application of model development from pure scientific analysis towards application in decision making or policy context by giving tools a higher capability for analysis targeted at non experts but intelligent users many parties are involved in the construction of such tools including modellers domain experts and tool users resulting in as many views on the proposed tool during tool development research continues which leads to advanced understanding of the system and may alter early specifications accumulation of changes to the initial design obscures the design usually vastly increasing the number of defects in the software the software engineering community uses concepts methods and practices to deal with ambiguous specifications changing requirements and incompletely conceived visions and to design and develop maintainable extensible quality software the aim of this paper is to introduce modellers to software engineering concepts and methods which have the potential to improve model and tool development using experiences from the development of the sustainability impact assessment tool these range from choosing a software development methodology for planning activities and coordinating people technical design principles impacting maintainability quality and reusability of the software to prototyping and user involvement it is argued that adaptive development methods seem to best fit research projects that typically have unclear upfront and changing requirements the break down of a system into elements that overlap as little as possible in features and behaviour helps to divide the work across teams and to achieve a modular and flexible system however this must be accompanied by proper automated testing methods and automated continuous integration of the elements prototypes screen sketches and mock ups are useful to align the different views build a shared vision of required functionality and to match expectations 2010 elsevier b v assessment tool integrated assessment modelling software architecture software development process building security in using continuous integration building security into software is harder than it should be this article explores a way to align application security practices with other software development best practices in order to make building security in easier to manage and more cost effective in particular this article looks at combining continuous integration ci with security testing and secure static code analysis tech challenges in a large scale agile project a five year 25 man java project effort that started with a waterfall like methodology and that adopted scrum after less than a year has been concluded we present three key technical challenges briefly analyze their consequences and discuss the solutions we adopted firstly we discuss how we modularized our architecture module delineation principles coupling and the trade offs of abstraction then we discuss testing environments their automation and relation to branches and the effect on customer involvement and feedback finally we discuss the benefits and disadvantages of representing domain knowledge declaratively for all three challenges we discuss how the project s agility was affected 2010 springer verlag berlin heidelberg agile applicaiton layer branch business logic continuous integration coupling database updates declarative knowledge dependency deploy domain expert domain knowledge footprint ide java maven modularization module bloat pojo process scrum technical challenge testing using continuous integration and automated test techniques for a robust c4isr system we have used ci continuous integration and various software testing techniques to achieve a robust c4isr command control communications computers intelligence surveillance and reconnaissance multi platform system because of rapid changes in the c4isr domain and in the software technology frequent critical design adjustments and in turn vast code modifications or additions become inevitable defect fixes might also incur code changes these unavoidable code modifications may put a big risk in the reliability of a mission critical system also in order to stay competitive in the c4isr market a company must make recurring releases without sacrificing quality we have designed and implemented an xml driven automated test framework that enabled us developing numerous high quality tests rapidly while using ci with automated software test techniques we have aimed at speeding up the delivery of high quality and robust software by decreasing integration procedure which is one of the main bottleneck points in the industry this work describes how we have used ci and software test techniques in a large scaled multi platform multi language distributed c4isr project and what the benefits of such a system are 2009 ieee c4isr systems continuous integration mission critical systems multi platform testing robustness software test techniques xml driven automated test framework software process for rapid development of hpc software using cmake we are developing and extending the cmake family of software development tools www cmake org for use in the mobile network institute and the multi scale reactive modeling institute these tools are used to build test and package c c and fortran software in a cross platform manner by using cmake a software project can be built just as easily on a windows pc as on a cray xt5 super computer in addition cmake s ctest facility can test and then populate the testing dashboard cdash www cdash org which is a web based tool used to monitor and display the health of a software system in combination with ctest cdash provides a continuous integration testing system finally cpack can be used to package and deploy software across multiple computing platforms this paper will describe these tools how they are used in the software process and provide specific application of their usage in support of multi scale reactive modeling msrm and the mobile network modeling mnm high performance computing software applications institute the tools described in this paper are open source and available to any high performance computing hpc project the paper will provide a high level overview of the cmake tools with enough specifics to enable any hpc development effort to begin working with them we will also describe how these tools and the associated software process provide the computational infrastructure required to rapidly develop next generation hpc software test automation framework for implementing continuous integration manual testing is a laborious and time consuming process in addition it may not be effective in finding certain defects therefore we introduce an effective framework for automated testing to help solve such problems the proposed framework helps automate the distribution execution and results analysis of test cases the workflow of tests and test environments are graphically expressed as tables many software development and testing practices can be automated and greatly simplified by using this framework it can also be used to create a continuous integration ci system by incorporating the automated build tools or ci servers this paper provides best practices on automated ci solutions using the proposed framework to provide developers and or testers with a better idea of progress and code quality throughout the project lifecycle so that they can direct their time and expertise to more important challenging issues 2009 ieee enhancing testing technologies for globalization of software engineering and productivity while successful at increasing code churn rates global software development and evolution suffers from several quality assurance challenges first sub groups within developer communities often work on loosely coupled parts of the application code each developer sub group typically modifies a local copy of the code and frequently checks in changes and downloads other developers changes consequently after making a change a developer may not immediately realize that the local change has inadvertently broken other parts of the overall software code this situation is compounded as there is little direct inter developer communication almost all communication is done via web based tools such as code commit log messages bug reports change requests and comments this chapter outlines the challenges that global software development adds to the already complex quality assurance process two case studies of real software projects implemented in a disturbed manner demonstrate the importance of continuous integration testing and the positive consequences of increasing the diversity of quality assurance techniques tools finally it concludes with an outline of how software integration testing needs to be enhanced to meet the new challenges of globalization 2010 igi global enabling agile testing through continuous integration a continuous integration system is often considered one of the key elements involved in supporting an agile software development and testing environment as a traditional software tester transitioning to an agile development environment it became clear to me that i would need to put this essential infrastructure in place and promote improved development practices in order to make the transition to agile testing possible this experience report discusses a continuous integration implementation i led last year the initial motivations for implementing continuous integration are discussed and a pre and post assessment using martin fowler s practices of continuous integration is provided along with the technical specifics of the implementation the report concludes with a retrospective of my experiences implementing and promoting continuous integration within the context of agile testing implementing an effective test automation framework testing automation tools enable developers and or testers to easily automate the entire process of testing in software development evertheless adopting automated testing is not easy and unsuccessful due to a lack of key information and skills in order to help solve such problems we have designed a new framework to support a clear overview of the test design and or plan for automating tests in distributed environments those that are new to testing do not need to delve into complex automation tools or test scripts this framework allows a programmer or tester to graphically specify the granularity of execution control and aids communication between various stakeholders and software developers it also enables them to perform the automated continuous integration environment in this paper we describe details on experiences and usage of the proposed framework 2009 ieee automated testing continuous integration fit fitnesse staf stax test automation framework how well do test case prioritization techniquessupport statistical fault localization in continuous integration a tight integration of test case prioritization techniques and fault localization techniques may both expose failures faster and locate faults more effectively statistical fault localization techniques use the execution information collected during testing to locate faults executing a small fraction of a prioritized test suite reduces the cost of testing and yet the subsequent fault localization may suffer this paper presents the first empirical study to examine the impact of test case prioritization on the effectiveness of fault localization among many interesting empirical results we find that coverage based techniques and random ordering can be more effective than distribution based techniques in supporting statistical fault localization furthermore the integration of random ordering for test case prioritization and statistical fault localization can be effective in locating faults quickly and economically 2009 ieee continuous integration fault localization software process integration test case prioritization a unified test framework for continuous integration testing of soa solutions the quality of service oriented architecture soa solutions is becoming more and more important along with the increasing adoption of soa continuous integration testing cit is an effective technology to discover bugs as early as possible however the diversity of programming models used in an soa solution and the distribution nature of an soa solution pose new challenges for cit existing testing frameworks more focus on the integration testing of applications developed by a single programming model in this paper a unified test framework is proposed to overcome these limitations and enable the cit of soa solutions across the whole development lifecycle this framework is designed following the model driven architecture mda the information of an executable test case is separated into two layers the behavior layer and the configuration layer the behavior layer represents the test logic of a test case and is platform independent the configuration layer contains the platform specific information and is configurable for different programming models an extensible and pluggable test execution engine is specially designed to execute the integration test cases a global test case identifier instrumentation approach is used to merge the distributed test case execution traces captured by itcam an ibm integrated management tool a verification approach supporting boolean expression and back end service interaction verification is proposed to verify the test execution result initial experiments have shown the effectiveness of this unified test framework 2009 ieee continuous integration testing service oriented architecture exploiting timed automata for conformance testing of power measurements for software development testing is still the primary choice for investigating the correctness of a system automated testing is of utmost importance to support continuous integration and regression tests on actual hardware for embedded systems power consumption is a chief performance metric which is tightly coupled to the hardware used and the software exploiting low power modes automated testing of power consumption requires to investigate its conformance to a specification we employ timed automata for specifying the expected behavior of a real sensor node application as well as for describing the power measurements obtained from its real world implementation introducing computational optimizations the presented approach allows to utilize standard model checkers for automated conformance testing of modeled systems and monitored power consumption of their implementations 2009 springer berlin heidelberg continuous integration how do you know that your application still works i will demonstrate how to develop a web application and have some degree of confidence that it still works after a developer has checked in new code or made changes to the existing code base we will use java as development language mercurial as version control system maven as build system hudson as continuous integration server jboss as application server junit as primary test framework and selenium to drive all gui tests 2009 springer berlin heidelberg software product line engineering approach for enhancing agile methodologies one of the main principles of agile methodologies consists in the early and continuous delivery of valuable software by short time framed iterations after each iteration a working product is delivered according to the requirements defined at the beginning of the iteration testing tools facilitate the task of checking if the system provides the expected behavior according to the specified requirements however since testing tools need to be adapted in order to test new working products in each iteration a significant effort has to be invested this work presents a software product line engineering sple approach that allows flexibility in the adaption of testing tools with the working products in an iterative way a case study is also presented using plum product line unified modeller as the tool suite for spl implementation and management 2009 springer berlin heidelberg the power of continuous integration builds and agile development john watkins 2009 and cambridge university press 2009 synopsis this case study will examine how organizations can benefit from applying continuous integration build cib solutions it will also look at how adopting agile best practices can increase development productivity while introducing performance management techniques as well as examining the role and use of testing throughout cib introduction my name is james wilson and i am the ceo of trinem based in edinburgh united kingdom i cofounded trinem with philip gibbs in 2001 after working for a number of years as an it consultant primarily delivering software configuration management scm services and solutions since 2001 trinem has implemented scm projects that have inherited various forms of technologies methods and scale trinem has implemented processes and had their technology implemented for a wide spectrum of organizations including nasa united states bank of new york united kingdom hbos united kingdom belastingdienst holland syscom taiwan sdc denmark and ge united kingdom and holland this case study illustrates the challenges approaches and benefits that i have encountered while developing agile application development processes this case study will also explore some of the key technologies that were used both commercial and open source to augment the implementations delivered by trinem and myself agile extreme programming scrum and or iterative invariably when customers ask for consulting services to assist with the implementation of scm and application development best practices they already have an idea of what is happening in the industry developing a test automation framework for agile development and testing as software developers today we all face problems of repetitive and error prone processes a lack of a clear way of communication between stakeholders and risks of late defect discovery or release delays in order to help solve such problems we implemented an effective framework for automated testing which combines the automation features of staf stax and the ease of use based on tabular input and output of fitnesse this framework can support continuous integration as an automated testing framework to improve software development processes the greatest advantage of the framework is the agility that allows for rapid delivery of high quality software in this paper we describe the practices and benefits of using the proposed framework 2009 springer berlin heidelberg agile testing automated testing continuousintegration fit fitnesse staf stax test automation framework perceptive agile measurement new instruments for quantitative studies in the pursuit of the social psychological effect of agile practices rising interest on social psychological effects of agile practices necessitate the development of appropriate measurement instruments for future quantitative studies this study has constructed such instruments for eight agile practices namely iteration planning iterative development continuous integration and testing stand up meetings customer access customer acceptance tests retrospectives and co location the methodological approach followed the scale construction process elaborated in psychological research we applied both qualitative methods for item generation and quantitative methods for the analysis of reliability and factor structure principal factor analysis to evaluate critical psychometric dimensions results in both qualitative and quantitative analyses indicated high psychometric quality of all newly constructed scales the resulting measurement instruments are available in questionnaire form and ready to be used in future scientific research for quantitative analyses of social psychological effects of agile practices 2009 springer berlin heidelberg agile practices co location continuous integration customer acceptance tests customer access iteration planning iterative approach measurement instruments retrospectives stand up meetings test driven development using metric visualization and sharing tool to drive agile related practices this paper presents a metric visualization and sharing tool that supports management and control of agile related practices such as test driven development continuous integration user stories and pair programming the tool is part of a larger framework but can be used as a stand alone system it integrates data coming from different sources automatic non invasive data collection plug ins bug and task tracking repositories code parsers manual user input etc the tool also provides customizable indicators that enable non experts in the domain to get the general status of the observed process or product at a glance the dashboard based implementation of the tool is tailored to support multiple user roles including developers managers and even clients 2009 springer berlin heidelberg agile dashboard indicators metrics sharing visualization agile systems development and stakeholder satisfaction a south african empirical study the high rate of systems development sd failure is often attributed to the complexity of traditional sd methodologies e g waterfall and their inability to cope with changes brought about by today s dynamic and evolving business environment agile methodologies am have emerged to challenge traditional sd and overcome their limitations yet empirical research into am is sparse this paper develops and tests a research model that hypothesizes the effects of five characteristics of agile systems development iterative development continuous integration test driven design feedback and collective ownership on two dependent stakeholder satisfaction measures namely stakeholder satisfaction with the development process and with the development outcome an empirical study of 59 south african development projects using self reported data provided support for all hypothesized relationships and generally supports the efficacy of am iteration and integration together with collective ownership have the strongest effects on the dependent satisfaction measures copyright 2008 acm agile methods software development stakeholder satisfaction managing module dependencies to facilitate continuous testing developing large commercial software systems is complex techniques have been proposed to deal with such large scale systems development one approach that has had some success is the combination of continuous integration and unit testing large systems are often divided into modules based on an area of functionality with potentially different teams developing each module invariably these modules rely on and interact with each other problems arise when teams wishing to test their module depend on code from other teams that is in development or under modification during maintenance this paper describes an approach to managing module dependencies that allows teams to test their code in isolation or in conjunction with other modules this facilitates the ability to continually run tests without being negatively impacted by the state of other modules an additional side effect is that the approach exceeds the requirements of the gnu lesser general public license by allowing a software vendor to easily provide a limited amount of source code rather than potentially releasing source code for large portions of their product suite or allowing reverse engineering of potentially large portions of their proprietary product 2008 elsevier b v all rights reserved continuous integration software design and implementation software engineering software licensing testing team pace keeping build times down the use of automated build and continuous integration systems by software teams is a well established practice and has been shown to provide significant benefits however to qualify the value of continuous integration practices it is necessary to compare their cost with the associated benefit when considering automated builds or continuous integration in an agile team this cost is the time taken by developers to run the build script and automated tests before code can be committed and or deployed this paper discusses the effect of this time on team behaviour by comparing two projects with significantly different build times 2008 ieee pushing the boundaries of testing and continuous integration agile and extreme programming practices have popularised concepts of test driven development and continuous build cycles to the software community such practices are typically adopted to implement and deliver functionality early in the development process however some types of applications such as the one described in this report also require continuous tests for performance and robustness this report shows the experiences of the authors in extending the continuous build loop to include additional tests for performance and robustness with the intention of overcoming limitations of standard testing frameworks when applied to highly concurrent and real time applications it also describes how they went about building the appropriate framework to support the execution and verification of the test results 2008 ieee extending continuous integration into alm continuous integration ci the practice made popular by agile methodologies has been constrained so that it is localized within the lifecycle and provides only a partial picture of software quality continuous integration is a practice made up of two components including team members integrating their work frequently and integration not degrading code quality continuous integration has the promise of providing the automation framework that is needed to decrease the turnaround time on the longer running tests a continuous integration build is a process that extracts source code from the source code manager scm compiles it packages it and then runs some tests on the resulting artifacts one of the defining properties of staged ci is that each loop is a different build type this means that each stage builds the source code in addition to running one or more processes the staged ci approach results in multiple stages where each stage is a different build type continuous integration and performance testing continuous integration systems is used to perform integration performance and load testing continuous integration is a software engineering process where an application under development is completely rebuilt and tested frequently and automatically a continuous integration process is dependent on several factors including a single code repository automated build process with self testing and continuous integration server continuous performance management implements performance and scalability testing within a continuous integration environment which can perform integration and load testing extending continuous integration to different types of performance testing makes the investment in continuous integration even more worthwhile 14th international conference on distributed multimedia systems dms 2008 the proceedings contain 70 papers the special focus in this conference is on distributed multimedia systems i distributed multimedia systems ii distributed multimedia computing distributed multimedia systems iii and digital home and healthcare the topics include a recommendation system for segmented video streaming content utilizing categorized events and stimuli a comparison of distributed data parallel multimedia computing over conventional and optical wide area networks a lightweight augmented reality system measuring reliability component in business process automation optimizing the architecture of adaptive complex applications using genetic programming a soft real time scheduling algorithm videoconference support system using printed and handwritten keywords reporting events in a multimedia content distribution and consumption system distributed interactive multimedia for technology enhanced learning and automated content production and distribution unifying quality standards to capture architectural knowledge for web services domain tassonomy and review of complex content models testing multi agent systems for deadlock detection based on uml models ip surveillance system using interactive dual camera hand off control with fov boundary detection action patterns probing for dynamic service composition in home network a flexibile contxt aware middleware for developing context aware applications projects and goals for the eclipse italian community enhancing rationale management with second life meetings a method to diagnose self weaknesses for software development organizations a distributed system for continuous integration with jini transforming uml sequence diagrams to class diagrams and goal driven design transformation by applying design patterns training future software developers to acquire agile development skills students related to software development are motivated to acquire agile techniques by guiding them towards delivering large scale systems agile techniques are rapidly transforming into adopted development methodology commercially an advanced course information systems development project isdp is offered to the students of software engineering database systems and other related fields in which for the first time they experienced a simulated but realistic software development environment observations show that the agile techniques has positive impact on development progress and system quality some additional recommendations are derived few of them are mandate function list being pragmatic conceptualizing unit testing before coding and continuous integration of the system software amp systems engineering process and tools for the development of autonomous driving intelligence when a large number of people with heterogeneous knowledge and skills run a project together it is important to use a sensible engineering process this especially holds for a project building an intelligent autonomously driving car to participate in the 2007 darpa urban challenge in this article we present essential elements of a software and systems engineering process for the development of artificial intelligence capable of driving autonomously in complex urban situations the process includes agile concepts like test first approach continuous integration of every software module and a reliable release and configuration management assisted by software tools in integrated development environments however the most important ingredients for an efficient and stringent development are the ability to efficiently test the behavior of the developed system in a flexible and modular simulator for urban situations the hurie method a case study combining requirements gathering and user interface evaluation this chapter discusses that as the usability team evaluates the emerging user interface ui design for a game like tool for teaching battle command software through distance learning they found themselves in the uneasy position of having started to plan for two pluralistic usability walk throughs wts with two different but equally time constrained user samples and a new discovery that even the product development team members were uncertain as to the product requirements the team could have postponed the ui evaluations but instead chose to try to take full advantage of the test participants already scheduled and to conduct a hybrid method wherein they in parallel gathered user requirements information and evaluated the ui prototype they selected the pluralistic usability wt as their evaluation method both because it allowed them to collect data from a number of these valuable and hard to schedule users at the same time and that it would allow for a dialogue between these representative users and the product developers thus speeding up the back and forth that was necessary if they were to be engaged in an iterative design process the team added a requirements gathering exercise onto the front of the pluralistic usability wt to collect user requirements data before biasing the pluralistic usability wt participants with the ui prototype the early delivery of a ui prototype for evaluation helps meet the agile principle of early and continuous delivery 2007 elsevier inc all rights reserved test driven design methodology for component based system for modern systems there is growing proof that serial traditional approaches such as the traditional waterfall model and model driven architecture are ineffective and development lifecycles need to be iterative and incremental in this presentation we discuss the iterative and incremental approach for software design methodology called test driven design tdd the tdd development cycle starts with the requirement specification and therefore captures defects much earlier in the development cycle tdd requires that no production code be written until first a unit test is written we compare tdd with the traditional methods and describe in detail the tdd method we cover continuous integration acceptance testing system wide testing for each iteration test frameworks cost of change roi benefits and limitations of the new test driven design and provide evidence from industry that tdd leads to higher programmer productivity with higher code quality the future work investigations will extend the reach and effectiveness of tdd by using latest technologies to generate tests from message sequence charts and generating code thru use of a model compiler leading to an advanced test driven design methodology further investigations will also look at the concurrency issues by use of ltsa labelled transition analyzer technology 2007 ieee cruisin and chillin testing the java based distributed ground data system chill with cruisecontrol this paper describes the design of the development test environment for the mission data processing and control subsystem mpcs code named chill mpcs chill is currently in development to support the mars science laboratory msl scheduled for launch in 2009 chill is a linux based ground data system which includes both telemetry and command functions the development test configuration consists of five levels unit testing end to end testing user interface testing external interface testing and installation deployment testing this paper will focus primarily on the automation of the lowest two levels unit and end to end testing mpcs chill s continuous integration process is provided by its adaptation of cruisecontrol which is an open source framework for a continuous build process cruisecontrol is configured on the dedicated build machine a linux workstation which is the target platform chill has configured cruisecontrol into two project loops the first fetches the latest version of software from a central repository builds it and performs unit tests junit the second loop runs scripted end to end tests which are performed on the results of the first build results are reported via email notification and a web interface provides the details of the current and previous builds for each loop the evolution of test definition is requirements feed into design design leads to use cases and tests are derived from use cases thus leading to the mapping of tests to requirements unit tests operate on internal components while end to end tests operate at a higher level of abstraction and therefore can be traced to requirements the evolutionary process ensures that we are testing to requirements mpcs chill presents a model for testing java based distributed ground systems in a semi automated manner the mpcs model is highly applicable to other projects looking to automate their testing in addition to achieving continuous integration 2007 ieee agile documentation strategies the planning strategies implemented by agile software developers for documentation are discussed most of agile software developers used technical practices such as regression testing refactoring and continuous integration instead of techniques such as modeling and governance for documentation they identified the requirement of documentation of stakeholders such as business management it management operations staff and enterprise architects agile software developers developed documentation as a stakeholder requirement agile software developers used the principle of literate programming of writing source code that contain embedded documentation they also used the just in time jit concept for meeting the requirements of documentation of stakeholders continuous testing for enterprise portal technology refresh this paper presents experiences and lessons learned detailing software testing for a technology refresh project that took place over a period of one year the paper describes the continuous testing performed while the team ported a web portal from one environment to another which will probably affect more websites and web portals as time goes on the original portlet based application was constructed four years ago and has been experiencing problems during peak demand times the overall goal of this technology refresh project is to achieve stability of the portal based on a more robust architecture this paper summarizes test plans and results for iterative functional automated regression and continuous performance testing the team designed the system for better performance monitored test results from the early stage of the lifecycle and unveiled potential issues using continuous integration and testing continuous testing enterprise portal performance testing software testing technology refresh assessing undergraduate experience of continuous integration and test driven development a number of agile practices are included in software engineering curricula including test driven development continuous integration often is not included despite it becoming increasingly common in industry to code test and integrate at the same time this paper describes a study whereby software engineering undergraduates were given a short intensive experience of test driven development with continuous integration using an environment that imitated a typical industrial circumstance assessment was made of students agile experience rather than of project deliverables using a novel set of process measures that examined students participation and performance in agile testing results showed good participation by student pairs and clear understanding of agile processes and configuration management future work will investigate automation of the assessment of continuous integration and configuration management server data agile practices assessment process continuous integration junit software engineering education test driven development a roadmap for using agile development in a traditional environment one of the newer classes of software engineering techniques is called agile development in agile development software engineers take small implementation steps and in some cases they program in pairs in addition they develop automatic tests prior to implementing their small functional piece agile development focuses on rapid turnaround incremental planning customer involvement and continuous integration agile development is not the traditional waterfall method or even a rapid prototyping method although this methodology is closer to agile development at the jet propulsion laboratory jpl a few groups have begun agile development software implementations the difficulty with this approach becomes apparent when agile development is used in an organization that has specific criteria and requirements handed down for how software development is to be performed the work at the jpl is performed for the national aeronautics and space agency nasa both organizations have specific requirements rules and processes for developing software this paper will discuss some of the initial uses of the agile development methodology the spread of this method and the current status of the successful incorporation into the current jpl development policies and processes 2006 by the american institute of aeronautics and astronautics inc software carpentry getting scientists to write better code by making them more productive the prospects of developing software skills in the university of toronto to enable emerging scientists to write better code by making them more productive are discussed a software carpentry course emphasizes on small scale and intermediate practical software issues and makes all study materials available on websites for self study purposes the course aims to teach computational scientists the methods to meet standards and meet the software quality in a systematic manner it also enables a software engineer to recreate and rerun programs and test codes that are used to produce the results version control assists project management by its ability to undo the stakes and facilitate teamwork gnu enables an engineer to build the programs by its easy documentation and file configuration the continuous integration while checking codes is attained the test suites are rerun and results are posted to the project mailing list websites test driven development concepts taxonomy and future direction the test driven development strategy requires writing automated tests prior to developing functional code in small rapid iterations xp is an agile method that develops object oriented software in very short iterations with little upfront design although not originally given this name tdd was described as an integral xp practice necessary for analysis design and testing that also enables design through refactoring collective ownership continuous integration and programmer courage along with pair programming and refactoring tdd has received considerable individual attention since xp s introduction developers have created tools specifically to support tdd across a range of languages and have written numerous books explaining how to apply tdd concepts researchers have begun to examine tdd s effects on defect reduction and quality improvements in academic and professional practitioner environments and educators have started to examine how to integrate tdd into computer science and software engineering pedagogy continuous integration amp net part ii the establishment of a continuous integration environment using standard tools by microsoft is discussed the concurrent versions systems cvs an open source version control system which runs on linux and windows was used for this establishment cruisecontrol net is an open source tool from sourceforge designed to meld several other open source building and testing tools and completely automate the build process the plans to introduce fxcop and other net framework design guidelines are underway and these tools would be applied with continuous integration process continuous integration amp net part i a continuous integration system which describes an automated process that lets teams build and test their software many times a day is discussed the complete continuous integration solution encompasses automated builds data driven unit testing documentation version control and code coverage a change in the build file and the addition of appropriate documetation comments to the source code are needed to get the documentation automatically generated the basic tools supporting continuous integration help to put together a process to automate the building testing and documentation of net applications 5th international conference on extreme programming and agile processes in software engineering xp 2004 the proceedings contain 60 papers the special focus in this conference is on acceptance testing scalability issues new insights refactoring and social issues the topics include putting a motor on the canoo webtest acceptance testing framework generative acceptance testing for difficult to test software distributed product development using extreme programming efficient markets efficient projects and predicting the future agile principles and open source software development agile specification driven development towards a proper integration of large refactorings in agile software development the oregon software development process empirical analysis on the satisfaction of it employees comparing xp practices with other software development methodologies agile processes enhancing user participation for small providers of off the shelf software self adaptability of agile software processes enterprise continuous integration using binary dependencies automated generation of unit tests for refactoring test driven development and software process improvement in china a comparison of software development process experiences literate programming to enhance agile methods application of lean and agile principles to workflow management assistance for supporting xp test practices in a distributed cscw environment combining ad hoc and regression testing complete test generation for extreme programming conditional test for javabeans components agile methods in software engineering education extreme programming in a university project a selection framework for agile methodologies designing the ultimate acceptance testing framework and xp and organizational change reengineering legacy application to e business with modified rational unified process experience in reengineering a legacy application into a web based j2ee system with modified rational unified process rup is presented rup is adopted into an onsite offshore development model along with iso 9001 and sei cmm level 5 standards the new application has above 2500 code components and the effort is about 100 person years for the benefit of software development community some of our experiences in design development testing and project management are elaborated as generalized concepts we have demonstrated that development process could be improved with lessons learnt from the initial iterations the three views of a web application are explained and the translations between the layers are discussed benefit of continuous integration is highlighted various types of dependencies to be taken into account for sequencing the development are elaborated the levels of testing in iterative development are mentioned the importance of adaptive team structure and various parameters guiding iteration planning are dealt with a simple estimation model based on types of transactions is presented finally a fine grained risk management concept that can integrate with the development process is proposed 2003 ieee a testing checklist for database programs managing risk in an agile environment quoin inc has been using agile testing methodologies such as continuous integration and unit testing in its development of sql based java software since 1998 based on that experience we present a checklist containing twenty six database related items to consider when testing such software the checklist is annotated with examples of good and bad development and testing practices while this paper targets projects that use both sql and java most of the checklist items are applicable to any database transactions in any language managers and developers can use this checklist as a starting point for discussion of what types of tests to require for their particular project especially when operating in an agile environment such as xp referring to the checklist will enable the project to develop more robust code with less effort springer verlag berlin heidelberg 2003 agile java sql testing xp issues in scaling agile using an architecture centric approach a tool based solution agile software development processes are best applied to small teams on small to medium sized projects scaling agile methodologies is desired in order to bring the benefits of agile to larger more complex projects one way to scale agile methods is via an architecture centric approach in which a project is divided into smaller modules on which sub teams can use agile effectively however a problem with architecture centric modifications to agile methods is the introduction of non agile elements for instance up front design and integration difficulties these issues are discussed and a tool based solution is presented facilitating the adoption of the architecture centric agile approach springer verlag berlin heidelberg 2003 agile methods automated testing continuous integration cruisecontrol scaling test driven design extreme programming turning the world upside down established software engineering practices which are applied to the demands of developing today s software is discussed it starts by describing the sort of broken process which is pandemic in the industry and then explains the nature of xp in terms of how it can address this problem this paper discusses some of the more controversial xp practices such as eschewing a formal requirements document and test driven development new architectures for uav flight control avionics commercial and military aircraft utilize proven data bus standards such as mil std 1553b and arinc 429 however future avionics systems may take greater advantage of commercial hardware and networking technology with the increased processors and speeds it is possible to begin challenge the fundamental avionics architectures used for navigation and flight control this is particularly true for uavs where there is currently rapid change goals of new architectures include reduced development time cost increased testability lead to quicker flight validation and higher integrality of these the concepts addressed in a new architecture include scheduling tasks and continuous integration extreme programming extreme programming xp is a lightweight design method developed by kent beck ward cunningham and others after notable successes xp has been generating huge interest and no small amount of controversy much of the interest stems from xp s pragmatic approach to development key practices include pair programming writing tests upfront frequent refactoring and rebuild continuous integration and testing key principles incremental and iterative development working with the simplest solution cutting out extraneous documentation and collective code ownership